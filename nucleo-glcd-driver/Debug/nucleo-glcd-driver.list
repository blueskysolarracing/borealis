
nucleo-glcd-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000807c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d1c  0800824c  0800824c  0001824c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f68  08008f68  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008f68  08008f68  00018f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f70  08008f70  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f70  08008f70  00018f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f74  08008f74  00018f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f8c  20000074  08008fec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005000  08008fec  00025000  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e2e9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004215  00000000  00000000  0003e38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  000425a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017f0  00000000  00000000  00043ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b9d  00000000  00000000  000456d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d704  00000000  00000000  0006b26d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df395  00000000  00000000  00088971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00167d06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007374  00000000  00000000  00167d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0016f0cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0016f0f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008234 	.word	0x08008234

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08008234 	.word	0x08008234

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <glcd_command>:
#if defined(GLCD_CONTROLLER_ST7565R)

#include "../glcd.h"

void glcd_command(uint8_t c)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
	GLCD_A0_LOW();
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c4:	4805      	ldr	r0, [pc, #20]	; (80005dc <glcd_command+0x28>)
 80005c6:	f002 f88d 	bl	80026e4 <HAL_GPIO_WritePin>
	glcd_spi_write(c);	
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 f90b 	bl	80007e8 <glcd_spi_write>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40020400 	.word	0x40020400

080005e0 <glcd_data>:

void glcd_data(uint8_t c)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	GLCD_A0_HIGH();
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f0:	4805      	ldr	r0, [pc, #20]	; (8000608 <glcd_data+0x28>)
 80005f2:	f002 f877 	bl	80026e4 <HAL_GPIO_WritePin>
	glcd_spi_write(c);	
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 f8f5 	bl	80007e8 <glcd_spi_write>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40020400 	.word	0x40020400

0800060c <glcd_set_contrast>:

void glcd_set_contrast(uint8_t val) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
	/* Can set a 6-bit value (0 to 63)  */

	/* Must send this command byte before setting the contrast */
	glcd_command(0x81);
 8000616:	2081      	movs	r0, #129	; 0x81
 8000618:	f7ff ffcc 	bl	80005b4 <glcd_command>
	
	/* Set the contrat value ("electronic volumne register") */
	if (val > 63) {
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	2b3f      	cmp	r3, #63	; 0x3f
 8000620:	d903      	bls.n	800062a <glcd_set_contrast+0x1e>
		glcd_command(63);
 8000622:	203f      	movs	r0, #63	; 0x3f
 8000624:	f7ff ffc6 	bl	80005b4 <glcd_command>
	} else {
		glcd_command(val);
	}
	return;
 8000628:	e004      	b.n	8000634 <glcd_set_contrast+0x28>
		glcd_command(val);
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ffc1 	bl	80005b4 <glcd_command>
	return;
 8000632:	bf00      	nop
}
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <glcd_set_y_address>:

	return;
}

void glcd_set_y_address(uint8_t y)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	b082      	sub	sp, #8
 800063e:	af00      	add	r7, sp, #0
 8000640:	4603      	mov	r3, r0
 8000642:	71fb      	strb	r3, [r7, #7]
	glcd_command(ST7565R_PAGE_ADDRESS_SET | (0x0F & y)); /* 0x0F = 0b00001111 */
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	f003 030f 	and.w	r3, r3, #15
 800064a:	b2db      	uxtb	r3, r3
 800064c:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000650:	b2db      	uxtb	r3, r3
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ffae 	bl	80005b4 <glcd_command>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <glcd_set_x_address>:

void glcd_set_x_address(uint8_t x)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
	glcd_set_column_upper(x);
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f808 	bl	8000682 <glcd_set_column_upper>
	glcd_set_column_lower(x);	
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	4618      	mov	r0, r3
 8000676:	f000 f816 	bl	80006a6 <glcd_set_column_lower>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <glcd_set_column_upper>:
{
	glcd_command(ST7565R_DISPLAY_NORMAL);
}

void glcd_set_column_upper(uint8_t addr)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b082      	sub	sp, #8
 8000686:	af00      	add	r7, sp, #0
 8000688:	4603      	mov	r3, r0
 800068a:	71fb      	strb	r3, [r7, #7]
	glcd_command(ST7565R_COLUMN_ADDRESS_SET_UPPER | (addr >> 4));
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	091b      	lsrs	r3, r3, #4
 8000690:	b2db      	uxtb	r3, r3
 8000692:	f043 0310 	orr.w	r3, r3, #16
 8000696:	b2db      	uxtb	r3, r3
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff8b 	bl	80005b4 <glcd_command>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <glcd_set_column_lower>:

void glcd_set_column_lower(uint8_t addr)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	4603      	mov	r3, r0
 80006ae:	71fb      	strb	r3, [r7, #7]
	glcd_command(ST7565R_COLUMN_ADDRESS_SET_LOWER | (0x0f & addr));
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	f003 030f 	and.w	r3, r3, #15
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff ff7b 	bl	80005b4 <glcd_command>
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <glcd_write>:
		}			
	}
}

void glcd_write()
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0

	uint8_t bank;

	for (bank = 0; bank < GLCD_NUMBER_OF_BANKS; bank++) {
 80006ce:	2300      	movs	r3, #0
 80006d0:	71fb      	strb	r3, [r7, #7]
 80006d2:	e038      	b.n	8000746 <glcd_write+0x7e>
		/* Each bank is a single row 8 bits tall */
		uint8_t column;		
		
		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
 80006d4:	4b21      	ldr	r3, [pc, #132]	; (800075c <glcd_write+0x94>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	785b      	ldrb	r3, [r3, #1]
 80006da:	461a      	mov	r2, r3
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	3301      	adds	r3, #1
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	429a      	cmp	r2, r3
 80006e4:	da2b      	bge.n	800073e <glcd_write+0x76>
			continue; /* Skip the entire bank */
		}
		
		if (glcd_bbox_selected->y_max < bank*8) {
 80006e6:	4b1d      	ldr	r3, [pc, #116]	; (800075c <glcd_write+0x94>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	78db      	ldrb	r3, [r3, #3]
 80006ec:	461a      	mov	r2, r3
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	429a      	cmp	r2, r3
 80006f4:	db2b      	blt.n	800074e <glcd_write+0x86>
			break;    /* No more banks need updating */
		}
		
		glcd_set_y_address(bank);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ff9e 	bl	800063a <glcd_set_y_address>
		glcd_set_x_address(glcd_bbox_selected->x_min);
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <glcd_write+0x94>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ffab 	bl	8000660 <glcd_set_x_address>

		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <glcd_write+0x94>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	71bb      	strb	r3, [r7, #6]
 8000712:	e00d      	b.n	8000730 <glcd_write+0x68>
		{
			glcd_data( glcd_buffer_selected[GLCD_NUMBER_OF_COLS * bank + column] );
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <glcd_write+0x98>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	79fa      	ldrb	r2, [r7, #7]
 800071a:	01d1      	lsls	r1, r2, #7
 800071c:	79ba      	ldrb	r2, [r7, #6]
 800071e:	440a      	add	r2, r1
 8000720:	4413      	add	r3, r2
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff5b 	bl	80005e0 <glcd_data>
		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
 800072a:	79bb      	ldrb	r3, [r7, #6]
 800072c:	3301      	adds	r3, #1
 800072e:	71bb      	strb	r3, [r7, #6]
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <glcd_write+0x94>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	789b      	ldrb	r3, [r3, #2]
 8000736:	79ba      	ldrb	r2, [r7, #6]
 8000738:	429a      	cmp	r2, r3
 800073a:	d9eb      	bls.n	8000714 <glcd_write+0x4c>
 800073c:	e000      	b.n	8000740 <glcd_write+0x78>
			continue; /* Skip the entire bank */
 800073e:	bf00      	nop
	for (bank = 0; bank < GLCD_NUMBER_OF_BANKS; bank++) {
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	3301      	adds	r3, #1
 8000744:	71fb      	strb	r3, [r7, #7]
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b07      	cmp	r3, #7
 800074a:	d9c3      	bls.n	80006d4 <glcd_write+0xc>
 800074c:	e000      	b.n	8000750 <glcd_write+0x88>
			break;    /* No more banks need updating */
 800074e:	bf00      	nop
		}
	}

	glcd_reset_bbox();
 8000750:	f000 f8ea 	bl	8000928 <glcd_reset_bbox>

}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000498 	.word	0x20000498
 8000760:	20000494 	.word	0x20000494

08000764 <glcd_ST7565R_init>:

void glcd_ST7565R_init(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0

	/* Init sequence based on datasheet example code for NHD-C12864A1Z-FSW-FBW-HTT */
	/* Datasheet says max SCK frequency 2.5MHz for this LCD */
	/* We use "reverse direction" for common output mode, as opposed to datasheet specifying "normal direction" */

	glcd_command(0xa0); /* ADC select in normal mode */
 8000768:	20a0      	movs	r0, #160	; 0xa0
 800076a:	f7ff ff23 	bl	80005b4 <glcd_command>
	glcd_command(0xae); /* Display OFF */
 800076e:	20ae      	movs	r0, #174	; 0xae
 8000770:	f7ff ff20 	bl	80005b4 <glcd_command>
	glcd_command(0xc8); /* Common output mode select: reverse direction (last 3 bits are ignored) */
 8000774:	20c8      	movs	r0, #200	; 0xc8
 8000776:	f7ff ff1d 	bl	80005b4 <glcd_command>
	glcd_command(0xa2); /* LCD bias set at 1/9 */
 800077a:	20a2      	movs	r0, #162	; 0xa2
 800077c:	f7ff ff1a 	bl	80005b4 <glcd_command>
	glcd_command(0x2f); /* Power control set to operating mode: 7 */
 8000780:	202f      	movs	r0, #47	; 0x2f
 8000782:	f7ff ff17 	bl	80005b4 <glcd_command>
	glcd_command(0x26); /* Internal resistor ratio, set to: 6 */
 8000786:	2026      	movs	r0, #38	; 0x26
 8000788:	f7ff ff14 	bl	80005b4 <glcd_command>
	glcd_set_contrast(20); /* Set contrast, value experimentally determined */
 800078c:	2014      	movs	r0, #20
 800078e:	f7ff ff3d 	bl	800060c <glcd_set_contrast>
	glcd_command(0xaf); /* Display on */
 8000792:	20af      	movs	r0, #175	; 0xaf
 8000794:	f7ff ff0e 	bl	80005b4 <glcd_command>
	glcd_set_contrast(20); /* Set contrast, value experimentally determined, value 0 to 63 */
	glcd_command(0xaf); /* Display on */

#endif

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}

0800079c <glcd_init>:
void delay_ms(uint32_t ms);

//#define BACKLIGHT_INVERT	// Uncomment if LED backlight turn on with low value

void glcd_init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
//	/* RST pin */
//	GPIO_InitStructure.GPIO_Pin = CONTROLLER_SPI_RST_PIN;
//	GPIO_Init(CONTROLLER_SPI_RST_PORT, &GPIO_InitStructure);

	/* Make sure chip is de-selected by default */
	GLCD_DESELECT();
 80007a0:	2201      	movs	r2, #1
 80007a2:	2180      	movs	r1, #128	; 0x80
 80007a4:	4807      	ldr	r0, [pc, #28]	; (80007c4 <glcd_init+0x28>)
 80007a6:	f001 ff9d 	bl	80026e4 <HAL_GPIO_WritePin>
//	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
//	SPI_Init(SPIx, &SPI_InitStructure);
//	/* Enable the SPI peripheral */
//	SPI_Cmd(SPIx, ENABLE);

	glcd_select_screen((uint8_t *)&glcd_buffer,&glcd_bbox);
 80007aa:	4907      	ldr	r1, [pc, #28]	; (80007c8 <glcd_init+0x2c>)
 80007ac:	4807      	ldr	r0, [pc, #28]	; (80007cc <glcd_init+0x30>)
 80007ae:	f000 f8ff 	bl	80009b0 <glcd_select_screen>

	glcd_PCD8544_init();
	glcd_clear();

#elif defined(GLCD_CONTROLLER_ST7565R)
	glcd_reset();
 80007b2:	f000 f837 	bl	8000824 <glcd_reset>
	glcd_enable_backlight(ENABLE);
 80007b6:	2001      	movs	r0, #1
 80007b8:	f000 f80a 	bl	80007d0 <glcd_enable_backlight>
	glcd_ST7565R_init();
 80007bc:	f7ff ffd2 	bl	8000764 <glcd_ST7565R_init>

#else
	#error "Controller not supported by STM32F0xx"
#endif

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40020400 	.word	0x40020400
 80007c8:	20000490 	.word	0x20000490
 80007cc:	20000090 	.word	0x20000090

080007d0 <glcd_enable_backlight>:

/* Change backlight led state ENABLE or DISABLE*/
void glcd_enable_backlight(FunctionalState state)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
	#else
		//GPIO_ResetBits(LCD_LED_PORT,LCD_LED_PIN); TODO
	#endif
	}
#endif
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
	...

080007e8 <glcd_spi_write>:
	LCD_TIM_SetCompare(LCD_TIM,value);
}
#endif

void glcd_spi_write(uint8_t c)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
	//uint8_t temp;

	GLCD_SELECT();
 80007f2:	2200      	movs	r2, #0
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	4809      	ldr	r0, [pc, #36]	; (800081c <glcd_spi_write+0x34>)
 80007f8:	f001 ff74 	bl	80026e4 <HAL_GPIO_WritePin>
	/*!< Loop while DR register in not emplty */
	//OLD while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET);

	//OLD SPI_I2S_SendData(SPIx, (uint16_t) c);
	HAL_SPI_Transmit(&hspi3, &c, 1, MAX_SPI_TRANSMIT_TIMEOUT);
 80007fc:	1df9      	adds	r1, r7, #7
 80007fe:	2332      	movs	r3, #50	; 0x32
 8000800:	2201      	movs	r2, #1
 8000802:	4807      	ldr	r0, [pc, #28]	; (8000820 <glcd_spi_write+0x38>)
 8000804:	f002 fe2b 	bl	800345e <HAL_SPI_Transmit>
	/* Wait until entire byte has been read (which we discard anyway) */
	//OLD while(SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_BSY) != RESET);

	//temp = SPI_I2S_ReceiveData(SPIx);

	GLCD_DESELECT();
 8000808:	2201      	movs	r2, #1
 800080a:	2180      	movs	r1, #128	; 0x80
 800080c:	4803      	ldr	r0, [pc, #12]	; (800081c <glcd_spi_write+0x34>)
 800080e:	f001 ff69 	bl	80026e4 <HAL_GPIO_WritePin>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40020400 	.word	0x40020400
 8000820:	2000049c 	.word	0x2000049c

08000824 <glcd_reset>:

void glcd_reset(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	/* Toggle RST low to reset. Minimum pulse 100ns on datasheet. */
	GLCD_SELECT();
 8000828:	2200      	movs	r2, #0
 800082a:	2180      	movs	r1, #128	; 0x80
 800082c:	480c      	ldr	r0, [pc, #48]	; (8000860 <glcd_reset+0x3c>)
 800082e:	f001 ff59 	bl	80026e4 <HAL_GPIO_WritePin>
	GLCD_RESET_LOW();
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000838:	480a      	ldr	r0, [pc, #40]	; (8000864 <glcd_reset+0x40>)
 800083a:	f001 ff53 	bl	80026e4 <HAL_GPIO_WritePin>


	delay_ms(GLCD_RESET_TIME);
 800083e:	2001      	movs	r0, #1
 8000840:	f000 f812 	bl	8000868 <delay_ms>
	//DelayTask(GLCD_RESET_TIME);
	GLCD_RESET_HIGH();
 8000844:	2201      	movs	r2, #1
 8000846:	f44f 7100 	mov.w	r1, #512	; 0x200
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <glcd_reset+0x40>)
 800084c:	f001 ff4a 	bl	80026e4 <HAL_GPIO_WritePin>
	GLCD_DESELECT();
 8000850:	2201      	movs	r2, #1
 8000852:	2180      	movs	r1, #128	; 0x80
 8000854:	4802      	ldr	r0, [pc, #8]	; (8000860 <glcd_reset+0x3c>)
 8000856:	f001 ff45 	bl	80026e4 <HAL_GPIO_WritePin>
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40020400 	.word	0x40020400
 8000864:	40020800 	.word	0x40020800

08000868 <delay_ms>:

void delay_ms(uint32_t ms){
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
		}
		while (count < utime);
		ms_counter++;
	}while(ms_counter < ms);
#else
	GLCD_RTOS_DELAY_FCN // Call the delay function defined in the header file.
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f003 fefd 	bl	8004670 <osDelay>
#endif
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <glcd_update_bbox>:
glcd_BoundingBox_t *glcd_bbox_selected;

/** @} */

void glcd_update_bbox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax)
{
 8000880:	b490      	push	{r4, r7}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	4604      	mov	r4, r0
 8000888:	4608      	mov	r0, r1
 800088a:	4611      	mov	r1, r2
 800088c:	461a      	mov	r2, r3
 800088e:	4623      	mov	r3, r4
 8000890:	71fb      	strb	r3, [r7, #7]
 8000892:	4603      	mov	r3, r0
 8000894:	71bb      	strb	r3, [r7, #6]
 8000896:	460b      	mov	r3, r1
 8000898:	717b      	strb	r3, [r7, #5]
 800089a:	4613      	mov	r3, r2
 800089c:	713b      	strb	r3, [r7, #4]
	/* Keep and check bounding box within limits of LCD screen dimensions */
	if (xmin > (GLCD_LCD_WIDTH-1)) {
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	da01      	bge.n	80008aa <glcd_update_bbox+0x2a>
		xmin = GLCD_LCD_WIDTH-1;
 80008a6:	237f      	movs	r3, #127	; 0x7f
 80008a8:	71fb      	strb	r3, [r7, #7]
	}
	if (xmax > (GLCD_LCD_WIDTH-1)) {
 80008aa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	da01      	bge.n	80008b6 <glcd_update_bbox+0x36>
		xmax = GLCD_LCD_WIDTH-1;
 80008b2:	237f      	movs	r3, #127	; 0x7f
 80008b4:	717b      	strb	r3, [r7, #5]
	}

	if (ymin > (GLCD_LCD_HEIGHT-1)) {
 80008b6:	79bb      	ldrb	r3, [r7, #6]
 80008b8:	2b3f      	cmp	r3, #63	; 0x3f
 80008ba:	d901      	bls.n	80008c0 <glcd_update_bbox+0x40>
		ymin = GLCD_LCD_HEIGHT-1;
 80008bc:	233f      	movs	r3, #63	; 0x3f
 80008be:	71bb      	strb	r3, [r7, #6]
	}
	if (ymax > (GLCD_LCD_HEIGHT-1)) {
 80008c0:	793b      	ldrb	r3, [r7, #4]
 80008c2:	2b3f      	cmp	r3, #63	; 0x3f
 80008c4:	d901      	bls.n	80008ca <glcd_update_bbox+0x4a>
		ymax = GLCD_LCD_HEIGHT-1;
 80008c6:	233f      	movs	r3, #63	; 0x3f
 80008c8:	713b      	strb	r3, [r7, #4]
	}

	/* Update the bounding box size */
	if (xmin < glcd_bbox_selected->x_min) {
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <glcd_update_bbox+0xa4>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	79fa      	ldrb	r2, [r7, #7]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d203      	bcs.n	80008de <glcd_update_bbox+0x5e>
		glcd_bbox_selected->x_min = xmin;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <glcd_update_bbox+0xa4>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	79fa      	ldrb	r2, [r7, #7]
 80008dc:	701a      	strb	r2, [r3, #0]
	}		
	if (xmax > glcd_bbox_selected->x_max) {
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <glcd_update_bbox+0xa4>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	789b      	ldrb	r3, [r3, #2]
 80008e4:	797a      	ldrb	r2, [r7, #5]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d903      	bls.n	80008f2 <glcd_update_bbox+0x72>
		glcd_bbox_selected->x_max = xmax;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <glcd_update_bbox+0xa4>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	797a      	ldrb	r2, [r7, #5]
 80008f0:	709a      	strb	r2, [r3, #2]
	}
	if (ymin < glcd_bbox_selected->y_min) {
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <glcd_update_bbox+0xa4>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	785b      	ldrb	r3, [r3, #1]
 80008f8:	79ba      	ldrb	r2, [r7, #6]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d203      	bcs.n	8000906 <glcd_update_bbox+0x86>
		glcd_bbox_selected->y_min = ymin;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <glcd_update_bbox+0xa4>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	79ba      	ldrb	r2, [r7, #6]
 8000904:	705a      	strb	r2, [r3, #1]
	}		
	if (ymax > glcd_bbox_selected->y_max) {
 8000906:	4b07      	ldr	r3, [pc, #28]	; (8000924 <glcd_update_bbox+0xa4>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	78db      	ldrb	r3, [r3, #3]
 800090c:	793a      	ldrb	r2, [r7, #4]
 800090e:	429a      	cmp	r2, r3
 8000910:	d903      	bls.n	800091a <glcd_update_bbox+0x9a>
		glcd_bbox_selected->y_max = ymax;
 8000912:	4b04      	ldr	r3, [pc, #16]	; (8000924 <glcd_update_bbox+0xa4>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	793a      	ldrb	r2, [r7, #4]
 8000918:	70da      	strb	r2, [r3, #3]
	}			
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bc90      	pop	{r4, r7}
 8000922:	4770      	bx	lr
 8000924:	20000498 	.word	0x20000498

08000928 <glcd_reset_bbox>:

void glcd_reset_bbox()
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
	/* Used after physically writing to the LCD */
	glcd_bbox_selected->x_min = GLCD_LCD_WIDTH - 1;
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <glcd_reset_bbox+0x30>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	227f      	movs	r2, #127	; 0x7f
 8000932:	701a      	strb	r2, [r3, #0]
	glcd_bbox_selected->x_max = 0;
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <glcd_reset_bbox+0x30>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2200      	movs	r2, #0
 800093a:	709a      	strb	r2, [r3, #2]
	glcd_bbox_selected->y_min = GLCD_LCD_HEIGHT -1;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <glcd_reset_bbox+0x30>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	223f      	movs	r2, #63	; 0x3f
 8000942:	705a      	strb	r2, [r3, #1]
	glcd_bbox_selected->y_max = 0;	
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <glcd_reset_bbox+0x30>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	70da      	strb	r2, [r3, #3]
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	20000498 	.word	0x20000498

0800095c <glcd_clear>:
	glcd_bbox_selected->x_max = GLCD_LCD_WIDTH - 1;
	glcd_bbox_selected->y_min = 0;
	glcd_bbox_selected->y_max = GLCD_LCD_HEIGHT -1;		
}

void glcd_clear(void) {
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <glcd_clear+0x28>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f006 fc4f 	bl	800720e <memset>
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
 8000970:	233f      	movs	r3, #63	; 0x3f
 8000972:	227f      	movs	r2, #127	; 0x7f
 8000974:	2100      	movs	r1, #0
 8000976:	2000      	movs	r0, #0
 8000978:	f7ff ff82 	bl	8000880 <glcd_update_bbox>
	glcd_write();
 800097c:	f7ff fea4 	bl	80006c8 <glcd_write>
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000494 	.word	0x20000494

08000988 <glcd_clear_buffer>:

void glcd_clear_buffer(void) {
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <glcd_clear_buffer+0x24>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f006 fc39 	bl	800720e <memset>
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
 800099c:	233f      	movs	r3, #63	; 0x3f
 800099e:	227f      	movs	r2, #127	; 0x7f
 80009a0:	2100      	movs	r1, #0
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff ff6c 	bl	8000880 <glcd_update_bbox>
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000494 	.word	0x20000494

080009b0 <glcd_select_screen>:

void glcd_select_screen(uint8_t *buffer, glcd_BoundingBox_t *bbox)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
	glcd_buffer_selected = buffer;
 80009ba:	4a06      	ldr	r2, [pc, #24]	; (80009d4 <glcd_select_screen+0x24>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6013      	str	r3, [r2, #0]
	glcd_bbox_selected = bbox;
 80009c0:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <glcd_select_screen+0x28>)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	6013      	str	r3, [r2, #0]
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	20000494 	.word	0x20000494
 80009d8:	20000498 	.word	0x20000498

080009dc <glcd_set_pixel>:
#include <stdlib.h>
#include <string.h>
#include "glcd.h"

/* Based on PCD8544 library by Limor Fried */
void glcd_set_pixel(uint8_t x, uint8_t y, uint8_t color) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
 80009e6:	460b      	mov	r3, r1
 80009e8:	71bb      	strb	r3, [r7, #6]
 80009ea:	4613      	mov	r3, r2
 80009ec:	717b      	strb	r3, [r7, #5]
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
 80009ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	db4d      	blt.n	8000a92 <glcd_set_pixel+0xb6>
 80009f6:	79bb      	ldrb	r3, [r7, #6]
 80009f8:	2b3f      	cmp	r3, #63	; 0x3f
 80009fa:	d84a      	bhi.n	8000a92 <glcd_set_pixel+0xb6>
		/* don't do anything if x/y is outside bounds of display size */
		return;
	}

	y = (y+16)%GLCD_LCD_HEIGHT;	// bandage sol for y=0 not starting at top
 80009fc:	79bb      	ldrb	r3, [r7, #6]
 80009fe:	3310      	adds	r3, #16
 8000a00:	425a      	negs	r2, r3
 8000a02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a06:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a0a:	bf58      	it	pl
 8000a0c:	4253      	negpl	r3, r2
 8000a0e:	71bb      	strb	r3, [r7, #6]


	if (color) {
 8000a10:	797b      	ldrb	r3, [r7, #5]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d01a      	beq.n	8000a4c <glcd_set_pixel+0x70>
		/* Set black */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
 8000a16:	79fa      	ldrb	r2, [r7, #7]
 8000a18:	79bb      	ldrb	r3, [r7, #6]
 8000a1a:	08db      	lsrs	r3, r3, #3
 8000a1c:	b2d8      	uxtb	r0, r3
 8000a1e:	4603      	mov	r3, r0
 8000a20:	01db      	lsls	r3, r3, #7
 8000a22:	4413      	add	r3, r2
 8000a24:	4a1d      	ldr	r2, [pc, #116]	; (8000a9c <glcd_set_pixel+0xc0>)
 8000a26:	5cd3      	ldrb	r3, [r2, r3]
 8000a28:	b25a      	sxtb	r2, r3
 8000a2a:	79bb      	ldrb	r3, [r7, #6]
 8000a2c:	f003 0307 	and.w	r3, r3, #7
 8000a30:	2101      	movs	r1, #1
 8000a32:	fa01 f303 	lsl.w	r3, r1, r3
 8000a36:	b25b      	sxtb	r3, r3
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	b259      	sxtb	r1, r3
 8000a3c:	79fa      	ldrb	r2, [r7, #7]
 8000a3e:	4603      	mov	r3, r0
 8000a40:	01db      	lsls	r3, r3, #7
 8000a42:	4413      	add	r3, r2
 8000a44:	b2c9      	uxtb	r1, r1
 8000a46:	4a15      	ldr	r2, [pc, #84]	; (8000a9c <glcd_set_pixel+0xc0>)
 8000a48:	54d1      	strb	r1, [r2, r3]
 8000a4a:	e01b      	b.n	8000a84 <glcd_set_pixel+0xa8>
	} else {
		/* Set white */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
 8000a4c:	79fa      	ldrb	r2, [r7, #7]
 8000a4e:	79bb      	ldrb	r3, [r7, #6]
 8000a50:	08db      	lsrs	r3, r3, #3
 8000a52:	b2d8      	uxtb	r0, r3
 8000a54:	4603      	mov	r3, r0
 8000a56:	01db      	lsls	r3, r3, #7
 8000a58:	4413      	add	r3, r2
 8000a5a:	4a10      	ldr	r2, [pc, #64]	; (8000a9c <glcd_set_pixel+0xc0>)
 8000a5c:	5cd3      	ldrb	r3, [r2, r3]
 8000a5e:	b25a      	sxtb	r2, r3
 8000a60:	79bb      	ldrb	r3, [r7, #6]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	2101      	movs	r1, #1
 8000a68:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6c:	b25b      	sxtb	r3, r3
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	b25b      	sxtb	r3, r3
 8000a72:	4013      	ands	r3, r2
 8000a74:	b259      	sxtb	r1, r3
 8000a76:	79fa      	ldrb	r2, [r7, #7]
 8000a78:	4603      	mov	r3, r0
 8000a7a:	01db      	lsls	r3, r3, #7
 8000a7c:	4413      	add	r3, r2
 8000a7e:	b2c9      	uxtb	r1, r1
 8000a80:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <glcd_set_pixel+0xc0>)
 8000a82:	54d1      	strb	r1, [r2, r3]
	}

	glcd_update_bbox(x,y,x,y);
 8000a84:	79bb      	ldrb	r3, [r7, #6]
 8000a86:	79fa      	ldrb	r2, [r7, #7]
 8000a88:	79b9      	ldrb	r1, [r7, #6]
 8000a8a:	79f8      	ldrb	r0, [r7, #7]
 8000a8c:	f7ff fef8 	bl	8000880 <glcd_update_bbox>
 8000a90:	e000      	b.n	8000a94 <glcd_set_pixel+0xb8>
		return;
 8000a92:	bf00      	nop
}
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000090 	.word	0x20000090

08000aa0 <glcd_draw_line>:
	glcd_update_bbox(x,y,x,y);
	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
}

/* Bresenham's algorithm - based on PCD8544 library Limor Fried */
void glcd_draw_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b087      	sub	sp, #28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4604      	mov	r4, r0
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	4611      	mov	r1, r2
 8000aac:	461a      	mov	r2, r3
 8000aae:	4623      	mov	r3, r4
 8000ab0:	71fb      	strb	r3, [r7, #7]
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71bb      	strb	r3, [r7, #6]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	717b      	strb	r3, [r7, #5]
 8000aba:	4613      	mov	r3, r2
 8000abc:	713b      	strb	r3, [r7, #4]
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000abe:	793a      	ldrb	r2, [r7, #4]
 8000ac0:	79bb      	ldrb	r3, [r7, #6]
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000ac8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000acc:	7979      	ldrb	r1, [r7, #5]
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	1acb      	subs	r3, r1, r3
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	bfb8      	it	lt
 8000ad6:	425b      	neglt	r3, r3
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	bfcc      	ite	gt
 8000adc:	2301      	movgt	r3, #1
 8000ade:	2300      	movle	r3, #0
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	757b      	strb	r3, [r7, #21]
	uint8_t dx, dy;
	int8_t err;
	int8_t ystep;
	
	if (steep) {
 8000ae4:	7d7b      	ldrb	r3, [r7, #21]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d00b      	beq.n	8000b02 <glcd_draw_line+0x62>
		swap(x0, y0);
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	753b      	strb	r3, [r7, #20]
 8000aee:	79bb      	ldrb	r3, [r7, #6]
 8000af0:	71fb      	strb	r3, [r7, #7]
 8000af2:	7d3b      	ldrb	r3, [r7, #20]
 8000af4:	71bb      	strb	r3, [r7, #6]
		swap(x1, y1);
 8000af6:	797b      	ldrb	r3, [r7, #5]
 8000af8:	74fb      	strb	r3, [r7, #19]
 8000afa:	793b      	ldrb	r3, [r7, #4]
 8000afc:	717b      	strb	r3, [r7, #5]
 8000afe:	7cfb      	ldrb	r3, [r7, #19]
 8000b00:	713b      	strb	r3, [r7, #4]
	}
	
	if (x0 > x1) {
 8000b02:	79fa      	ldrb	r2, [r7, #7]
 8000b04:	797b      	ldrb	r3, [r7, #5]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d90b      	bls.n	8000b22 <glcd_draw_line+0x82>
		swap(x0, x1);
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	74bb      	strb	r3, [r7, #18]
 8000b0e:	797b      	ldrb	r3, [r7, #5]
 8000b10:	71fb      	strb	r3, [r7, #7]
 8000b12:	7cbb      	ldrb	r3, [r7, #18]
 8000b14:	717b      	strb	r3, [r7, #5]
		swap(y0, y1);
 8000b16:	79bb      	ldrb	r3, [r7, #6]
 8000b18:	747b      	strb	r3, [r7, #17]
 8000b1a:	793b      	ldrb	r3, [r7, #4]
 8000b1c:	71bb      	strb	r3, [r7, #6]
 8000b1e:	7c7b      	ldrb	r3, [r7, #17]
 8000b20:	713b      	strb	r3, [r7, #4]
	}
	
	glcd_update_bbox( x0, y0, x1, y1 );
 8000b22:	793b      	ldrb	r3, [r7, #4]
 8000b24:	797a      	ldrb	r2, [r7, #5]
 8000b26:	79b9      	ldrb	r1, [r7, #6]
 8000b28:	79f8      	ldrb	r0, [r7, #7]
 8000b2a:	f7ff fea9 	bl	8000880 <glcd_update_bbox>

	dx = x1 - x0;
 8000b2e:	797a      	ldrb	r2, [r7, #5]
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	1ad3      	subs	r3, r2, r3
 8000b34:	743b      	strb	r3, [r7, #16]
	dy = abs(y1 - y0);
 8000b36:	793a      	ldrb	r2, [r7, #4]
 8000b38:	79bb      	ldrb	r3, [r7, #6]
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	bfb8      	it	lt
 8000b40:	425b      	neglt	r3, r3
 8000b42:	73fb      	strb	r3, [r7, #15]
	
	err = dx / 2;
 8000b44:	7c3b      	ldrb	r3, [r7, #16]
 8000b46:	085b      	lsrs	r3, r3, #1
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	75fb      	strb	r3, [r7, #23]
	
	if (y0 < y1) {
 8000b4c:	79ba      	ldrb	r2, [r7, #6]
 8000b4e:	793b      	ldrb	r3, [r7, #4]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d202      	bcs.n	8000b5a <glcd_draw_line+0xba>
		ystep = 1;
 8000b54:	2301      	movs	r3, #1
 8000b56:	75bb      	strb	r3, [r7, #22]
 8000b58:	e029      	b.n	8000bae <glcd_draw_line+0x10e>
	} else {
		ystep = -1;
 8000b5a:	23ff      	movs	r3, #255	; 0xff
 8000b5c:	75bb      	strb	r3, [r7, #22]
	}
	
	for (; x0<=x1; x0++) {
 8000b5e:	e026      	b.n	8000bae <glcd_draw_line+0x10e>
		if (steep) {
 8000b60:	7d7b      	ldrb	r3, [r7, #21]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d007      	beq.n	8000b76 <glcd_draw_line+0xd6>
			glcd_set_pixel(y0, x0, color);
 8000b66:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000b6a:	79f9      	ldrb	r1, [r7, #7]
 8000b6c:	79bb      	ldrb	r3, [r7, #6]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ff34 	bl	80009dc <glcd_set_pixel>
 8000b74:	e006      	b.n	8000b84 <glcd_draw_line+0xe4>
		} else {
			glcd_set_pixel(x0, y0, color);
 8000b76:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000b7a:	79b9      	ldrb	r1, [r7, #6]
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ff2c 	bl	80009dc <glcd_set_pixel>
		}
		err -= dy;
 8000b84:	7dfa      	ldrb	r2, [r7, #23]
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	75fb      	strb	r3, [r7, #23]
		if (err < 0) {
 8000b8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	da08      	bge.n	8000ba8 <glcd_draw_line+0x108>
			y0 += ystep;
 8000b96:	7dba      	ldrb	r2, [r7, #22]
 8000b98:	79bb      	ldrb	r3, [r7, #6]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	71bb      	strb	r3, [r7, #6]
			err += dx;
 8000b9e:	7dfa      	ldrb	r2, [r7, #23]
 8000ba0:	7c3b      	ldrb	r3, [r7, #16]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	75fb      	strb	r3, [r7, #23]
	for (; x0<=x1; x0++) {
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	3301      	adds	r3, #1
 8000bac:	71fb      	strb	r3, [r7, #7]
 8000bae:	79fa      	ldrb	r2, [r7, #7]
 8000bb0:	797b      	ldrb	r3, [r7, #5]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d9d4      	bls.n	8000b60 <glcd_draw_line+0xc0>
		}
	}
}
 8000bb6:	bf00      	nop
 8000bb8:	bf00      	nop
 8000bba:	371c      	adds	r7, #28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd90      	pop	{r4, r7, pc}

08000bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc4:	f001 fad6 	bl	8002174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc8:	f000 f81c 	bl	8000c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bcc:	f000 f91e 	bl	8000e0c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bd0:	f000 f8f2 	bl	8000db8 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8000bd4:	f000 f8ba 	bl	8000d4c <MX_TIM7_Init>
  MX_SPI3_Init();
 8000bd8:	f000 f882 	bl	8000ce0 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bdc:	f003 fc6c 	bl	80044b8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(startDefaultTask, NULL, &defaultTask_attributes);
 8000be0:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <main+0x38>)
 8000be2:	2100      	movs	r1, #0
 8000be4:	4805      	ldr	r0, [pc, #20]	; (8000bfc <main+0x3c>)
 8000be6:	f003 fcb1 	bl	800454c <osThreadNew>
 8000bea:	4603      	mov	r3, r0
 8000bec:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <main+0x40>)
 8000bee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000bf0:	f003 fc86 	bl	8004500 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <main+0x34>
 8000bf6:	bf00      	nop
 8000bf8:	08008de4 	.word	0x08008de4
 8000bfc:	0800151d 	.word	0x0800151d
 8000c00:	20000580 	.word	0x20000580

08000c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b094      	sub	sp, #80	; 0x50
 8000c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	2234      	movs	r2, #52	; 0x34
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f006 fafb 	bl	800720e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c18:	f107 0308 	add.w	r3, r7, #8
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <SystemClock_Config+0xd4>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	4a29      	ldr	r2, [pc, #164]	; (8000cd8 <SystemClock_Config+0xd4>)
 8000c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c36:	6413      	str	r3, [r2, #64]	; 0x40
 8000c38:	4b27      	ldr	r3, [pc, #156]	; (8000cd8 <SystemClock_Config+0xd4>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c44:	2300      	movs	r3, #0
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <SystemClock_Config+0xd8>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c50:	4a22      	ldr	r2, [pc, #136]	; (8000cdc <SystemClock_Config+0xd8>)
 8000c52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <SystemClock_Config+0xd8>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c6c:	2310      	movs	r3, #16
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c70:	2302      	movs	r3, #2
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c74:	2300      	movs	r3, #0
 8000c76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c78:	2310      	movs	r3, #16
 8000c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c7c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c80:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c82:	2304      	movs	r3, #4
 8000c84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c86:	2302      	movs	r3, #2
 8000c88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 f8bc 	bl	8002e10 <HAL_RCC_OscConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c9e:	f000 fd15 	bl	80016cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca2:	230f      	movs	r3, #15
 8000ca4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f001 fd2a 	bl	8002718 <HAL_RCC_ClockConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000cca:	f000 fcff 	bl	80016cc <Error_Handler>
  }
}
 8000cce:	bf00      	nop
 8000cd0:	3750      	adds	r7, #80	; 0x50
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40007000 	.word	0x40007000

08000ce0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ce4:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <MX_SPI3_Init+0x64>)
 8000ce6:	4a18      	ldr	r2, [pc, #96]	; (8000d48 <MX_SPI3_Init+0x68>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cea:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <MX_SPI3_Init+0x64>)
 8000cec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cf0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <MX_SPI3_Init+0x64>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <MX_SPI3_Init+0x64>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_SPI3_Init+0x64>)
 8000d00:	2202      	movs	r2, #2
 8000d02:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <MX_SPI3_Init+0x64>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_SPI3_Init+0x64>)
 8000d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d10:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_SPI3_Init+0x64>)
 8000d14:	2238      	movs	r2, #56	; 0x38
 8000d16:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <MX_SPI3_Init+0x64>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_SPI3_Init+0x64>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <MX_SPI3_Init+0x64>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_SPI3_Init+0x64>)
 8000d2c:	220a      	movs	r2, #10
 8000d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <MX_SPI3_Init+0x64>)
 8000d32:	f002 fb0b 	bl	800334c <HAL_SPI_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000d3c:	f000 fcc6 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	2000049c 	.word	0x2000049c
 8000d48:	40003c00 	.word	0x40003c00

08000d4c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d52:	463b      	mov	r3, r7
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <MX_TIM7_Init+0x64>)
 8000d5c:	4a15      	ldr	r2, [pc, #84]	; (8000db4 <MX_TIM7_Init+0x68>)
 8000d5e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <MX_TIM7_Init+0x64>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <MX_TIM7_Init+0x64>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <MX_TIM7_Init+0x64>)
 8000d6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d72:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_TIM7_Init+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d7a:	480d      	ldr	r0, [pc, #52]	; (8000db0 <MX_TIM7_Init+0x64>)
 8000d7c:	f002 fd76 	bl	800386c <HAL_TIM_Base_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000d86:	f000 fca1 	bl	80016cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d92:	463b      	mov	r3, r7
 8000d94:	4619      	mov	r1, r3
 8000d96:	4806      	ldr	r0, [pc, #24]	; (8000db0 <MX_TIM7_Init+0x64>)
 8000d98:	f002 fff8 	bl	8003d8c <HAL_TIMEx_MasterConfigSynchronization>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000da2:	f000 fc93 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200004f4 	.word	0x200004f4
 8000db4:	40001400 	.word	0x40001400

08000db8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <MX_USART2_UART_Init+0x50>)
 8000dc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dde:	220c      	movs	r2, #12
 8000de0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dee:	4805      	ldr	r0, [pc, #20]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000df0:	f003 f85c 	bl	8003eac <HAL_UART_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dfa:	f000 fc67 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	2000053c 	.word	0x2000053c
 8000e08:	40004400 	.word	0x40004400

08000e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b42      	ldr	r3, [pc, #264]	; (8000f30 <MX_GPIO_Init+0x124>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a41      	ldr	r2, [pc, #260]	; (8000f30 <MX_GPIO_Init+0x124>)
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b3f      	ldr	r3, [pc, #252]	; (8000f30 <MX_GPIO_Init+0x124>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b3b      	ldr	r3, [pc, #236]	; (8000f30 <MX_GPIO_Init+0x124>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a3a      	ldr	r2, [pc, #232]	; (8000f30 <MX_GPIO_Init+0x124>)
 8000e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b38      	ldr	r3, [pc, #224]	; (8000f30 <MX_GPIO_Init+0x124>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	4b34      	ldr	r3, [pc, #208]	; (8000f30 <MX_GPIO_Init+0x124>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a33      	ldr	r2, [pc, #204]	; (8000f30 <MX_GPIO_Init+0x124>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b31      	ldr	r3, [pc, #196]	; (8000f30 <MX_GPIO_Init+0x124>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	4b2d      	ldr	r3, [pc, #180]	; (8000f30 <MX_GPIO_Init+0x124>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a2c      	ldr	r2, [pc, #176]	; (8000f30 <MX_GPIO_Init+0x124>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b2a      	ldr	r3, [pc, #168]	; (8000f30 <MX_GPIO_Init+0x124>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS1_Pin|CS2_Pin|GPIO_PIN_6|GPIO_PIN_8
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 7153 	mov.w	r1, #844	; 0x34c
 8000e98:	4826      	ldr	r0, [pc, #152]	; (8000f34 <MX_GPIO_Init+0x128>)
 8000e9a:	f001 fc23 	bl	80026e4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2120      	movs	r1, #32
 8000ea2:	4825      	ldr	r0, [pc, #148]	; (8000f38 <MX_GPIO_Init+0x12c>)
 8000ea4:	f001 fc1e 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000eae:	4823      	ldr	r0, [pc, #140]	; (8000f3c <MX_GPIO_Init+0x130>)
 8000eb0:	f001 fc18 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000eb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	481a      	ldr	r0, [pc, #104]	; (8000f34 <MX_GPIO_Init+0x128>)
 8000ecc:	f001 fa76 	bl	80023bc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS1_Pin CS2_Pin PC6 PC8
                           PC9 */
  GPIO_InitStruct.Pin = CS1_Pin|CS2_Pin|GPIO_PIN_6|GPIO_PIN_8
 8000ed0:	f44f 7353 	mov.w	r3, #844	; 0x34c
 8000ed4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4812      	ldr	r0, [pc, #72]	; (8000f34 <MX_GPIO_Init+0x128>)
 8000eea:	f001 fa67 	bl	80023bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000eee:	2320      	movs	r3, #32
 8000ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4619      	mov	r1, r3
 8000f04:	480c      	ldr	r0, [pc, #48]	; (8000f38 <MX_GPIO_Init+0x12c>)
 8000f06:	f001 fa59 	bl	80023bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000f0a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f10:	2301      	movs	r3, #1
 8000f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	4806      	ldr	r0, [pc, #24]	; (8000f3c <MX_GPIO_Init+0x130>)
 8000f24:	f001 fa4a 	bl	80023bc <HAL_GPIO_Init>

}
 8000f28:	bf00      	nop
 8000f2a:	3728      	adds	r7, #40	; 0x28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020800 	.word	0x40020800
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	40020400 	.word	0x40020400

08000f40 <correct_Y>:

uint8_t correct_Y(uint8_t y){
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
	return ((y+48)%64);
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	3330      	adds	r3, #48	; 0x30
 8000f4e:	425a      	negs	r2, r3
 8000f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f54:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f58:	bf58      	it	pl
 8000f5a:	4253      	negpl	r3, r2
 8000f5c:	b2db      	uxtb	r3, r3
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <drawP1>:

/* USER CODE BEGIN 4 */
// draw p1 labels
void drawP1(){
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b08d      	sub	sp, #52	; 0x34
 8000f70:	af02      	add	r7, sp, #8
	char* labelsP1[] = {"Solar:", "Motor:", "Battery:"};
 8000f72:	4a49      	ldr	r2, [pc, #292]	; (8001098 <drawP1+0x12c>)
 8000f74:	463b      	mov	r3, r7
 8000f76:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f78:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int labelsP1L = 3;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	617b      	str	r3, [r7, #20]
	char* labelspeed = "km/h";
 8000f80:	4b46      	ldr	r3, [pc, #280]	; (800109c <drawP1+0x130>)
 8000f82:	613b      	str	r3, [r7, #16]

	glcd_tiny_set_font(Font5x7,5,7,32,127);
 8000f84:	237f      	movs	r3, #127	; 0x7f
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2320      	movs	r3, #32
 8000f8a:	2207      	movs	r2, #7
 8000f8c:	2105      	movs	r1, #5
 8000f8e:	4844      	ldr	r0, [pc, #272]	; (80010a0 <drawP1+0x134>)
 8000f90:	f001 f826 	bl	8001fe0 <glcd_tiny_set_font>
	glcd_clear_buffer();
 8000f94:	f7ff fcf8 	bl	8000988 <glcd_clear_buffer>

	// start drawing at y = 5
	uint8_t y = 5;
 8000f98:	2305      	movs	r3, #5
 8000f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// draw the labels
	for(int i = 0; i < labelsP1L; i++){
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
 8000fa2:	e03b      	b.n	800101c <drawP1+0xb0>
		char* label = labelsP1[i];
 8000fa4:	6a3b      	ldr	r3, [r7, #32]
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	3328      	adds	r3, #40	; 0x28
 8000faa:	443b      	add	r3, r7
 8000fac:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000fb0:	60fb      	str	r3, [r7, #12]
		int j = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
		// char by char cuz draw xy only with char
		while(label[j] != 0){
 8000fb6:	e018      	b.n	8000fea <drawP1+0x7e>
			glcd_tiny_draw_char_xy(j*6, correct_Y(y), label[j]);
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	0052      	lsls	r2, r2, #1
 8000fc0:	4413      	add	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	b2dc      	uxtb	r4, r3
 8000fc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ffb8 	bl	8000f40 <correct_Y>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	4413      	add	r3, r2
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4620      	mov	r0, r4
 8000fe0:	f001 f826 	bl	8002030 <glcd_tiny_draw_char_xy>
			j++;
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	61fb      	str	r3, [r7, #28]
		while(label[j] != 0){
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	4413      	add	r3, r2
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1e0      	bne.n	8000fb8 <drawP1+0x4c>
		}
		glcd_tiny_draw_char_xy(72, correct_Y(y), 'w');
 8000ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ffa0 	bl	8000f40 <correct_Y>
 8001000:	4603      	mov	r3, r0
 8001002:	2277      	movs	r2, #119	; 0x77
 8001004:	4619      	mov	r1, r3
 8001006:	2048      	movs	r0, #72	; 0x48
 8001008:	f001 f812 	bl	8002030 <glcd_tiny_draw_char_xy>
		// go next rows, these value are just what I think will look good
		y+=23;
 800100c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001010:	3317      	adds	r3, #23
 8001012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(int i = 0; i < labelsP1L; i++){
 8001016:	6a3b      	ldr	r3, [r7, #32]
 8001018:	3301      	adds	r3, #1
 800101a:	623b      	str	r3, [r7, #32]
 800101c:	6a3a      	ldr	r2, [r7, #32]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	429a      	cmp	r2, r3
 8001022:	dbbf      	blt.n	8000fa4 <drawP1+0x38>
	}

	// draw divider line
	glcd_draw_line(81, 0,  81, 63, BLACK);
 8001024:	2301      	movs	r3, #1
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	233f      	movs	r3, #63	; 0x3f
 800102a:	2251      	movs	r2, #81	; 0x51
 800102c:	2100      	movs	r1, #0
 800102e:	2051      	movs	r0, #81	; 0x51
 8001030:	f7ff fd36 	bl	8000aa0 <glcd_draw_line>
	int x = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
	// draw km/h
	while(labelspeed[x] != 0){
 8001038:	e018      	b.n	800106c <drawP1+0x100>
		glcd_tiny_draw_char_xy(94+(x*6), correct_Y(52), labelspeed[x]);
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	461a      	mov	r2, r3
 8001040:	0052      	lsls	r2, r2, #1
 8001042:	4413      	add	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	b2db      	uxtb	r3, r3
 8001048:	335e      	adds	r3, #94	; 0x5e
 800104a:	b2dc      	uxtb	r4, r3
 800104c:	2034      	movs	r0, #52	; 0x34
 800104e:	f7ff ff77 	bl	8000f40 <correct_Y>
 8001052:	4603      	mov	r3, r0
 8001054:	4619      	mov	r1, r3
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	4620      	mov	r0, r4
 8001062:	f000 ffe5 	bl	8002030 <glcd_tiny_draw_char_xy>
		x++;
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	3301      	adds	r3, #1
 800106a:	61bb      	str	r3, [r7, #24]
	while(labelspeed[x] != 0){
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4413      	add	r3, r2
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1e0      	bne.n	800103a <drawP1+0xce>
	}

	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2104      	movs	r1, #4
 800107c:	4809      	ldr	r0, [pc, #36]	; (80010a4 <drawP1+0x138>)
 800107e:	f001 fb31 	bl	80026e4 <HAL_GPIO_WritePin>
	glcd_write();
 8001082:	f7ff fb21 	bl	80006c8 <glcd_write>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8001086:	2201      	movs	r2, #1
 8001088:	2104      	movs	r1, #4
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <drawP1+0x138>)
 800108c:	f001 fb2a 	bl	80026e4 <HAL_GPIO_WritePin>
}
 8001090:	bf00      	nop
 8001092:	372c      	adds	r7, #44	; 0x2c
 8001094:	46bd      	mov	sp, r7
 8001096:	bd90      	pop	{r4, r7, pc}
 8001098:	0800828c 	.word	0x0800828c
 800109c:	08008284 	.word	0x08008284
 80010a0:	080082f0 	.word	0x080082f0
 80010a4:	40020800 	.word	0x40020800

080010a8 <updateP1>:

// pass in array of values in order of solar, motor, battery, and speed
void updateP1(int value[4]){
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b08f      	sub	sp, #60	; 0x3c
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	6078      	str	r0, [r7, #4]

	char valueS[4][4];

	glcd_tiny_set_font(Font5x7,5,7,32,127);
 80010b0:	237f      	movs	r3, #127	; 0x7f
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2320      	movs	r3, #32
 80010b6:	2207      	movs	r2, #7
 80010b8:	2105      	movs	r1, #5
 80010ba:	4877      	ldr	r0, [pc, #476]	; (8001298 <updateP1+0x1f0>)
 80010bc:	f000 ff90 	bl	8001fe0 <glcd_tiny_set_font>

	// get it in strings
	for(int i = 0; i < 4; i++){
 80010c0:	2300      	movs	r3, #0
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010c4:	e08d      	b.n	80011e2 <updateP1+0x13a>
		// sign
		int v = value[i];
 80010c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
		if(v<0){
 80010d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	da0a      	bge.n	80010ee <updateP1+0x46>
			valueS[i][0] = '-';
 80010d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	3330      	adds	r3, #48	; 0x30
 80010de:	443b      	add	r3, r7
 80010e0:	222d      	movs	r2, #45	; 0x2d
 80010e2:	f803 2c24 	strb.w	r2, [r3, #-36]
			v *= -1;
 80010e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e8:	425b      	negs	r3, r3
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80010ec:	e006      	b.n	80010fc <updateP1+0x54>
		}
		else{
			valueS[i][0] = '+';
 80010ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	3330      	adds	r3, #48	; 0x30
 80010f4:	443b      	add	r3, r7
 80010f6:	222b      	movs	r2, #43	; 0x2b
 80010f8:	f803 2c24 	strb.w	r2, [r3, #-36]
		}
		// hundred
		if(v/100 != 0){
 80010fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fe:	3363      	adds	r3, #99	; 0x63
 8001100:	2bc6      	cmp	r3, #198	; 0xc6
 8001102:	d910      	bls.n	8001126 <updateP1+0x7e>
			valueS[i][1] = '0' + v/100;
 8001104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001106:	4a65      	ldr	r2, [pc, #404]	; (800129c <updateP1+0x1f4>)
 8001108:	fb82 1203 	smull	r1, r2, r2, r3
 800110c:	1152      	asrs	r2, r2, #5
 800110e:	17db      	asrs	r3, r3, #31
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	3330      	adds	r3, #48	; 0x30
 8001116:	b2da      	uxtb	r2, r3
 8001118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	3330      	adds	r3, #48	; 0x30
 800111e:	443b      	add	r3, r7
 8001120:	f803 2c23 	strb.w	r2, [r3, #-35]
 8001124:	e006      	b.n	8001134 <updateP1+0x8c>
		}
		else{
			valueS[i][1] = ' ';
 8001126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	3330      	adds	r3, #48	; 0x30
 800112c:	443b      	add	r3, r7
 800112e:	2220      	movs	r2, #32
 8001130:	f803 2c23 	strb.w	r2, [r3, #-35]
		}
		// tenth
		if((v/10)%10 != 0 || valueS[i][1] != ' '){
 8001134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001136:	4a5a      	ldr	r2, [pc, #360]	; (80012a0 <updateP1+0x1f8>)
 8001138:	fb82 1203 	smull	r1, r2, r2, r3
 800113c:	1092      	asrs	r2, r2, #2
 800113e:	17db      	asrs	r3, r3, #31
 8001140:	1ad1      	subs	r1, r2, r3
 8001142:	4b57      	ldr	r3, [pc, #348]	; (80012a0 <updateP1+0x1f8>)
 8001144:	fb83 2301 	smull	r2, r3, r3, r1
 8001148:	109a      	asrs	r2, r3, #2
 800114a:	17cb      	asrs	r3, r1, #31
 800114c:	1ad2      	subs	r2, r2, r3
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	1aca      	subs	r2, r1, r3
 8001158:	2a00      	cmp	r2, #0
 800115a:	d107      	bne.n	800116c <updateP1+0xc4>
 800115c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	3330      	adds	r3, #48	; 0x30
 8001162:	443b      	add	r3, r7
 8001164:	f813 3c23 	ldrb.w	r3, [r3, #-35]
 8001168:	2b20      	cmp	r3, #32
 800116a:	d01b      	beq.n	80011a4 <updateP1+0xfc>
			valueS[i][2] = '0' + (v/10)%10;
 800116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116e:	4a4c      	ldr	r2, [pc, #304]	; (80012a0 <updateP1+0x1f8>)
 8001170:	fb82 1203 	smull	r1, r2, r2, r3
 8001174:	1092      	asrs	r2, r2, #2
 8001176:	17db      	asrs	r3, r3, #31
 8001178:	1ad2      	subs	r2, r2, r3
 800117a:	4b49      	ldr	r3, [pc, #292]	; (80012a0 <updateP1+0x1f8>)
 800117c:	fb83 1302 	smull	r1, r3, r3, r2
 8001180:	1099      	asrs	r1, r3, #2
 8001182:	17d3      	asrs	r3, r2, #31
 8001184:	1ac9      	subs	r1, r1, r3
 8001186:	460b      	mov	r3, r1
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	440b      	add	r3, r1
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	1ad1      	subs	r1, r2, r3
 8001190:	b2cb      	uxtb	r3, r1
 8001192:	3330      	adds	r3, #48	; 0x30
 8001194:	b2da      	uxtb	r2, r3
 8001196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	3330      	adds	r3, #48	; 0x30
 800119c:	443b      	add	r3, r7
 800119e:	f803 2c22 	strb.w	r2, [r3, #-34]
 80011a2:	e006      	b.n	80011b2 <updateP1+0x10a>
		}
		else{
			valueS[i][2] = ' ';
 80011a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	3330      	adds	r3, #48	; 0x30
 80011aa:	443b      	add	r3, r7
 80011ac:	2220      	movs	r2, #32
 80011ae:	f803 2c22 	strb.w	r2, [r3, #-34]
		}
		// ones
		valueS[i][3] = '0' + v%10;
 80011b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011b4:	4b3a      	ldr	r3, [pc, #232]	; (80012a0 <updateP1+0x1f8>)
 80011b6:	fb83 1302 	smull	r1, r3, r3, r2
 80011ba:	1099      	asrs	r1, r3, #2
 80011bc:	17d3      	asrs	r3, r2, #31
 80011be:	1ac9      	subs	r1, r1, r3
 80011c0:	460b      	mov	r3, r1
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	1ad1      	subs	r1, r2, r3
 80011ca:	b2cb      	uxtb	r3, r1
 80011cc:	3330      	adds	r3, #48	; 0x30
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	3330      	adds	r3, #48	; 0x30
 80011d6:	443b      	add	r3, r7
 80011d8:	f803 2c21 	strb.w	r2, [r3, #-33]
	for(int i = 0; i < 4; i++){
 80011dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011de:	3301      	adds	r3, #1
 80011e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e4:	2b03      	cmp	r3, #3
 80011e6:	f77f af6e 	ble.w	80010c6 <updateP1+0x1e>
	}

	// write the 3 small values
	int y = 5;
 80011ea:	2305      	movs	r3, #5
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < 3; i++){
 80011ee:	2300      	movs	r3, #0
 80011f0:	623b      	str	r3, [r7, #32]
 80011f2:	e02a      	b.n	800124a <updateP1+0x1a2>
		for(int j = 0; j < 4; j++){
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	e01e      	b.n	8001238 <updateP1+0x190>
			glcd_tiny_draw_char_xy(48+(j*6), correct_Y(y), valueS[i][j]);
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	461a      	mov	r2, r3
 8001200:	0052      	lsls	r2, r2, #1
 8001202:	4413      	add	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	b2db      	uxtb	r3, r3
 8001208:	3330      	adds	r3, #48	; 0x30
 800120a:	b2dc      	uxtb	r4, r3
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	b2db      	uxtb	r3, r3
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fe95 	bl	8000f40 <correct_Y>
 8001216:	4603      	mov	r3, r0
 8001218:	4619      	mov	r1, r3
 800121a:	6a3b      	ldr	r3, [r7, #32]
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	3330      	adds	r3, #48	; 0x30
 8001220:	19da      	adds	r2, r3, r7
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	4413      	add	r3, r2
 8001226:	3b24      	subs	r3, #36	; 0x24
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	4620      	mov	r0, r4
 800122e:	f000 feff 	bl	8002030 <glcd_tiny_draw_char_xy>
		for(int j = 0; j < 4; j++){
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3301      	adds	r3, #1
 8001236:	61fb      	str	r3, [r7, #28]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	2b03      	cmp	r3, #3
 800123c:	dddd      	ble.n	80011fa <updateP1+0x152>
		}
		y+=23;
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	3317      	adds	r3, #23
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < 3; i++){
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	3301      	adds	r3, #1
 8001248:	623b      	str	r3, [r7, #32]
 800124a:	6a3b      	ldr	r3, [r7, #32]
 800124c:	2b02      	cmp	r3, #2
 800124e:	ddd1      	ble.n	80011f4 <updateP1+0x14c>
	}

	// now write the big speed
	glcd_set_font(Liberation_Sans20x28_Numbers, 20, 28, '.', '9');
 8001250:	2339      	movs	r3, #57	; 0x39
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	232e      	movs	r3, #46	; 0x2e
 8001256:	221c      	movs	r2, #28
 8001258:	2114      	movs	r1, #20
 800125a:	4812      	ldr	r0, [pc, #72]	; (80012a4 <updateP1+0x1fc>)
 800125c:	f000 fc8c 	bl	8001b78 <glcd_set_font>
	glcd_draw_char_xy(85, 0, valueS[3][2]);
 8001260:	7ebb      	ldrb	r3, [r7, #26]
 8001262:	461a      	mov	r2, r3
 8001264:	2100      	movs	r1, #0
 8001266:	2055      	movs	r0, #85	; 0x55
 8001268:	f000 fcae 	bl	8001bc8 <glcd_draw_char_xy>
	glcd_draw_char_xy(105, 0, valueS[3][3]);
 800126c:	7efb      	ldrb	r3, [r7, #27]
 800126e:	461a      	mov	r2, r3
 8001270:	2100      	movs	r1, #0
 8001272:	2069      	movs	r0, #105	; 0x69
 8001274:	f000 fca8 	bl	8001bc8 <glcd_draw_char_xy>

	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	2104      	movs	r1, #4
 800127c:	480a      	ldr	r0, [pc, #40]	; (80012a8 <updateP1+0x200>)
 800127e:	f001 fa31 	bl	80026e4 <HAL_GPIO_WritePin>
	glcd_write();
 8001282:	f7ff fa21 	bl	80006c8 <glcd_write>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8001286:	2201      	movs	r2, #1
 8001288:	2104      	movs	r1, #4
 800128a:	4807      	ldr	r0, [pc, #28]	; (80012a8 <updateP1+0x200>)
 800128c:	f001 fa2a 	bl	80026e4 <HAL_GPIO_WritePin>
}
 8001290:	bf00      	nop
 8001292:	3734      	adds	r7, #52	; 0x34
 8001294:	46bd      	mov	sp, r7
 8001296:	bd90      	pop	{r4, r7, pc}
 8001298:	080082f0 	.word	0x080082f0
 800129c:	51eb851f 	.word	0x51eb851f
 80012a0:	66666667 	.word	0x66666667
 80012a4:	080084d0 	.word	0x080084d0
 80012a8:	40020800 	.word	0x40020800

080012ac <drawP2>:

// draw p2 labels
void drawP2(){
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b08b      	sub	sp, #44	; 0x2c
 80012b0:	af02      	add	r7, sp, #8
	char* labelsP2[] = {"Cruise:", "Light:"};
 80012b2:	4a36      	ldr	r2, [pc, #216]	; (800138c <drawP2+0xe0>)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012ba:	e883 0003 	stmia.w	r3, {r0, r1}
	int labelsP2L = 2;
 80012be:	2302      	movs	r3, #2
 80012c0:	613b      	str	r3, [r7, #16]

	glcd_tiny_set_font(Font5x7,5,7,32,127);
 80012c2:	237f      	movs	r3, #127	; 0x7f
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	2320      	movs	r3, #32
 80012c8:	2207      	movs	r2, #7
 80012ca:	2105      	movs	r1, #5
 80012cc:	4830      	ldr	r0, [pc, #192]	; (8001390 <drawP2+0xe4>)
 80012ce:	f000 fe87 	bl	8001fe0 <glcd_tiny_set_font>
	glcd_clear_buffer();
 80012d2:	f7ff fb59 	bl	8000988 <glcd_clear_buffer>

	int y = 5;
 80012d6:	2305      	movs	r3, #5
 80012d8:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < labelsP2L; i++){
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
 80012de:	e030      	b.n	8001342 <drawP2+0x96>
		char* label = labelsP2[i];
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	3320      	adds	r3, #32
 80012e6:	443b      	add	r3, r7
 80012e8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80012ec:	60fb      	str	r3, [r7, #12]
		int j = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
		while(label[j] != 0){
 80012f2:	e01a      	b.n	800132a <drawP2+0x7e>
			glcd_tiny_draw_char_xy(50+j*6, correct_Y(y), label[j]);
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	461a      	mov	r2, r3
 80012fa:	0052      	lsls	r2, r2, #1
 80012fc:	4413      	add	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	b2db      	uxtb	r3, r3
 8001302:	3332      	adds	r3, #50	; 0x32
 8001304:	b2dc      	uxtb	r4, r3
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fe18 	bl	8000f40 <correct_Y>
 8001310:	4603      	mov	r3, r0
 8001312:	4619      	mov	r1, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	4413      	add	r3, r2
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4620      	mov	r0, r4
 8001320:	f000 fe86 	bl	8002030 <glcd_tiny_draw_char_xy>
			j++;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	3301      	adds	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
		while(label[j] != 0){
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	4413      	add	r3, r2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1de      	bne.n	80012f4 <drawP2+0x48>
		}
		y+=23;
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3317      	adds	r3, #23
 800133a:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < labelsP2L; i++){
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	3301      	adds	r3, #1
 8001340:	61bb      	str	r3, [r7, #24]
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	429a      	cmp	r2, r3
 8001348:	dbca      	blt.n	80012e0 <drawP2+0x34>
	}

	glcd_draw_line(44, 0,  44, 63, BLACK);
 800134a:	2301      	movs	r3, #1
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	233f      	movs	r3, #63	; 0x3f
 8001350:	222c      	movs	r2, #44	; 0x2c
 8001352:	2100      	movs	r1, #0
 8001354:	202c      	movs	r0, #44	; 0x2c
 8001356:	f7ff fba3 	bl	8000aa0 <glcd_draw_line>
	glcd_tiny_draw_char_xy(19, correct_Y(52), '%');
 800135a:	2034      	movs	r0, #52	; 0x34
 800135c:	f7ff fdf0 	bl	8000f40 <correct_Y>
 8001360:	4603      	mov	r3, r0
 8001362:	2225      	movs	r2, #37	; 0x25
 8001364:	4619      	mov	r1, r3
 8001366:	2013      	movs	r0, #19
 8001368:	f000 fe62 	bl	8002030 <glcd_tiny_draw_char_xy>

	HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	2108      	movs	r1, #8
 8001370:	4808      	ldr	r0, [pc, #32]	; (8001394 <drawP2+0xe8>)
 8001372:	f001 f9b7 	bl	80026e4 <HAL_GPIO_WritePin>
	glcd_write();
 8001376:	f7ff f9a7 	bl	80006c8 <glcd_write>
	HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_SET);
 800137a:	2201      	movs	r2, #1
 800137c:	2108      	movs	r1, #8
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <drawP2+0xe8>)
 8001380:	f001 f9b0 	bl	80026e4 <HAL_GPIO_WritePin>
}
 8001384:	bf00      	nop
 8001386:	3724      	adds	r7, #36	; 0x24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd90      	pop	{r4, r7, pc}
 800138c:	08008298 	.word	0x08008298
 8001390:	080082f0 	.word	0x080082f0
 8001394:	40020800 	.word	0x40020800

08001398 <updateP2>:

// pass in array of values in order of cruise, light, regen, battery
void updateP2(int value[4]){
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b08b      	sub	sp, #44	; 0x2c
 800139c:	af02      	add	r7, sp, #8
 800139e:	6078      	str	r0, [r7, #4]
	glcd_tiny_set_font(Font5x7,5,7,32,127);
 80013a0:	237f      	movs	r3, #127	; 0x7f
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	2320      	movs	r3, #32
 80013a6:	2207      	movs	r2, #7
 80013a8:	2105      	movs	r1, #5
 80013aa:	4853      	ldr	r0, [pc, #332]	; (80014f8 <updateP2+0x160>)
 80013ac:	f000 fe18 	bl	8001fe0 <glcd_tiny_set_font>

	// write the 2 on off
	int y = 5;
 80013b0:	2305      	movs	r3, #5
 80013b2:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < 2; i++){
 80013b4:	2300      	movs	r3, #0
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	e031      	b.n	800141e <updateP2+0x86>
		char* status = "OFF";
 80013ba:	4b50      	ldr	r3, [pc, #320]	; (80014fc <updateP2+0x164>)
 80013bc:	617b      	str	r3, [r7, #20]
		if(value[i]) status = " ON";
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <updateP2+0x38>
 80013cc:	4b4c      	ldr	r3, [pc, #304]	; (8001500 <updateP2+0x168>)
 80013ce:	617b      	str	r3, [r7, #20]
		for(int j = 0; j < 3; j++){
 80013d0:	2300      	movs	r3, #0
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	e01a      	b.n	800140c <updateP2+0x74>
			glcd_tiny_draw_char_xy(95+(j*6), correct_Y(y), status[j]);
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	461a      	mov	r2, r3
 80013dc:	0052      	lsls	r2, r2, #1
 80013de:	4413      	add	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	335f      	adds	r3, #95	; 0x5f
 80013e6:	b2dc      	uxtb	r4, r3
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fda7 	bl	8000f40 <correct_Y>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4619      	mov	r1, r3
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	4413      	add	r3, r2
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	4620      	mov	r0, r4
 8001402:	f000 fe15 	bl	8002030 <glcd_tiny_draw_char_xy>
		for(int j = 0; j < 3; j++){
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	3301      	adds	r3, #1
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	2b02      	cmp	r3, #2
 8001410:	dde1      	ble.n	80013d6 <updateP2+0x3e>
		}
		y+=23;
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3317      	adds	r3, #23
 8001416:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < 2; i++){
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	3301      	adds	r3, #1
 800141c:	61bb      	str	r3, [r7, #24]
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	2b01      	cmp	r3, #1
 8001422:	ddca      	ble.n	80013ba <updateP2+0x22>
	}

	char* regen = "     ";
 8001424:	4b37      	ldr	r3, [pc, #220]	; (8001504 <updateP2+0x16c>)
 8001426:	60fb      	str	r3, [r7, #12]
	if(value[2]) regen = "REGEN";
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3308      	adds	r3, #8
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <updateP2+0x9e>
 8001432:	4b35      	ldr	r3, [pc, #212]	; (8001508 <updateP2+0x170>)
 8001434:	60fb      	str	r3, [r7, #12]

	glcd_set_font(Liberation_Sans17x17_Alpha, 17, 17, 'A', 'Z');
 8001436:	235a      	movs	r3, #90	; 0x5a
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2341      	movs	r3, #65	; 0x41
 800143c:	2211      	movs	r2, #17
 800143e:	2111      	movs	r1, #17
 8001440:	4832      	ldr	r0, [pc, #200]	; (800150c <updateP2+0x174>)
 8001442:	f000 fb99 	bl	8001b78 <glcd_set_font>
	for(int i = 0; i < 5; i++){
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	e012      	b.n	8001472 <updateP2+0xda>
		glcd_draw_char_xy(49+i*15, 30, regen[i]);
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	3331      	adds	r3, #49	; 0x31
 800145a:	b2d8      	uxtb	r0, r3
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	4413      	add	r3, r2
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	211e      	movs	r1, #30
 8001468:	f000 fbae 	bl	8001bc8 <glcd_draw_char_xy>
	for(int i = 0; i < 5; i++){
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	3301      	adds	r3, #1
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	2b04      	cmp	r3, #4
 8001476:	dde9      	ble.n	800144c <updateP2+0xb4>
	}

	// now write the big battery
	glcd_set_font(Liberation_Sans20x28_Numbers, 20, 28, '.', '9');
 8001478:	2339      	movs	r3, #57	; 0x39
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	232e      	movs	r3, #46	; 0x2e
 800147e:	221c      	movs	r2, #28
 8001480:	2114      	movs	r1, #20
 8001482:	4823      	ldr	r0, [pc, #140]	; (8001510 <updateP2+0x178>)
 8001484:	f000 fb78 	bl	8001b78 <glcd_set_font>
	glcd_draw_char_xy(0, 0, '0' + value[3]/10);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	330c      	adds	r3, #12
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a21      	ldr	r2, [pc, #132]	; (8001514 <updateP2+0x17c>)
 8001490:	fb82 1203 	smull	r1, r2, r2, r3
 8001494:	1092      	asrs	r2, r2, #2
 8001496:	17db      	asrs	r3, r3, #31
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	3330      	adds	r3, #48	; 0x30
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	2100      	movs	r1, #0
 80014a4:	2000      	movs	r0, #0
 80014a6:	f000 fb8f 	bl	8001bc8 <glcd_draw_char_xy>
	glcd_draw_char_xy(21, 0, '0' + value[3]%10);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	330c      	adds	r3, #12
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <updateP2+0x17c>)
 80014b2:	fb83 1302 	smull	r1, r3, r3, r2
 80014b6:	1099      	asrs	r1, r3, #2
 80014b8:	17d3      	asrs	r3, r2, #31
 80014ba:	1ac9      	subs	r1, r1, r3
 80014bc:	460b      	mov	r3, r1
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	1ad1      	subs	r1, r2, r3
 80014c6:	b2cb      	uxtb	r3, r1
 80014c8:	3330      	adds	r3, #48	; 0x30
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	2100      	movs	r1, #0
 80014d0:	2015      	movs	r0, #21
 80014d2:	f000 fb79 	bl	8001bc8 <glcd_draw_char_xy>

	HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2108      	movs	r1, #8
 80014da:	480f      	ldr	r0, [pc, #60]	; (8001518 <updateP2+0x180>)
 80014dc:	f001 f902 	bl	80026e4 <HAL_GPIO_WritePin>
	glcd_write();
 80014e0:	f7ff f8f2 	bl	80006c8 <glcd_write>
	HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_SET);
 80014e4:	2201      	movs	r2, #1
 80014e6:	2108      	movs	r1, #8
 80014e8:	480b      	ldr	r0, [pc, #44]	; (8001518 <updateP2+0x180>)
 80014ea:	f001 f8fb 	bl	80026e4 <HAL_GPIO_WritePin>
}
 80014ee:	bf00      	nop
 80014f0:	3724      	adds	r7, #36	; 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd90      	pop	{r4, r7, pc}
 80014f6:	bf00      	nop
 80014f8:	080082f0 	.word	0x080082f0
 80014fc:	080082a0 	.word	0x080082a0
 8001500:	080082a4 	.word	0x080082a4
 8001504:	080082a8 	.word	0x080082a8
 8001508:	080082b0 	.word	0x080082b0
 800150c:	0800889c 	.word	0x0800889c
 8001510:	080084d0 	.word	0x080084d0
 8001514:	66666667 	.word	0x66666667
 8001518:	40020800 	.word	0x40020800

0800151c <startDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startDefaultTask */
void startDefaultTask(void *argument)
{
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b093      	sub	sp, #76	; 0x4c
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	glcd_init();
 8001524:	f7ff f93a 	bl	800079c <glcd_init>
	//glcd_test_hello_world();
	//glcd_test_rectangles();

	// my stuff
	glcd_clear();
 8001528:	f7ff fa18 	bl	800095c <glcd_clear>
	srand(time(NULL));   // Initialization, should only be called once.
 800152c:	2000      	movs	r0, #0
 800152e:	f006 f835 	bl	800759c <time>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4613      	mov	r3, r2
 8001538:	4618      	mov	r0, r3
 800153a:	f005 ff05 	bl	8007348 <srand>

	int t = 500;
 800153e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
	int p1values[4] = {420, 805, -404, 69};
 8001544:	4b55      	ldr	r3, [pc, #340]	; (800169c <startDefaultTask+0x180>)
 8001546:	f107 041c 	add.w	r4, r7, #28
 800154a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800154c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int p2values[4] = {1, 1, 1, 87};
 8001550:	4b53      	ldr	r3, [pc, #332]	; (80016a0 <startDefaultTask+0x184>)
 8001552:	f107 040c 	add.w	r4, r7, #12
 8001556:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001558:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	drawP2();
 800155c:	f7ff fea6 	bl	80012ac <drawP2>
	updateP2(p2values);
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff17 	bl	8001398 <updateP2>

	drawP1();
 800156a:	f7ff fcff 	bl	8000f6c <drawP1>
	updateP1(p1values);
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fd98 	bl	80010a8 <updateP1>
	delay_ms(t);
 8001578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff f974 	bl	8000868 <delay_ms>
//	glcd_test_hello_world();
//	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
//
//
	while(1){
		for(int i = 0; i < 3; i++){
 8001580:	2300      	movs	r3, #0
 8001582:	647b      	str	r3, [r7, #68]	; 0x44
 8001584:	e028      	b.n	80015d8 <startDefaultTask+0xbc>
			int r = rand()%5;
 8001586:	f005 ff0d 	bl	80073a4 <rand>
 800158a:	4602      	mov	r2, r0
 800158c:	4b45      	ldr	r3, [pc, #276]	; (80016a4 <startDefaultTask+0x188>)
 800158e:	fb83 1302 	smull	r1, r3, r3, r2
 8001592:	1059      	asrs	r1, r3, #1
 8001594:	17d3      	asrs	r3, r2, #31
 8001596:	1ac9      	subs	r1, r1, r3
 8001598:	460b      	mov	r3, r1
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	643b      	str	r3, [r7, #64]	; 0x40
			if(rand()%2 == 0){
 80015a2:	f005 feff 	bl	80073a4 <rand>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d102      	bne.n	80015b6 <startDefaultTask+0x9a>
				r*= -1;
 80015b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015b2:	425b      	negs	r3, r3
 80015b4:	643b      	str	r3, [r7, #64]	; 0x40
			}
			p1values[i] += r;
 80015b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	3348      	adds	r3, #72	; 0x48
 80015bc:	443b      	add	r3, r7
 80015be:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 80015c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015c4:	441a      	add	r2, r3
 80015c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	3348      	adds	r3, #72	; 0x48
 80015cc:	443b      	add	r3, r7
 80015ce:	f843 2c2c 	str.w	r2, [r3, #-44]
		for(int i = 0; i < 3; i++){
 80015d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015d4:	3301      	adds	r3, #1
 80015d6:	647b      	str	r3, [r7, #68]	; 0x44
 80015d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015da:	2b02      	cmp	r3, #2
 80015dc:	ddd3      	ble.n	8001586 <startDefaultTask+0x6a>
		}
		int r = rand()%2;
 80015de:	f005 fee1 	bl	80073a4 <rand>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	bfb8      	it	lt
 80015ec:	425b      	neglt	r3, r3
 80015ee:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(rand()%2 == 0){
 80015f0:	f005 fed8 	bl	80073a4 <rand>
 80015f4:	4603      	mov	r3, r0
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d102      	bne.n	8001604 <startDefaultTask+0xe8>
			r*= -1;
 80015fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001600:	425b      	negs	r3, r3
 8001602:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
		p1values[3] += r;
 8001604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001608:	4413      	add	r3, r2
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
		drawP1();
 800160c:	f7ff fcae 	bl	8000f6c <drawP1>
		updateP1(p1values);
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fd47 	bl	80010a8 <updateP1>
		delay_ms(t);
 800161a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff f923 	bl	8000868 <delay_ms>

		for(int i = 0; i < 3; i++){
 8001622:	2300      	movs	r3, #0
 8001624:	63bb      	str	r3, [r7, #56]	; 0x38
 8001626:	e012      	b.n	800164e <startDefaultTask+0x132>
			int s = rand()%2;
 8001628:	f005 febc 	bl	80073a4 <rand>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	bfb8      	it	lt
 8001636:	425b      	neglt	r3, r3
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
			p2values[i] = s;
 800163a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	3348      	adds	r3, #72	; 0x48
 8001640:	443b      	add	r3, r7
 8001642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001644:	f843 2c3c 	str.w	r2, [r3, #-60]
		for(int i = 0; i < 3; i++){
 8001648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800164a:	3301      	adds	r3, #1
 800164c:	63bb      	str	r3, [r7, #56]	; 0x38
 800164e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001650:	2b02      	cmp	r3, #2
 8001652:	dde9      	ble.n	8001628 <startDefaultTask+0x10c>
		}
		int s = rand()%2;
 8001654:	f005 fea6 	bl	80073a4 <rand>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	bfb8      	it	lt
 8001662:	425b      	neglt	r3, r3
 8001664:	637b      	str	r3, [r7, #52]	; 0x34
		if(rand()%2 == 0){
 8001666:	f005 fe9d 	bl	80073a4 <rand>
 800166a:	4603      	mov	r3, r0
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <startDefaultTask+0x15e>
			s*= -1;
 8001674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001676:	425b      	negs	r3, r3
 8001678:	637b      	str	r3, [r7, #52]	; 0x34
		}
		p2values[3] += s;
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800167e:	4413      	add	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
		drawP2();
 8001682:	f7ff fe13 	bl	80012ac <drawP2>
		updateP2(p2values);
 8001686:	f107 030c 	add.w	r3, r7, #12
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fe84 	bl	8001398 <updateP2>
		delay_ms(t);
 8001690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff f8e8 	bl	8000868 <delay_ms>
	while(1){
 8001698:	e772      	b.n	8001580 <startDefaultTask+0x64>
 800169a:	bf00      	nop
 800169c:	080082b8 	.word	0x080082b8
 80016a0:	080082c8 	.word	0x080082c8
 80016a4:	66666667 	.word	0x66666667

080016a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d101      	bne.n	80016be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016ba:	f000 fd7d 	bl	80021b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40001000 	.word	0x40001000

080016cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d0:	b672      	cpsid	i
}
 80016d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <Error_Handler+0x8>
	...

080016d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_MspInit+0x54>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	4a11      	ldr	r2, [pc, #68]	; (800172c <HAL_MspInit+0x54>)
 80016e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ec:	6453      	str	r3, [r2, #68]	; 0x44
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <HAL_MspInit+0x54>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	603b      	str	r3, [r7, #0]
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_MspInit+0x54>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <HAL_MspInit+0x54>)
 8001704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001708:	6413      	str	r3, [r2, #64]	; 0x40
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <HAL_MspInit+0x54>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	210f      	movs	r1, #15
 800171a:	f06f 0001 	mvn.w	r0, #1
 800171e:	f000 fe23 	bl	8002368 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800

08001730 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	; 0x28
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a28      	ldr	r2, [pc, #160]	; (80017f0 <HAL_SPI_MspInit+0xc0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d14a      	bne.n	80017e8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <HAL_SPI_MspInit+0xc4>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	4a26      	ldr	r2, [pc, #152]	; (80017f4 <HAL_SPI_MspInit+0xc4>)
 800175c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001760:	6413      	str	r3, [r2, #64]	; 0x40
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <HAL_SPI_MspInit+0xc4>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <HAL_SPI_MspInit+0xc4>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a1f      	ldr	r2, [pc, #124]	; (80017f4 <HAL_SPI_MspInit+0xc4>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <HAL_SPI_MspInit+0xc4>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_SPI_MspInit+0xc4>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a18      	ldr	r2, [pc, #96]	; (80017f4 <HAL_SPI_MspInit+0xc4>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <HAL_SPI_MspInit+0xc4>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB0     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017a6:	2301      	movs	r3, #1
 80017a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b2:	2303      	movs	r3, #3
 80017b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80017b6:	2307      	movs	r3, #7
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	480d      	ldr	r0, [pc, #52]	; (80017f8 <HAL_SPI_MspInit+0xc8>)
 80017c2:	f000 fdfb 	bl	80023bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d4:	2303      	movs	r3, #3
 80017d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017d8:	2306      	movs	r3, #6
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	4619      	mov	r1, r3
 80017e2:	4806      	ldr	r0, [pc, #24]	; (80017fc <HAL_SPI_MspInit+0xcc>)
 80017e4:	f000 fdea 	bl	80023bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017e8:	bf00      	nop
 80017ea:	3728      	adds	r7, #40	; 0x28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40003c00 	.word	0x40003c00
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020400 	.word	0x40020400
 80017fc:	40020800 	.word	0x40020800

08001800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0b      	ldr	r2, [pc, #44]	; (800183c <HAL_TIM_Base_MspInit+0x3c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d10d      	bne.n	800182e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <HAL_TIM_Base_MspInit+0x40>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a09      	ldr	r2, [pc, #36]	; (8001840 <HAL_TIM_Base_MspInit+0x40>)
 800181c:	f043 0320 	orr.w	r3, r3, #32
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b07      	ldr	r3, [pc, #28]	; (8001840 <HAL_TIM_Base_MspInit+0x40>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 0320 	and.w	r3, r3, #32
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40001400 	.word	0x40001400
 8001840:	40023800 	.word	0x40023800

08001844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a19      	ldr	r2, [pc, #100]	; (80018c8 <HAL_UART_MspInit+0x84>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d12b      	bne.n	80018be <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	4b18      	ldr	r3, [pc, #96]	; (80018cc <HAL_UART_MspInit+0x88>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a17      	ldr	r2, [pc, #92]	; (80018cc <HAL_UART_MspInit+0x88>)
 8001870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <HAL_UART_MspInit+0x88>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_UART_MspInit+0x88>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a10      	ldr	r2, [pc, #64]	; (80018cc <HAL_UART_MspInit+0x88>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <HAL_UART_MspInit+0x88>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800189e:	230c      	movs	r3, #12
 80018a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018aa:	2303      	movs	r3, #3
 80018ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ae:	2307      	movs	r3, #7
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	4619      	mov	r1, r3
 80018b8:	4805      	ldr	r0, [pc, #20]	; (80018d0 <HAL_UART_MspInit+0x8c>)
 80018ba:	f000 fd7f 	bl	80023bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018be:	bf00      	nop
 80018c0:	3728      	adds	r7, #40	; 0x28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40004400 	.word	0x40004400
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40020000 	.word	0x40020000

080018d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08c      	sub	sp, #48	; 0x30
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80018e4:	2200      	movs	r2, #0
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	2036      	movs	r0, #54	; 0x36
 80018ea:	f000 fd3d 	bl	8002368 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018ee:	2036      	movs	r0, #54	; 0x36
 80018f0:	f000 fd56 	bl	80023a0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <HAL_InitTick+0xa4>)
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	4a1e      	ldr	r2, [pc, #120]	; (8001978 <HAL_InitTick+0xa4>)
 80018fe:	f043 0310 	orr.w	r3, r3, #16
 8001902:	6413      	str	r3, [r2, #64]	; 0x40
 8001904:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <HAL_InitTick+0xa4>)
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	f003 0310 	and.w	r3, r3, #16
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001910:	f107 0210 	add.w	r2, r7, #16
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4611      	mov	r1, r2
 800191a:	4618      	mov	r0, r3
 800191c:	f001 f816 	bl	800294c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001920:	f000 ffec 	bl	80028fc <HAL_RCC_GetPCLK1Freq>
 8001924:	4603      	mov	r3, r0
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800192a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800192c:	4a13      	ldr	r2, [pc, #76]	; (800197c <HAL_InitTick+0xa8>)
 800192e:	fba2 2303 	umull	r2, r3, r2, r3
 8001932:	0c9b      	lsrs	r3, r3, #18
 8001934:	3b01      	subs	r3, #1
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <HAL_InitTick+0xac>)
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <HAL_InitTick+0xb0>)
 800193c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_InitTick+0xac>)
 8001940:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001944:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001946:	4a0e      	ldr	r2, [pc, #56]	; (8001980 <HAL_InitTick+0xac>)
 8001948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800194a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <HAL_InitTick+0xac>)
 800194e:	2200      	movs	r2, #0
 8001950:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_InitTick+0xac>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001958:	4809      	ldr	r0, [pc, #36]	; (8001980 <HAL_InitTick+0xac>)
 800195a:	f001 ff87 	bl	800386c <HAL_TIM_Base_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d104      	bne.n	800196e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001964:	4806      	ldr	r0, [pc, #24]	; (8001980 <HAL_InitTick+0xac>)
 8001966:	f001 ffd1 	bl	800390c <HAL_TIM_Base_Start_IT>
 800196a:	4603      	mov	r3, r0
 800196c:	e000      	b.n	8001970 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	3730      	adds	r7, #48	; 0x30
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40023800 	.word	0x40023800
 800197c:	431bde83 	.word	0x431bde83
 8001980:	20000584 	.word	0x20000584
 8001984:	40001000 	.word	0x40001000

08001988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800198c:	e7fe      	b.n	800198c <NMI_Handler+0x4>

0800198e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001992:	e7fe      	b.n	8001992 <HardFault_Handler+0x4>

08001994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <MemManage_Handler+0x4>

0800199a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800199e:	e7fe      	b.n	800199e <BusFault_Handler+0x4>

080019a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <UsageFault_Handler+0x4>

080019a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <TIM6_DAC_IRQHandler+0x10>)
 80019ba:	f002 f817 	bl	80039ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000584 	.word	0x20000584

080019c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
	return 1;
 80019cc:	2301      	movs	r3, #1
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_kill>:

int _kill(int pid, int sig)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019e2:	f005 fae3 	bl	8006fac <__errno>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2216      	movs	r2, #22
 80019ea:	601a      	str	r2, [r3, #0]
	return -1;
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <_exit>:

void _exit (int status)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ffe7 	bl	80019d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a0a:	e7fe      	b.n	8001a0a <_exit+0x12>

08001a0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	e00a      	b.n	8001a34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a1e:	f3af 8000 	nop.w
 8001a22:	4601      	mov	r1, r0
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	60ba      	str	r2, [r7, #8]
 8001a2a:	b2ca      	uxtb	r2, r1
 8001a2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3301      	adds	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	dbf0      	blt.n	8001a1e <_read+0x12>
	}

return len;
 8001a3c:	687b      	ldr	r3, [r7, #4]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	e009      	b.n	8001a6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	1c5a      	adds	r2, r3, #1
 8001a5c:	60ba      	str	r2, [r7, #8]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	dbf1      	blt.n	8001a58 <_write+0x12>
	}
	return len;
 8001a74:	687b      	ldr	r3, [r7, #4]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_close>:

int _close(int file)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
	return -1;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aa6:	605a      	str	r2, [r3, #4]
	return 0;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <_isatty>:

int _isatty(int file)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
	return 1;
 8001abe:	2301      	movs	r3, #1
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
	return 0;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af0:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <_sbrk+0x5c>)
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <_sbrk+0x60>)
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <_sbrk+0x64>)
 8001b06:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <_sbrk+0x68>)
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d207      	bcs.n	8001b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b18:	f005 fa48 	bl	8006fac <__errno>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	220c      	movs	r2, #12
 8001b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
 8001b26:	e009      	b.n	8001b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2e:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <_sbrk+0x64>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <_sbrk+0x64>)
 8001b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20020000 	.word	0x20020000
 8001b48:	00000400 	.word	0x00000400
 8001b4c:	200005cc 	.word	0x200005cc
 8001b50:	20005000 	.word	0x20005000

08001b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <SystemInit+0x20>)
 8001b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5e:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <SystemInit+0x20>)
 8001b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <glcd_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	4608      	mov	r0, r1
 8001b82:	4611      	mov	r1, r2
 8001b84:	461a      	mov	r2, r3
 8001b86:	4603      	mov	r3, r0
 8001b88:	70fb      	strb	r3, [r7, #3]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	70bb      	strb	r3, [r7, #2]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	707b      	strb	r3, [r7, #1]
	/* Supports variable width fonts */
	font_current.font_table = font_table;
 8001b92:	4a0c      	ldr	r2, [pc, #48]	; (8001bc4 <glcd_set_font+0x4c>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6013      	str	r3, [r2, #0]
	font_current.width = width;
 8001b98:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <glcd_set_font+0x4c>)
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	7113      	strb	r3, [r2, #4]
	font_current.height = height;
 8001b9e:	4a09      	ldr	r2, [pc, #36]	; (8001bc4 <glcd_set_font+0x4c>)
 8001ba0:	78bb      	ldrb	r3, [r7, #2]
 8001ba2:	7153      	strb	r3, [r2, #5]
	font_current.start_char = start_char;
 8001ba4:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <glcd_set_font+0x4c>)
 8001ba6:	787b      	ldrb	r3, [r7, #1]
 8001ba8:	7193      	strb	r3, [r2, #6]
	font_current.end_char = end_char;
 8001baa:	4a06      	ldr	r2, [pc, #24]	; (8001bc4 <glcd_set_font+0x4c>)
 8001bac:	7c3b      	ldrb	r3, [r7, #16]
 8001bae:	71d3      	strb	r3, [r2, #7]
	font_current.table_type = MIKRO; /* Only supports MikroElektronika generated format at the moment */
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <glcd_set_font+0x4c>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	721a      	strb	r2, [r3, #8]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	200005d0 	.word	0x200005d0

08001bc8 <glcd_draw_char_xy>:
	font_current.end_char = end_char;
	font_current.table_type = type; /* Only supports MikroElektronika generated format at the moment */
}

uint8_t glcd_draw_char_xy(uint8_t x, uint8_t y, char c)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	; 0x28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	71bb      	strb	r3, [r7, #6]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	717b      	strb	r3, [r7, #5]
	if (c < font_current.start_char || c > font_current.end_char) {
 8001bda:	4bae      	ldr	r3, [pc, #696]	; (8001e94 <glcd_draw_char_xy+0x2cc>)
 8001bdc:	799b      	ldrb	r3, [r3, #6]
 8001bde:	797a      	ldrb	r2, [r7, #5]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d304      	bcc.n	8001bee <glcd_draw_char_xy+0x26>
 8001be4:	4bab      	ldr	r3, [pc, #684]	; (8001e94 <glcd_draw_char_xy+0x2cc>)
 8001be6:	79db      	ldrb	r3, [r3, #7]
 8001be8:	797a      	ldrb	r2, [r7, #5]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d901      	bls.n	8001bf2 <glcd_draw_char_xy+0x2a>
		c = '.';
 8001bee:	232e      	movs	r3, #46	; 0x2e
 8001bf0:	717b      	strb	r3, [r7, #5]
	}
	
	if (font_current.table_type == STANG) {
 8001bf2:	4ba8      	ldr	r3, [pc, #672]	; (8001e94 <glcd_draw_char_xy+0x2cc>)
 8001bf4:	7a1b      	ldrb	r3, [r3, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d163      	bne.n	8001cc2 <glcd_draw_char_xy+0xfa>
		/* Font table in Pascal Stang format (single byte height with with no width specifier) */
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c00:	e056      	b.n	8001cb0 <glcd_draw_char_xy+0xe8>
#if defined(GLCD_DEVICE_AVR8)			
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
 8001c02:	4ba4      	ldr	r3, [pc, #656]	; (8001e94 <glcd_draw_char_xy+0x2cc>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	797b      	ldrb	r3, [r7, #5]
 8001c08:	49a2      	ldr	r1, [pc, #648]	; (8001e94 <glcd_draw_char_xy+0x2cc>)
 8001c0a:	7989      	ldrb	r1, [r1, #6]
 8001c0c:	1a5b      	subs	r3, r3, r1
 8001c0e:	49a1      	ldr	r1, [pc, #644]	; (8001e94 <glcd_draw_char_xy+0x2cc>)
 8001c10:	7909      	ldrb	r1, [r1, #4]
 8001c12:	fb01 f303 	mul.w	r3, r1, r3
 8001c16:	4619      	mov	r1, r3
 8001c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c1c:	440b      	add	r3, r1
 8001c1e:	4413      	add	r3, r2
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	727b      	strb	r3, [r7, #9]
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
 8001c24:	2300      	movs	r3, #0
 8001c26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c2a:	e038      	b.n	8001c9e <glcd_draw_char_xy+0xd6>
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
 8001c2c:	79fa      	ldrb	r2, [r7, #7]
 8001c2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c32:	4413      	add	r3, r2
 8001c34:	2b7f      	cmp	r3, #127	; 0x7f
 8001c36:	dc05      	bgt.n	8001c44 <glcd_draw_char_xy+0x7c>
 8001c38:	79ba      	ldrb	r2, [r7, #6]
 8001c3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c3e:	4413      	add	r3, r2
 8001c40:	2b3f      	cmp	r3, #63	; 0x3f
 8001c42:	dd01      	ble.n	8001c48 <glcd_draw_char_xy+0x80>
					/* Don't try and write past the dimensions of the LCD */
					return 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e1c5      	b.n	8001fd4 <glcd_draw_char_xy+0x40c>
				}
				if (dat & (1<<j)) {
 8001c48:	7a7a      	ldrb	r2, [r7, #9]
 8001c4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c4e:	fa42 f303 	asr.w	r3, r2, r3
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00e      	beq.n	8001c78 <glcd_draw_char_xy+0xb0>
					glcd_set_pixel(x+i,y+j,BLACK);
 8001c5a:	79fa      	ldrb	r2, [r7, #7]
 8001c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c60:	4413      	add	r3, r2
 8001c62:	b2d8      	uxtb	r0, r3
 8001c64:	79ba      	ldrb	r2, [r7, #6]
 8001c66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c6a:	4413      	add	r3, r2
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4619      	mov	r1, r3
 8001c72:	f7fe feb3 	bl	80009dc <glcd_set_pixel>
 8001c76:	e00d      	b.n	8001c94 <glcd_draw_char_xy+0xcc>
				} else {
					glcd_set_pixel(x+i,y+j,WHITE);
 8001c78:	79fa      	ldrb	r2, [r7, #7]
 8001c7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c7e:	4413      	add	r3, r2
 8001c80:	b2d8      	uxtb	r0, r3
 8001c82:	79ba      	ldrb	r2, [r7, #6]
 8001c84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c88:	4413      	add	r3, r2
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f7fe fea4 	bl	80009dc <glcd_set_pixel>
			for (j = 0; j < 8; j++) {
 8001c94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c98:	3301      	adds	r3, #1
 8001c9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ca2:	2b07      	cmp	r3, #7
 8001ca4:	d9c2      	bls.n	8001c2c <glcd_draw_char_xy+0x64>
		for ( i = 0; i < font_current.width; i++ ) {
 8001ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001caa:	3301      	adds	r3, #1
 8001cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001cb0:	4b78      	ldr	r3, [pc, #480]	; (8001e94 <glcd_draw_char_xy+0x2cc>)
 8001cb2:	791b      	ldrb	r3, [r3, #4]
 8001cb4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d3a2      	bcc.n	8001c02 <glcd_draw_char_xy+0x3a>
			}
		}
		
		/* always return how many pixels of width were written */
		/* here for "stang" format fonts, it is always fixed */
		return font_current.width;
 8001cbc:	4b75      	ldr	r3, [pc, #468]	; (8001e94 <glcd_draw_char_xy+0x2cc>)
 8001cbe:	791b      	ldrb	r3, [r3, #4]
 8001cc0:	e188      	b.n	8001fd4 <glcd_draw_char_xy+0x40c>
		
	} else if (font_current.table_type == MIKRO) {
 8001cc2:	4b74      	ldr	r3, [pc, #464]	; (8001e94 <glcd_draw_char_xy+0x2cc>)
 8001cc4:	7a1b      	ldrb	r3, [r3, #8]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	f040 80b9 	bne.w	8001e3e <glcd_draw_char_xy+0x276>
		uint8_t var_width;
		uint8_t bytes_high;
		uint8_t bytes_per_char;
		const char *p;
		
		if ((font_current.height % 8) > 0){
 8001ccc:	4b71      	ldr	r3, [pc, #452]	; (8001e94 <glcd_draw_char_xy+0x2cc>)
 8001cce:	795b      	ldrb	r3, [r3, #5]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d007      	beq.n	8001cea <glcd_draw_char_xy+0x122>
			bytes_high = (font_current.height / 8) + 1;
 8001cda:	4b6e      	ldr	r3, [pc, #440]	; (8001e94 <glcd_draw_char_xy+0x2cc>)
 8001cdc:	795b      	ldrb	r3, [r3, #5]
 8001cde:	08db      	lsrs	r3, r3, #3
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001ce8:	e004      	b.n	8001cf4 <glcd_draw_char_xy+0x12c>
		}
		else{
			bytes_high = (font_current.height / 8);
 8001cea:	4b6a      	ldr	r3, [pc, #424]	; (8001e94 <glcd_draw_char_xy+0x2cc>)
 8001cec:	795b      	ldrb	r3, [r3, #5]
 8001cee:	08db      	lsrs	r3, r3, #3
 8001cf0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}
		bytes_per_char = font_current.width * bytes_high + 1; /* The +1 is the width byte at the start */
 8001cf4:	4b67      	ldr	r3, [pc, #412]	; (8001e94 <glcd_draw_char_xy+0x2cc>)
 8001cf6:	791b      	ldrb	r3, [r3, #4]
 8001cf8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001cfc:	fb12 f303 	smulbb	r3, r2, r3
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	3301      	adds	r3, #1
 8001d04:	747b      	strb	r3, [r7, #17]
				
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
 8001d06:	4b63      	ldr	r3, [pc, #396]	; (8001e94 <glcd_draw_char_xy+0x2cc>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	797a      	ldrb	r2, [r7, #5]
 8001d0c:	4961      	ldr	r1, [pc, #388]	; (8001e94 <glcd_draw_char_xy+0x2cc>)
 8001d0e:	7989      	ldrb	r1, [r1, #6]
 8001d10:	1a52      	subs	r2, r2, r1
 8001d12:	7c79      	ldrb	r1, [r7, #17]
 8001d14:	fb01 f202 	mul.w	r2, r1, r2
 8001d18:	4413      	add	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]

		/* The first byte per character is always the width of the character */
#if defined(GLCD_DEVICE_AVR8)		
		var_width = pgm_read_byte(p);
#else
		var_width = *p;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	72fb      	strb	r3, [r7, #11]
#endif
		p++; /* Step over the variable width field */
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3301      	adds	r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
		if (x+var_width >= GLCD_LCD_WIDTH || y+font_current.height >= GLCD_LCD_HEIGHT) {
			return;
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001d2e:	e07e      	b.n	8001e2e <glcd_draw_char_xy+0x266>
			uint8_t j;
			for ( j = 0; j < bytes_high; j++ ) {
 8001d30:	2300      	movs	r3, #0
 8001d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001d36:	e06f      	b.n	8001e18 <glcd_draw_char_xy+0x250>
#if defined(GLCD_DEVICE_AVR8)				
				uint8_t dat = pgm_read_byte( p + i*bytes_high + j );
#else
				uint8_t dat = *( p + i*bytes_high + j );
 8001d38:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001d3c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001d40:	fb02 f303 	mul.w	r3, r2, r3
 8001d44:	461a      	mov	r2, r3
 8001d46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d4a:	4413      	add	r3, r2
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	4413      	add	r3, r2
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	72bb      	strb	r3, [r7, #10]
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
 8001d54:	2300      	movs	r3, #0
 8001d56:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001d5a:	e054      	b.n	8001e06 <glcd_draw_char_xy+0x23e>
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
 8001d5c:	79fa      	ldrb	r2, [r7, #7]
 8001d5e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001d62:	4413      	add	r3, r2
 8001d64:	2b7f      	cmp	r3, #127	; 0x7f
 8001d66:	dc09      	bgt.n	8001d7c <glcd_draw_char_xy+0x1b4>
 8001d68:	79ba      	ldrb	r2, [r7, #6]
 8001d6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	441a      	add	r2, r3
 8001d72:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d76:	4413      	add	r3, r2
 8001d78:	2b3f      	cmp	r3, #63	; 0x3f
 8001d7a:	dd01      	ble.n	8001d80 <glcd_draw_char_xy+0x1b8>
						/* Don't write past the dimensions of the LCD, skip the entire char */
						return 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	e129      	b.n	8001fd4 <glcd_draw_char_xy+0x40c>
					}
					
					/* We should not write if the y bit exceeds font height */
					if ((j*8 + bit) >= font_current.height) {
 8001d80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d84:	00da      	lsls	r2, r3, #3
 8001d86:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4a41      	ldr	r2, [pc, #260]	; (8001e94 <glcd_draw_char_xy+0x2cc>)
 8001d8e:	7952      	ldrb	r2, [r2, #5]
 8001d90:	4293      	cmp	r3, r2
 8001d92:	da32      	bge.n	8001dfa <glcd_draw_char_xy+0x232>
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
 8001d94:	7aba      	ldrb	r2, [r7, #10]
 8001d96:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d9a:	fa42 f303 	asr.w	r3, r2, r3
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d014      	beq.n	8001dd0 <glcd_draw_char_xy+0x208>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
 8001da6:	79fa      	ldrb	r2, [r7, #7]
 8001da8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001dac:	4413      	add	r3, r2
 8001dae:	b2d8      	uxtb	r0, r3
 8001db0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	79bb      	ldrb	r3, [r7, #6]
 8001dba:	4413      	add	r3, r2
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001dc2:	4413      	add	r3, r2
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f7fe fe07 	bl	80009dc <glcd_set_pixel>
 8001dce:	e015      	b.n	8001dfc <glcd_draw_char_xy+0x234>
					} else {
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
 8001dd0:	79fa      	ldrb	r2, [r7, #7]
 8001dd2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001dd6:	4413      	add	r3, r2
 8001dd8:	b2d8      	uxtb	r0, r3
 8001dda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	79bb      	ldrb	r3, [r7, #6]
 8001de4:	4413      	add	r3, r2
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001dec:	4413      	add	r3, r2
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2200      	movs	r2, #0
 8001df2:	4619      	mov	r1, r3
 8001df4:	f7fe fdf2 	bl	80009dc <glcd_set_pixel>
 8001df8:	e000      	b.n	8001dfc <glcd_draw_char_xy+0x234>
						continue;
 8001dfa:	bf00      	nop
				for (bit = 0; bit < 8; bit++) {
 8001dfc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001e00:	3301      	adds	r3, #1
 8001e02:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001e06:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001e0a:	2b07      	cmp	r3, #7
 8001e0c:	d9a6      	bls.n	8001d5c <glcd_draw_char_xy+0x194>
			for ( j = 0; j < bytes_high; j++ ) {
 8001e0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e12:	3301      	adds	r3, #1
 8001e14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001e18:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d389      	bcc.n	8001d38 <glcd_draw_char_xy+0x170>
		for ( i = 0; i < var_width; i++ ) {
 8001e24:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e28:	3301      	adds	r3, #1
 8001e2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001e2e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001e32:	7afb      	ldrb	r3, [r7, #11]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	f4ff af7b 	bcc.w	8001d30 <glcd_draw_char_xy+0x168>
					}
				}									
			}				
		}
		return var_width;	
 8001e3a:	7afb      	ldrb	r3, [r7, #11]
 8001e3c:	e0ca      	b.n	8001fd4 <glcd_draw_char_xy+0x40c>
	
	} else if (font_current.table_type == GLCD_UTILS) {
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <glcd_draw_char_xy+0x2cc>)
 8001e40:	7a1b      	ldrb	r3, [r3, #8]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	f040 80c5 	bne.w	8001fd2 <glcd_draw_char_xy+0x40a>
		uint8_t var_width, n;
		uint8_t bytes_high, bytes_per_char;
		const char *p;
		uint8_t j;
		
		bytes_high = font_current.height / 8 + 1;
 8001e48:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <glcd_draw_char_xy+0x2cc>)
 8001e4a:	795b      	ldrb	r3, [r3, #5]
 8001e4c:	08db      	lsrs	r3, r3, #3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	3301      	adds	r3, #1
 8001e52:	76bb      	strb	r3, [r7, #26]
		bytes_per_char = font_current.width * bytes_high;
 8001e54:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <glcd_draw_char_xy+0x2cc>)
 8001e56:	791b      	ldrb	r3, [r3, #4]
 8001e58:	7eba      	ldrb	r2, [r7, #26]
 8001e5a:	fb12 f303 	smulbb	r3, r2, r3
 8001e5e:	767b      	strb	r3, [r7, #25]
		
		/* Point to chars first byte */
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <glcd_draw_char_xy+0x2cc>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	797a      	ldrb	r2, [r7, #5]
 8001e66:	490b      	ldr	r1, [pc, #44]	; (8001e94 <glcd_draw_char_xy+0x2cc>)
 8001e68:	7989      	ldrb	r1, [r1, #6]
 8001e6a:	1a52      	subs	r2, r2, r1
 8001e6c:	7e79      	ldrb	r1, [r7, #25]
 8001e6e:	fb01 f202 	mul.w	r2, r1, r2
 8001e72:	4413      	add	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]

		/* Determine the width of the character */
		var_width = font_current.width;
 8001e76:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <glcd_draw_char_xy+0x2cc>)
 8001e78:	791b      	ldrb	r3, [r3, #4]
 8001e7a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		
		n = 0; /* How many columns back from the end */
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f887 3020 	strb.w	r3, [r7, #32]
		
		while (1) {
			uint8_t max_byte = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	77bb      	strb	r3, [r7, #30]
			uint8_t row = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	777b      	strb	r3, [r7, #29]
			
			for (row = 0; row < bytes_high; row++) {
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	777b      	strb	r3, [r7, #29]
 8001e90:	e015      	b.n	8001ebe <glcd_draw_char_xy+0x2f6>
 8001e92:	bf00      	nop
 8001e94:	200005d0 	.word	0x200005d0
				uint8_t offset;
				offset = (font_current.width - 1 - n) * row;
 8001e98:	4b50      	ldr	r3, [pc, #320]	; (8001fdc <glcd_draw_char_xy+0x414>)
 8001e9a:	791b      	ldrb	r3, [r3, #4]
 8001e9c:	1e5a      	subs	r2, r3, #1
 8001e9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	7f7a      	ldrb	r2, [r7, #29]
 8001ea8:	fb12 f303 	smulbb	r3, r2, r3
 8001eac:	74bb      	strb	r3, [r7, #18]
				max_byte = *(p + offset);
 8001eae:	7cbb      	ldrb	r3, [r7, #18]
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	77bb      	strb	r3, [r7, #30]
			for (row = 0; row < bytes_high; row++) {
 8001eb8:	7f7b      	ldrb	r3, [r7, #29]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	777b      	strb	r3, [r7, #29]
 8001ebe:	7f7a      	ldrb	r2, [r7, #29]
 8001ec0:	7ebb      	ldrb	r3, [r7, #26]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d3e8      	bcc.n	8001e98 <glcd_draw_char_xy+0x2d0>
			}
			if (max_byte == 0) {
 8001ec6:	7fbb      	ldrb	r3, [r7, #30]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10e      	bne.n	8001eea <glcd_draw_char_xy+0x322>
				/* column is empty for all rows, go left and test again */
				/* reduce variable width by 1 */
				var_width--;
 8001ecc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				if (var_width == 0) {
 8001ed6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d007      	beq.n	8001eee <glcd_draw_char_xy+0x326>
					break;
				}
			} else {
				break; /* Part of a character was found */
			}
			n++;
 8001ede:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	f887 3020 	strb.w	r3, [r7, #32]
		while (1) {
 8001ee8:	e7cc      	b.n	8001e84 <glcd_draw_char_xy+0x2bc>
				break; /* Part of a character was found */
 8001eea:	bf00      	nop
 8001eec:	e000      	b.n	8001ef0 <glcd_draw_char_xy+0x328>
					break;
 8001eee:	bf00      	nop
		/* Uncomment line below, to force fixed width, for debugging only */
		//var_width = font_current.width; // bypass auto width detection, treat as fixed width
				
		/* For glcd-utils format, we write one complete row at a time */
		 /* loop as rows, 1st row, j=0 */
		for ( j = 0; j < bytes_high; j++ ) {
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	77fb      	strb	r3, [r7, #31]
 8001ef4:	e066      	b.n	8001fc4 <glcd_draw_char_xy+0x3fc>
			/* Loop one row at a time */
		
			uint8_t i;
			for ( i = 0; i < var_width; i++ ) {
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	773b      	strb	r3, [r7, #28]
 8001efa:	e05b      	b.n	8001fb4 <glcd_draw_char_xy+0x3ec>
				uint8_t dat, bit;
				
#if defined(GLCD_DEVICE_AVR8)
				dat = pgm_read_byte( p + j*font_current.width + i );
#else
				dat = *( p + j*font_current.width + i );
 8001efc:	7ffb      	ldrb	r3, [r7, #31]
 8001efe:	4a37      	ldr	r2, [pc, #220]	; (8001fdc <glcd_draw_char_xy+0x414>)
 8001f00:	7912      	ldrb	r2, [r2, #4]
 8001f02:	fb02 f303 	mul.w	r3, r2, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	7f3b      	ldrb	r3, [r7, #28]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	4413      	add	r3, r2
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	74fb      	strb	r3, [r7, #19]
#endif
				
				for (bit = 0; bit < 8; bit++) {
 8001f14:	2300      	movs	r3, #0
 8001f16:	76fb      	strb	r3, [r7, #27]
 8001f18:	e046      	b.n	8001fa8 <glcd_draw_char_xy+0x3e0>
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
 8001f1a:	79fa      	ldrb	r2, [r7, #7]
 8001f1c:	7f3b      	ldrb	r3, [r7, #28]
 8001f1e:	4413      	add	r3, r2
 8001f20:	2b7f      	cmp	r3, #127	; 0x7f
 8001f22:	dc07      	bgt.n	8001f34 <glcd_draw_char_xy+0x36c>
 8001f24:	79ba      	ldrb	r2, [r7, #6]
 8001f26:	7ffb      	ldrb	r3, [r7, #31]
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	441a      	add	r2, r3
 8001f2c:	7efb      	ldrb	r3, [r7, #27]
 8001f2e:	4413      	add	r3, r2
 8001f30:	2b3f      	cmp	r3, #63	; 0x3f
 8001f32:	dd01      	ble.n	8001f38 <glcd_draw_char_xy+0x370>
						/* Don't write past the dimensions of the LCD, skip the entire char */
						return 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	e04d      	b.n	8001fd4 <glcd_draw_char_xy+0x40c>
					}
					
					/* We should not write if the y bit exceeds font height */
					if ((j*8 + bit) >= font_current.height) {
 8001f38:	7ffb      	ldrb	r3, [r7, #31]
 8001f3a:	00da      	lsls	r2, r3, #3
 8001f3c:	7efb      	ldrb	r3, [r7, #27]
 8001f3e:	4413      	add	r3, r2
 8001f40:	4a26      	ldr	r2, [pc, #152]	; (8001fdc <glcd_draw_char_xy+0x414>)
 8001f42:	7952      	ldrb	r2, [r2, #5]
 8001f44:	4293      	cmp	r3, r2
 8001f46:	da2b      	bge.n	8001fa0 <glcd_draw_char_xy+0x3d8>
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
 8001f48:	7cfa      	ldrb	r2, [r7, #19]
 8001f4a:	7efb      	ldrb	r3, [r7, #27]
 8001f4c:	fa42 f303 	asr.w	r3, r2, r3
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d011      	beq.n	8001f7c <glcd_draw_char_xy+0x3b4>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
 8001f58:	79fa      	ldrb	r2, [r7, #7]
 8001f5a:	7f3b      	ldrb	r3, [r7, #28]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	b2d8      	uxtb	r0, r3
 8001f60:	7ffb      	ldrb	r3, [r7, #31]
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	79bb      	ldrb	r3, [r7, #6]
 8001f68:	4413      	add	r3, r2
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	7efb      	ldrb	r3, [r7, #27]
 8001f6e:	4413      	add	r3, r2
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2201      	movs	r2, #1
 8001f74:	4619      	mov	r1, r3
 8001f76:	f7fe fd31 	bl	80009dc <glcd_set_pixel>
 8001f7a:	e012      	b.n	8001fa2 <glcd_draw_char_xy+0x3da>
					} else {
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
 8001f7c:	79fa      	ldrb	r2, [r7, #7]
 8001f7e:	7f3b      	ldrb	r3, [r7, #28]
 8001f80:	4413      	add	r3, r2
 8001f82:	b2d8      	uxtb	r0, r3
 8001f84:	7ffb      	ldrb	r3, [r7, #31]
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	79bb      	ldrb	r3, [r7, #6]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	7efb      	ldrb	r3, [r7, #27]
 8001f92:	4413      	add	r3, r2
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2200      	movs	r2, #0
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f7fe fd1f 	bl	80009dc <glcd_set_pixel>
 8001f9e:	e000      	b.n	8001fa2 <glcd_draw_char_xy+0x3da>
						continue;
 8001fa0:	bf00      	nop
				for (bit = 0; bit < 8; bit++) {
 8001fa2:	7efb      	ldrb	r3, [r7, #27]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	76fb      	strb	r3, [r7, #27]
 8001fa8:	7efb      	ldrb	r3, [r7, #27]
 8001faa:	2b07      	cmp	r3, #7
 8001fac:	d9b5      	bls.n	8001f1a <glcd_draw_char_xy+0x352>
			for ( i = 0; i < var_width; i++ ) {
 8001fae:	7f3b      	ldrb	r3, [r7, #28]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	773b      	strb	r3, [r7, #28]
 8001fb4:	7f3a      	ldrb	r2, [r7, #28]
 8001fb6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d39e      	bcc.n	8001efc <glcd_draw_char_xy+0x334>
		for ( j = 0; j < bytes_high; j++ ) {
 8001fbe:	7ffb      	ldrb	r3, [r7, #31]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	77fb      	strb	r3, [r7, #31]
 8001fc4:	7ffa      	ldrb	r2, [r7, #31]
 8001fc6:	7ebb      	ldrb	r3, [r7, #26]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d394      	bcc.n	8001ef6 <glcd_draw_char_xy+0x32e>
					}
				}									
			} /* i */
		} /* j */
		
		return var_width; /* Number of columns written to display */
 8001fcc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001fd0:	e000      	b.n	8001fd4 <glcd_draw_char_xy+0x40c>
		
	} else {
		/* Don't recognise the font table */
		return 0;
 8001fd2:	2300      	movs	r3, #0
		
	}

}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3728      	adds	r7, #40	; 0x28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	200005d0 	.word	0x200005d0

08001fe0 <glcd_tiny_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_tiny_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	4608      	mov	r0, r1
 8001fea:	4611      	mov	r1, r2
 8001fec:	461a      	mov	r2, r3
 8001fee:	4603      	mov	r3, r0
 8001ff0:	70fb      	strb	r3, [r7, #3]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	70bb      	strb	r3, [r7, #2]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	707b      	strb	r3, [r7, #1]
	font_current.font_table = font_table;
 8001ffa:	4a0c      	ldr	r2, [pc, #48]	; (800202c <glcd_tiny_set_font+0x4c>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6013      	str	r3, [r2, #0]
	font_current.width = width;
 8002000:	4a0a      	ldr	r2, [pc, #40]	; (800202c <glcd_tiny_set_font+0x4c>)
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	7113      	strb	r3, [r2, #4]
	font_current.height = height;
 8002006:	4a09      	ldr	r2, [pc, #36]	; (800202c <glcd_tiny_set_font+0x4c>)
 8002008:	78bb      	ldrb	r3, [r7, #2]
 800200a:	7153      	strb	r3, [r2, #5]
	font_current.start_char = start_char;
 800200c:	4a07      	ldr	r2, [pc, #28]	; (800202c <glcd_tiny_set_font+0x4c>)
 800200e:	787b      	ldrb	r3, [r7, #1]
 8002010:	7193      	strb	r3, [r2, #6]
	font_current.end_char = end_char;
 8002012:	4a06      	ldr	r2, [pc, #24]	; (800202c <glcd_tiny_set_font+0x4c>)
 8002014:	7c3b      	ldrb	r3, [r7, #16]
 8002016:	71d3      	strb	r3, [r2, #7]
	font_current.table_type = STANG;
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <glcd_tiny_set_font+0x4c>)
 800201a:	2200      	movs	r2, #0
 800201c:	721a      	strb	r2, [r3, #8]
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	200005d0 	.word	0x200005d0

08002030 <glcd_tiny_draw_char_xy>:
{
	glcd_invert_area(0,line*8,GLCD_LCD_WIDTH-1,8);
}

void glcd_tiny_draw_char_xy(uint8_t x, uint8_t y, char c)
{
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
 800203a:	460b      	mov	r3, r1
 800203c:	71bb      	strb	r3, [r7, #6]
 800203e:	4613      	mov	r3, r2
 8002040:	717b      	strb	r3, [r7, #5]
	uint8_t dat;
	
	/* Only works for fonts < 8 bits in height */
	
	/* Check all important bounds requirements are okay */
	if ( (y >= GLCD_LCD_HEIGHT) || ((x+font_current.width) >= GLCD_LCD_WIDTH) || (font_current.height >= 8) || font_current.table_type != STANG) {
 8002042:	79bb      	ldrb	r3, [r7, #6]
 8002044:	2b3f      	cmp	r3, #63	; 0x3f
 8002046:	d864      	bhi.n	8002112 <glcd_tiny_draw_char_xy+0xe2>
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	4a34      	ldr	r2, [pc, #208]	; (800211c <glcd_tiny_draw_char_xy+0xec>)
 800204c:	7912      	ldrb	r2, [r2, #4]
 800204e:	4413      	add	r3, r2
 8002050:	2b7f      	cmp	r3, #127	; 0x7f
 8002052:	dc5e      	bgt.n	8002112 <glcd_tiny_draw_char_xy+0xe2>
 8002054:	4b31      	ldr	r3, [pc, #196]	; (800211c <glcd_tiny_draw_char_xy+0xec>)
 8002056:	795b      	ldrb	r3, [r3, #5]
 8002058:	2b07      	cmp	r3, #7
 800205a:	d85a      	bhi.n	8002112 <glcd_tiny_draw_char_xy+0xe2>
 800205c:	4b2f      	ldr	r3, [pc, #188]	; (800211c <glcd_tiny_draw_char_xy+0xec>)
 800205e:	7a1b      	ldrb	r3, [r3, #8]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d156      	bne.n	8002112 <glcd_tiny_draw_char_xy+0xe2>
		return;
	}		
	if (c < font_current.start_char || c > font_current.end_char) {
 8002064:	4b2d      	ldr	r3, [pc, #180]	; (800211c <glcd_tiny_draw_char_xy+0xec>)
 8002066:	799b      	ldrb	r3, [r3, #6]
 8002068:	797a      	ldrb	r2, [r7, #5]
 800206a:	429a      	cmp	r2, r3
 800206c:	d304      	bcc.n	8002078 <glcd_tiny_draw_char_xy+0x48>
 800206e:	4b2b      	ldr	r3, [pc, #172]	; (800211c <glcd_tiny_draw_char_xy+0xec>)
 8002070:	79db      	ldrb	r3, [r3, #7]
 8002072:	797a      	ldrb	r2, [r7, #5]
 8002074:	429a      	cmp	r2, r3
 8002076:	d901      	bls.n	800207c <glcd_tiny_draw_char_xy+0x4c>
		c = '.';
 8002078:	232e      	movs	r3, #46	; 0x2e
 800207a:	717b      	strb	r3, [r7, #5]
	}
	
	xvar = x;
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	73bb      	strb	r3, [r7, #14]
	
	for ( i = 0; i < font_current.width; i++ ) {
 8002080:	2300      	movs	r3, #0
 8002082:	73fb      	strb	r3, [r7, #15]
 8002084:	e030      	b.n	80020e8 <glcd_tiny_draw_char_xy+0xb8>
#if defined(GLCD_DEVICE_AVR8)			
		dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
		dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
 8002086:	4b25      	ldr	r3, [pc, #148]	; (800211c <glcd_tiny_draw_char_xy+0xec>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	797b      	ldrb	r3, [r7, #5]
 800208c:	4923      	ldr	r1, [pc, #140]	; (800211c <glcd_tiny_draw_char_xy+0xec>)
 800208e:	7989      	ldrb	r1, [r1, #6]
 8002090:	1a5b      	subs	r3, r3, r1
 8002092:	4922      	ldr	r1, [pc, #136]	; (800211c <glcd_tiny_draw_char_xy+0xec>)
 8002094:	7909      	ldrb	r1, [r1, #4]
 8002096:	fb01 f303 	mul.w	r3, r1, r3
 800209a:	4619      	mov	r1, r3
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	440b      	add	r3, r1
 80020a0:	4413      	add	r3, r2
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	733b      	strb	r3, [r7, #12]
#endif
		for (yvar = 0; yvar < font_current.height; yvar++) {
 80020a6:	2300      	movs	r3, #0
 80020a8:	737b      	strb	r3, [r7, #13]
 80020aa:	e012      	b.n	80020d2 <glcd_tiny_draw_char_xy+0xa2>
			glcd_set_pixel(xvar,y+yvar, (dat & (1<<yvar) ? 1 : 0) );
 80020ac:	79ba      	ldrb	r2, [r7, #6]
 80020ae:	7b7b      	ldrb	r3, [r7, #13]
 80020b0:	4413      	add	r3, r2
 80020b2:	b2d9      	uxtb	r1, r3
 80020b4:	7b3a      	ldrb	r2, [r7, #12]
 80020b6:	7b7b      	ldrb	r3, [r7, #13]
 80020b8:	fa42 f303 	asr.w	r3, r2, r3
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	7bbb      	ldrb	r3, [r7, #14]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fc88 	bl	80009dc <glcd_set_pixel>
		for (yvar = 0; yvar < font_current.height; yvar++) {
 80020cc:	7b7b      	ldrb	r3, [r7, #13]
 80020ce:	3301      	adds	r3, #1
 80020d0:	737b      	strb	r3, [r7, #13]
 80020d2:	4b12      	ldr	r3, [pc, #72]	; (800211c <glcd_tiny_draw_char_xy+0xec>)
 80020d4:	795b      	ldrb	r3, [r3, #5]
 80020d6:	7b7a      	ldrb	r2, [r7, #13]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d3e7      	bcc.n	80020ac <glcd_tiny_draw_char_xy+0x7c>
		}
		xvar++;
 80020dc:	7bbb      	ldrb	r3, [r7, #14]
 80020de:	3301      	adds	r3, #1
 80020e0:	73bb      	strb	r3, [r7, #14]
	for ( i = 0; i < font_current.width; i++ ) {
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	3301      	adds	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <glcd_tiny_draw_char_xy+0xec>)
 80020ea:	791b      	ldrb	r3, [r3, #4]
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d3c9      	bcc.n	8002086 <glcd_tiny_draw_char_xy+0x56>
	}
	
	glcd_update_bbox(x, y, x+font_current.width,y+font_current.height);
 80020f2:	4b0a      	ldr	r3, [pc, #40]	; (800211c <glcd_tiny_draw_char_xy+0xec>)
 80020f4:	791a      	ldrb	r2, [r3, #4]
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	4413      	add	r3, r2
 80020fa:	b2dc      	uxtb	r4, r3
 80020fc:	4b07      	ldr	r3, [pc, #28]	; (800211c <glcd_tiny_draw_char_xy+0xec>)
 80020fe:	795a      	ldrb	r2, [r3, #5]
 8002100:	79bb      	ldrb	r3, [r7, #6]
 8002102:	4413      	add	r3, r2
 8002104:	b2db      	uxtb	r3, r3
 8002106:	79b9      	ldrb	r1, [r7, #6]
 8002108:	79f8      	ldrb	r0, [r7, #7]
 800210a:	4622      	mov	r2, r4
 800210c:	f7fe fbb8 	bl	8000880 <glcd_update_bbox>
 8002110:	e000      	b.n	8002114 <glcd_tiny_draw_char_xy+0xe4>
		return;
 8002112:	bf00      	nop
	
}
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	bd90      	pop	{r4, r7, pc}
 800211a:	bf00      	nop
 800211c:	200005d0 	.word	0x200005d0

08002120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002158 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002124:	480d      	ldr	r0, [pc, #52]	; (800215c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002126:	490e      	ldr	r1, [pc, #56]	; (8002160 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002128:	4a0e      	ldr	r2, [pc, #56]	; (8002164 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800212a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800212c:	e002      	b.n	8002134 <LoopCopyDataInit>

0800212e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800212e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002132:	3304      	adds	r3, #4

08002134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002138:	d3f9      	bcc.n	800212e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800213a:	4a0b      	ldr	r2, [pc, #44]	; (8002168 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800213c:	4c0b      	ldr	r4, [pc, #44]	; (800216c <LoopFillZerobss+0x26>)
  movs r3, #0
 800213e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002140:	e001      	b.n	8002146 <LoopFillZerobss>

08002142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002144:	3204      	adds	r2, #4

08002146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002148:	d3fb      	bcc.n	8002142 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800214a:	f7ff fd03 	bl	8001b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800214e:	f005 f829 	bl	80071a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002152:	f7fe fd35 	bl	8000bc0 <main>
  bx  lr    
 8002156:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002158:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800215c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002160:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002164:	08008f78 	.word	0x08008f78
  ldr r2, =_sbss
 8002168:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800216c:	20005000 	.word	0x20005000

08002170 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002170:	e7fe      	b.n	8002170 <ADC_IRQHandler>
	...

08002174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002178:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <HAL_Init+0x40>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0d      	ldr	r2, [pc, #52]	; (80021b4 <HAL_Init+0x40>)
 800217e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002182:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_Init+0x40>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <HAL_Init+0x40>)
 800218a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800218e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <HAL_Init+0x40>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a07      	ldr	r2, [pc, #28]	; (80021b4 <HAL_Init+0x40>)
 8002196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800219c:	2003      	movs	r0, #3
 800219e:	f000 f8d8 	bl	8002352 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021a2:	200f      	movs	r0, #15
 80021a4:	f7ff fb96 	bl	80018d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a8:	f7ff fa96 	bl	80016d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40023c00 	.word	0x40023c00

080021b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <HAL_IncTick+0x20>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_IncTick+0x24>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4413      	add	r3, r2
 80021c8:	4a04      	ldr	r2, [pc, #16]	; (80021dc <HAL_IncTick+0x24>)
 80021ca:	6013      	str	r3, [r2, #0]
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	20000008 	.word	0x20000008
 80021dc:	200005dc 	.word	0x200005dc

080021e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return uwTick;
 80021e4:	4b03      	ldr	r3, [pc, #12]	; (80021f4 <HAL_GetTick+0x14>)
 80021e6:	681b      	ldr	r3, [r3, #0]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	200005dc 	.word	0x200005dc

080021f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002214:	4013      	ands	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222a:	4a04      	ldr	r2, [pc, #16]	; (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	60d3      	str	r3, [r2, #12]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002244:	4b04      	ldr	r3, [pc, #16]	; (8002258 <__NVIC_GetPriorityGrouping+0x18>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	0a1b      	lsrs	r3, r3, #8
 800224a:	f003 0307 	and.w	r3, r3, #7
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	2b00      	cmp	r3, #0
 800226c:	db0b      	blt.n	8002286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	f003 021f 	and.w	r2, r3, #31
 8002274:	4907      	ldr	r1, [pc, #28]	; (8002294 <__NVIC_EnableIRQ+0x38>)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	2001      	movs	r0, #1
 800227e:	fa00 f202 	lsl.w	r2, r0, r2
 8002282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000e100 	.word	0xe000e100

08002298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db0a      	blt.n	80022c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	490c      	ldr	r1, [pc, #48]	; (80022e4 <__NVIC_SetPriority+0x4c>)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	0112      	lsls	r2, r2, #4
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	440b      	add	r3, r1
 80022bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c0:	e00a      	b.n	80022d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4908      	ldr	r1, [pc, #32]	; (80022e8 <__NVIC_SetPriority+0x50>)
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	3b04      	subs	r3, #4
 80022d0:	0112      	lsls	r2, r2, #4
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	440b      	add	r3, r1
 80022d6:	761a      	strb	r2, [r3, #24]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000e100 	.word	0xe000e100
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	; 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f1c3 0307 	rsb	r3, r3, #7
 8002306:	2b04      	cmp	r3, #4
 8002308:	bf28      	it	cs
 800230a:	2304      	movcs	r3, #4
 800230c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3304      	adds	r3, #4
 8002312:	2b06      	cmp	r3, #6
 8002314:	d902      	bls.n	800231c <NVIC_EncodePriority+0x30>
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3b03      	subs	r3, #3
 800231a:	e000      	b.n	800231e <NVIC_EncodePriority+0x32>
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	f04f 32ff 	mov.w	r2, #4294967295
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43da      	mvns	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	401a      	ands	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002334:	f04f 31ff 	mov.w	r1, #4294967295
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	43d9      	mvns	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	4313      	orrs	r3, r2
         );
}
 8002346:	4618      	mov	r0, r3
 8002348:	3724      	adds	r7, #36	; 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff ff4c 	bl	80021f8 <__NVIC_SetPriorityGrouping>
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800237a:	f7ff ff61 	bl	8002240 <__NVIC_GetPriorityGrouping>
 800237e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	68b9      	ldr	r1, [r7, #8]
 8002384:	6978      	ldr	r0, [r7, #20]
 8002386:	f7ff ffb1 	bl	80022ec <NVIC_EncodePriority>
 800238a:	4602      	mov	r2, r0
 800238c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002390:	4611      	mov	r1, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff ff80 	bl	8002298 <__NVIC_SetPriority>
}
 8002398:	bf00      	nop
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff ff54 	bl	800225c <__NVIC_EnableIRQ>
}
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023bc:	b480      	push	{r7}
 80023be:	b089      	sub	sp, #36	; 0x24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
 80023d6:	e165      	b.n	80026a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023d8:	2201      	movs	r2, #1
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	f040 8154 	bne.w	800269e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d005      	beq.n	800240e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800240a:	2b02      	cmp	r3, #2
 800240c:	d130      	bne.n	8002470 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	2203      	movs	r2, #3
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002444:	2201      	movs	r2, #1
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	f003 0201 	and.w	r2, r3, #1
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	2b03      	cmp	r3, #3
 800247a:	d017      	beq.n	80024ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	2203      	movs	r2, #3
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d123      	bne.n	8002500 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	08da      	lsrs	r2, r3, #3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3208      	adds	r2, #8
 80024c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	220f      	movs	r2, #15
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	08da      	lsrs	r2, r3, #3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3208      	adds	r2, #8
 80024fa:	69b9      	ldr	r1, [r7, #24]
 80024fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	2203      	movs	r2, #3
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0203 	and.w	r2, r3, #3
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80ae 	beq.w	800269e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	4b5d      	ldr	r3, [pc, #372]	; (80026bc <HAL_GPIO_Init+0x300>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	4a5c      	ldr	r2, [pc, #368]	; (80026bc <HAL_GPIO_Init+0x300>)
 800254c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002550:	6453      	str	r3, [r2, #68]	; 0x44
 8002552:	4b5a      	ldr	r3, [pc, #360]	; (80026bc <HAL_GPIO_Init+0x300>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800255e:	4a58      	ldr	r2, [pc, #352]	; (80026c0 <HAL_GPIO_Init+0x304>)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	089b      	lsrs	r3, r3, #2
 8002564:	3302      	adds	r3, #2
 8002566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	220f      	movs	r2, #15
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a4f      	ldr	r2, [pc, #316]	; (80026c4 <HAL_GPIO_Init+0x308>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d025      	beq.n	80025d6 <HAL_GPIO_Init+0x21a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4e      	ldr	r2, [pc, #312]	; (80026c8 <HAL_GPIO_Init+0x30c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d01f      	beq.n	80025d2 <HAL_GPIO_Init+0x216>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4d      	ldr	r2, [pc, #308]	; (80026cc <HAL_GPIO_Init+0x310>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d019      	beq.n	80025ce <HAL_GPIO_Init+0x212>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a4c      	ldr	r2, [pc, #304]	; (80026d0 <HAL_GPIO_Init+0x314>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d013      	beq.n	80025ca <HAL_GPIO_Init+0x20e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4b      	ldr	r2, [pc, #300]	; (80026d4 <HAL_GPIO_Init+0x318>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d00d      	beq.n	80025c6 <HAL_GPIO_Init+0x20a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a4a      	ldr	r2, [pc, #296]	; (80026d8 <HAL_GPIO_Init+0x31c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d007      	beq.n	80025c2 <HAL_GPIO_Init+0x206>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a49      	ldr	r2, [pc, #292]	; (80026dc <HAL_GPIO_Init+0x320>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d101      	bne.n	80025be <HAL_GPIO_Init+0x202>
 80025ba:	2306      	movs	r3, #6
 80025bc:	e00c      	b.n	80025d8 <HAL_GPIO_Init+0x21c>
 80025be:	2307      	movs	r3, #7
 80025c0:	e00a      	b.n	80025d8 <HAL_GPIO_Init+0x21c>
 80025c2:	2305      	movs	r3, #5
 80025c4:	e008      	b.n	80025d8 <HAL_GPIO_Init+0x21c>
 80025c6:	2304      	movs	r3, #4
 80025c8:	e006      	b.n	80025d8 <HAL_GPIO_Init+0x21c>
 80025ca:	2303      	movs	r3, #3
 80025cc:	e004      	b.n	80025d8 <HAL_GPIO_Init+0x21c>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e002      	b.n	80025d8 <HAL_GPIO_Init+0x21c>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_GPIO_Init+0x21c>
 80025d6:	2300      	movs	r3, #0
 80025d8:	69fa      	ldr	r2, [r7, #28]
 80025da:	f002 0203 	and.w	r2, r2, #3
 80025de:	0092      	lsls	r2, r2, #2
 80025e0:	4093      	lsls	r3, r2
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025e8:	4935      	ldr	r1, [pc, #212]	; (80026c0 <HAL_GPIO_Init+0x304>)
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	089b      	lsrs	r3, r3, #2
 80025ee:	3302      	adds	r3, #2
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025f6:	4b3a      	ldr	r3, [pc, #232]	; (80026e0 <HAL_GPIO_Init+0x324>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	43db      	mvns	r3, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4013      	ands	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800261a:	4a31      	ldr	r2, [pc, #196]	; (80026e0 <HAL_GPIO_Init+0x324>)
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002620:	4b2f      	ldr	r3, [pc, #188]	; (80026e0 <HAL_GPIO_Init+0x324>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002644:	4a26      	ldr	r2, [pc, #152]	; (80026e0 <HAL_GPIO_Init+0x324>)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800264a:	4b25      	ldr	r3, [pc, #148]	; (80026e0 <HAL_GPIO_Init+0x324>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800266e:	4a1c      	ldr	r2, [pc, #112]	; (80026e0 <HAL_GPIO_Init+0x324>)
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002674:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <HAL_GPIO_Init+0x324>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002698:	4a11      	ldr	r2, [pc, #68]	; (80026e0 <HAL_GPIO_Init+0x324>)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3301      	adds	r3, #1
 80026a2:	61fb      	str	r3, [r7, #28]
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	2b0f      	cmp	r3, #15
 80026a8:	f67f ae96 	bls.w	80023d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026ac:	bf00      	nop
 80026ae:	bf00      	nop
 80026b0:	3724      	adds	r7, #36	; 0x24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40013800 	.word	0x40013800
 80026c4:	40020000 	.word	0x40020000
 80026c8:	40020400 	.word	0x40020400
 80026cc:	40020800 	.word	0x40020800
 80026d0:	40020c00 	.word	0x40020c00
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40021400 	.word	0x40021400
 80026dc:	40021800 	.word	0x40021800
 80026e0:	40013c00 	.word	0x40013c00

080026e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	807b      	strh	r3, [r7, #2]
 80026f0:	4613      	mov	r3, r2
 80026f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f4:	787b      	ldrb	r3, [r7, #1]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026fa:	887a      	ldrh	r2, [r7, #2]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002700:	e003      	b.n	800270a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002702:	887b      	ldrh	r3, [r7, #2]
 8002704:	041a      	lsls	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	619a      	str	r2, [r3, #24]
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0cc      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800272c:	4b68      	ldr	r3, [pc, #416]	; (80028d0 <HAL_RCC_ClockConfig+0x1b8>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 030f 	and.w	r3, r3, #15
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d90c      	bls.n	8002754 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273a:	4b65      	ldr	r3, [pc, #404]	; (80028d0 <HAL_RCC_ClockConfig+0x1b8>)
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002742:	4b63      	ldr	r3, [pc, #396]	; (80028d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e0b8      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d020      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800276c:	4b59      	ldr	r3, [pc, #356]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	4a58      	ldr	r2, [pc, #352]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002776:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002784:	4b53      	ldr	r3, [pc, #332]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	4a52      	ldr	r2, [pc, #328]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800278e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002790:	4b50      	ldr	r3, [pc, #320]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	494d      	ldr	r1, [pc, #308]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d044      	beq.n	8002838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d107      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b6:	4b47      	ldr	r3, [pc, #284]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d119      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e07f      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d003      	beq.n	80027d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d107      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d6:	4b3f      	ldr	r3, [pc, #252]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e06f      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e6:	4b3b      	ldr	r3, [pc, #236]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e067      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f6:	4b37      	ldr	r3, [pc, #220]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f023 0203 	bic.w	r2, r3, #3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	4934      	ldr	r1, [pc, #208]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	4313      	orrs	r3, r2
 8002806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002808:	f7ff fcea 	bl	80021e0 <HAL_GetTick>
 800280c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280e:	e00a      	b.n	8002826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002810:	f7ff fce6 	bl	80021e0 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	; 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e04f      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002826:	4b2b      	ldr	r3, [pc, #172]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 020c 	and.w	r2, r3, #12
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	429a      	cmp	r2, r3
 8002836:	d1eb      	bne.n	8002810 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002838:	4b25      	ldr	r3, [pc, #148]	; (80028d0 <HAL_RCC_ClockConfig+0x1b8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 030f 	and.w	r3, r3, #15
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d20c      	bcs.n	8002860 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002846:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800284e:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d001      	beq.n	8002860 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e032      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800286c:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4916      	ldr	r1, [pc, #88]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	4313      	orrs	r3, r2
 800287c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d009      	beq.n	800289e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800288a:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	490e      	ldr	r1, [pc, #56]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	4313      	orrs	r3, r2
 800289c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800289e:	f000 f887 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 80028a2:	4602      	mov	r2, r0
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	490a      	ldr	r1, [pc, #40]	; (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 80028b0:	5ccb      	ldrb	r3, [r1, r3]
 80028b2:	fa22 f303 	lsr.w	r3, r2, r3
 80028b6:	4a09      	ldr	r2, [pc, #36]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <HAL_RCC_ClockConfig+0x1c8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff f808 	bl	80018d4 <HAL_InitTick>

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40023c00 	.word	0x40023c00
 80028d4:	40023800 	.word	0x40023800
 80028d8:	08008e08 	.word	0x08008e08
 80028dc:	20000000 	.word	0x20000000
 80028e0:	20000004 	.word	0x20000004

080028e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028e8:	4b03      	ldr	r3, [pc, #12]	; (80028f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028ea:	681b      	ldr	r3, [r3, #0]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	20000000 	.word	0x20000000

080028fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002900:	f7ff fff0 	bl	80028e4 <HAL_RCC_GetHCLKFreq>
 8002904:	4602      	mov	r2, r0
 8002906:	4b05      	ldr	r3, [pc, #20]	; (800291c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	0a9b      	lsrs	r3, r3, #10
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	4903      	ldr	r1, [pc, #12]	; (8002920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002918:	4618      	mov	r0, r3
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40023800 	.word	0x40023800
 8002920:	08008e18 	.word	0x08008e18

08002924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002928:	f7ff ffdc 	bl	80028e4 <HAL_RCC_GetHCLKFreq>
 800292c:	4602      	mov	r2, r0
 800292e:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	0b5b      	lsrs	r3, r3, #13
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	4903      	ldr	r1, [pc, #12]	; (8002948 <HAL_RCC_GetPCLK2Freq+0x24>)
 800293a:	5ccb      	ldrb	r3, [r1, r3]
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002940:	4618      	mov	r0, r3
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40023800 	.word	0x40023800
 8002948:	08008e18 	.word	0x08008e18

0800294c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	220f      	movs	r2, #15
 800295a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800295c:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <HAL_RCC_GetClockConfig+0x5c>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 0203 	and.w	r2, r3, #3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002968:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <HAL_RCC_GetClockConfig+0x5c>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002974:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002980:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	08db      	lsrs	r3, r3, #3
 8002986:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800298e:	4b07      	ldr	r3, [pc, #28]	; (80029ac <HAL_RCC_GetClockConfig+0x60>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 020f 	and.w	r2, r3, #15
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	601a      	str	r2, [r3, #0]
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40023c00 	.word	0x40023c00

080029b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029b4:	b0ae      	sub	sp, #184	; 0xb8
 80029b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80029be:	2300      	movs	r3, #0
 80029c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029d6:	4bcb      	ldr	r3, [pc, #812]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x354>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	2b0c      	cmp	r3, #12
 80029e0:	f200 8206 	bhi.w	8002df0 <HAL_RCC_GetSysClockFreq+0x440>
 80029e4:	a201      	add	r2, pc, #4	; (adr r2, 80029ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80029e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ea:	bf00      	nop
 80029ec:	08002a21 	.word	0x08002a21
 80029f0:	08002df1 	.word	0x08002df1
 80029f4:	08002df1 	.word	0x08002df1
 80029f8:	08002df1 	.word	0x08002df1
 80029fc:	08002a29 	.word	0x08002a29
 8002a00:	08002df1 	.word	0x08002df1
 8002a04:	08002df1 	.word	0x08002df1
 8002a08:	08002df1 	.word	0x08002df1
 8002a0c:	08002a31 	.word	0x08002a31
 8002a10:	08002df1 	.word	0x08002df1
 8002a14:	08002df1 	.word	0x08002df1
 8002a18:	08002df1 	.word	0x08002df1
 8002a1c:	08002c21 	.word	0x08002c21
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a20:	4bb9      	ldr	r3, [pc, #740]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002a26:	e1e7      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a28:	4bb8      	ldr	r3, [pc, #736]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a2e:	e1e3      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a30:	4bb4      	ldr	r3, [pc, #720]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a3c:	4bb1      	ldr	r3, [pc, #708]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d071      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a48:	4bae      	ldr	r3, [pc, #696]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	099b      	lsrs	r3, r3, #6
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a54:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002a58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a6e:	4622      	mov	r2, r4
 8002a70:	462b      	mov	r3, r5
 8002a72:	f04f 0000 	mov.w	r0, #0
 8002a76:	f04f 0100 	mov.w	r1, #0
 8002a7a:	0159      	lsls	r1, r3, #5
 8002a7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a80:	0150      	lsls	r0, r2, #5
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4621      	mov	r1, r4
 8002a88:	1a51      	subs	r1, r2, r1
 8002a8a:	6439      	str	r1, [r7, #64]	; 0x40
 8002a8c:	4629      	mov	r1, r5
 8002a8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a92:	647b      	str	r3, [r7, #68]	; 0x44
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002aa0:	4649      	mov	r1, r9
 8002aa2:	018b      	lsls	r3, r1, #6
 8002aa4:	4641      	mov	r1, r8
 8002aa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aaa:	4641      	mov	r1, r8
 8002aac:	018a      	lsls	r2, r1, #6
 8002aae:	4641      	mov	r1, r8
 8002ab0:	1a51      	subs	r1, r2, r1
 8002ab2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ab4:	4649      	mov	r1, r9
 8002ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002ac8:	4649      	mov	r1, r9
 8002aca:	00cb      	lsls	r3, r1, #3
 8002acc:	4641      	mov	r1, r8
 8002ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ad2:	4641      	mov	r1, r8
 8002ad4:	00ca      	lsls	r2, r1, #3
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4603      	mov	r3, r0
 8002adc:	4622      	mov	r2, r4
 8002ade:	189b      	adds	r3, r3, r2
 8002ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ae2:	462b      	mov	r3, r5
 8002ae4:	460a      	mov	r2, r1
 8002ae6:	eb42 0303 	adc.w	r3, r2, r3
 8002aea:	637b      	str	r3, [r7, #52]	; 0x34
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002af8:	4629      	mov	r1, r5
 8002afa:	024b      	lsls	r3, r1, #9
 8002afc:	4621      	mov	r1, r4
 8002afe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b02:	4621      	mov	r1, r4
 8002b04:	024a      	lsls	r2, r1, #9
 8002b06:	4610      	mov	r0, r2
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b18:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002b1c:	f7fd fbc8 	bl	80002b0 <__aeabi_uldivmod>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4613      	mov	r3, r2
 8002b26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b2a:	e067      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b2c:	4b75      	ldr	r3, [pc, #468]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	099b      	lsrs	r3, r3, #6
 8002b32:	2200      	movs	r2, #0
 8002b34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b38:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002b3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b44:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b46:	2300      	movs	r3, #0
 8002b48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b4a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002b4e:	4622      	mov	r2, r4
 8002b50:	462b      	mov	r3, r5
 8002b52:	f04f 0000 	mov.w	r0, #0
 8002b56:	f04f 0100 	mov.w	r1, #0
 8002b5a:	0159      	lsls	r1, r3, #5
 8002b5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b60:	0150      	lsls	r0, r2, #5
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4621      	mov	r1, r4
 8002b68:	1a51      	subs	r1, r2, r1
 8002b6a:	62b9      	str	r1, [r7, #40]	; 0x28
 8002b6c:	4629      	mov	r1, r5
 8002b6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002b80:	4649      	mov	r1, r9
 8002b82:	018b      	lsls	r3, r1, #6
 8002b84:	4641      	mov	r1, r8
 8002b86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b8a:	4641      	mov	r1, r8
 8002b8c:	018a      	lsls	r2, r1, #6
 8002b8e:	4641      	mov	r1, r8
 8002b90:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b94:	4649      	mov	r1, r9
 8002b96:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ba6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002baa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bae:	4692      	mov	sl, r2
 8002bb0:	469b      	mov	fp, r3
 8002bb2:	4623      	mov	r3, r4
 8002bb4:	eb1a 0303 	adds.w	r3, sl, r3
 8002bb8:	623b      	str	r3, [r7, #32]
 8002bba:	462b      	mov	r3, r5
 8002bbc:	eb4b 0303 	adc.w	r3, fp, r3
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002bce:	4629      	mov	r1, r5
 8002bd0:	028b      	lsls	r3, r1, #10
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bd8:	4621      	mov	r1, r4
 8002bda:	028a      	lsls	r2, r1, #10
 8002bdc:	4610      	mov	r0, r2
 8002bde:	4619      	mov	r1, r3
 8002be0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002be4:	2200      	movs	r2, #0
 8002be6:	673b      	str	r3, [r7, #112]	; 0x70
 8002be8:	677a      	str	r2, [r7, #116]	; 0x74
 8002bea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002bee:	f7fd fb5f 	bl	80002b0 <__aeabi_uldivmod>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bfc:	4b41      	ldr	r3, [pc, #260]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	0c1b      	lsrs	r3, r3, #16
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	3301      	adds	r3, #1
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002c0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c1e:	e0eb      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c20:	4b38      	ldr	r3, [pc, #224]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c2c:	4b35      	ldr	r3, [pc, #212]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d06b      	beq.n	8002d10 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c38:	4b32      	ldr	r3, [pc, #200]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	099b      	lsrs	r3, r3, #6
 8002c3e:	2200      	movs	r2, #0
 8002c40:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c4a:	663b      	str	r3, [r7, #96]	; 0x60
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	667b      	str	r3, [r7, #100]	; 0x64
 8002c50:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002c54:	4622      	mov	r2, r4
 8002c56:	462b      	mov	r3, r5
 8002c58:	f04f 0000 	mov.w	r0, #0
 8002c5c:	f04f 0100 	mov.w	r1, #0
 8002c60:	0159      	lsls	r1, r3, #5
 8002c62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c66:	0150      	lsls	r0, r2, #5
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	1a51      	subs	r1, r2, r1
 8002c70:	61b9      	str	r1, [r7, #24]
 8002c72:	4629      	mov	r1, r5
 8002c74:	eb63 0301 	sbc.w	r3, r3, r1
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002c86:	4659      	mov	r1, fp
 8002c88:	018b      	lsls	r3, r1, #6
 8002c8a:	4651      	mov	r1, sl
 8002c8c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c90:	4651      	mov	r1, sl
 8002c92:	018a      	lsls	r2, r1, #6
 8002c94:	4651      	mov	r1, sl
 8002c96:	ebb2 0801 	subs.w	r8, r2, r1
 8002c9a:	4659      	mov	r1, fp
 8002c9c:	eb63 0901 	sbc.w	r9, r3, r1
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cb4:	4690      	mov	r8, r2
 8002cb6:	4699      	mov	r9, r3
 8002cb8:	4623      	mov	r3, r4
 8002cba:	eb18 0303 	adds.w	r3, r8, r3
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	462b      	mov	r3, r5
 8002cc2:	eb49 0303 	adc.w	r3, r9, r3
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	024b      	lsls	r3, r1, #9
 8002cd8:	4621      	mov	r1, r4
 8002cda:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cde:	4621      	mov	r1, r4
 8002ce0:	024a      	lsls	r2, r1, #9
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cea:	2200      	movs	r2, #0
 8002cec:	65bb      	str	r3, [r7, #88]	; 0x58
 8002cee:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002cf0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002cf4:	f7fd fadc 	bl	80002b0 <__aeabi_uldivmod>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d02:	e065      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x420>
 8002d04:	40023800 	.word	0x40023800
 8002d08:	00f42400 	.word	0x00f42400
 8002d0c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d10:	4b3d      	ldr	r3, [pc, #244]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	099b      	lsrs	r3, r3, #6
 8002d16:	2200      	movs	r2, #0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d20:	653b      	str	r3, [r7, #80]	; 0x50
 8002d22:	2300      	movs	r3, #0
 8002d24:	657b      	str	r3, [r7, #84]	; 0x54
 8002d26:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002d2a:	4642      	mov	r2, r8
 8002d2c:	464b      	mov	r3, r9
 8002d2e:	f04f 0000 	mov.w	r0, #0
 8002d32:	f04f 0100 	mov.w	r1, #0
 8002d36:	0159      	lsls	r1, r3, #5
 8002d38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d3c:	0150      	lsls	r0, r2, #5
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4641      	mov	r1, r8
 8002d44:	1a51      	subs	r1, r2, r1
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	4649      	mov	r1, r9
 8002d4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002d5c:	4659      	mov	r1, fp
 8002d5e:	018b      	lsls	r3, r1, #6
 8002d60:	4651      	mov	r1, sl
 8002d62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d66:	4651      	mov	r1, sl
 8002d68:	018a      	lsls	r2, r1, #6
 8002d6a:	4651      	mov	r1, sl
 8002d6c:	1a54      	subs	r4, r2, r1
 8002d6e:	4659      	mov	r1, fp
 8002d70:	eb63 0501 	sbc.w	r5, r3, r1
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	00eb      	lsls	r3, r5, #3
 8002d7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d82:	00e2      	lsls	r2, r4, #3
 8002d84:	4614      	mov	r4, r2
 8002d86:	461d      	mov	r5, r3
 8002d88:	4643      	mov	r3, r8
 8002d8a:	18e3      	adds	r3, r4, r3
 8002d8c:	603b      	str	r3, [r7, #0]
 8002d8e:	464b      	mov	r3, r9
 8002d90:	eb45 0303 	adc.w	r3, r5, r3
 8002d94:	607b      	str	r3, [r7, #4]
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002da2:	4629      	mov	r1, r5
 8002da4:	028b      	lsls	r3, r1, #10
 8002da6:	4621      	mov	r1, r4
 8002da8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dac:	4621      	mov	r1, r4
 8002dae:	028a      	lsls	r2, r1, #10
 8002db0:	4610      	mov	r0, r2
 8002db2:	4619      	mov	r1, r3
 8002db4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002db8:	2200      	movs	r2, #0
 8002dba:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dbc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002dbe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002dc2:	f7fd fa75 	bl	80002b0 <__aeabi_uldivmod>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4613      	mov	r3, r2
 8002dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002dd0:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x458>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	0f1b      	lsrs	r3, r3, #28
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002dde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002de2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002dee:	e003      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002df0:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002df2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002df6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002df8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	37b8      	adds	r7, #184	; 0xb8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	00f42400 	.word	0x00f42400

08002e10 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e28d      	b.n	800333e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 8083 	beq.w	8002f36 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e30:	4b94      	ldr	r3, [pc, #592]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 030c 	and.w	r3, r3, #12
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d019      	beq.n	8002e70 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e3c:	4b91      	ldr	r3, [pc, #580]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d106      	bne.n	8002e56 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e48:	4b8e      	ldr	r3, [pc, #568]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e54:	d00c      	beq.n	8002e70 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e56:	4b8b      	ldr	r3, [pc, #556]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e5e:	2b0c      	cmp	r3, #12
 8002e60:	d112      	bne.n	8002e88 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e62:	4b88      	ldr	r3, [pc, #544]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e6e:	d10b      	bne.n	8002e88 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e70:	4b84      	ldr	r3, [pc, #528]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d05b      	beq.n	8002f34 <HAL_RCC_OscConfig+0x124>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d157      	bne.n	8002f34 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e25a      	b.n	800333e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e90:	d106      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x90>
 8002e92:	4b7c      	ldr	r3, [pc, #496]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a7b      	ldr	r2, [pc, #492]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	e01d      	b.n	8002edc <HAL_RCC_OscConfig+0xcc>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea8:	d10c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0xb4>
 8002eaa:	4b76      	ldr	r3, [pc, #472]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a75      	ldr	r2, [pc, #468]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	4b73      	ldr	r3, [pc, #460]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a72      	ldr	r2, [pc, #456]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	e00b      	b.n	8002edc <HAL_RCC_OscConfig+0xcc>
 8002ec4:	4b6f      	ldr	r3, [pc, #444]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a6e      	ldr	r2, [pc, #440]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ece:	6013      	str	r3, [r2, #0]
 8002ed0:	4b6c      	ldr	r3, [pc, #432]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a6b      	ldr	r2, [pc, #428]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d013      	beq.n	8002f0c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee4:	f7ff f97c 	bl	80021e0 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eec:	f7ff f978 	bl	80021e0 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b64      	cmp	r3, #100	; 0x64
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e21f      	b.n	800333e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efe:	4b61      	ldr	r3, [pc, #388]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f0      	beq.n	8002eec <HAL_RCC_OscConfig+0xdc>
 8002f0a:	e014      	b.n	8002f36 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0c:	f7ff f968 	bl	80021e0 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f14:	f7ff f964 	bl	80021e0 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b64      	cmp	r3, #100	; 0x64
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e20b      	b.n	800333e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f26:	4b57      	ldr	r3, [pc, #348]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f0      	bne.n	8002f14 <HAL_RCC_OscConfig+0x104>
 8002f32:	e000      	b.n	8002f36 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d06f      	beq.n	8003022 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f42:	4b50      	ldr	r3, [pc, #320]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d017      	beq.n	8002f7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f4e:	4b4d      	ldr	r3, [pc, #308]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d105      	bne.n	8002f66 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f5a:	4b4a      	ldr	r3, [pc, #296]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00b      	beq.n	8002f7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f66:	4b47      	ldr	r3, [pc, #284]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f6e:	2b0c      	cmp	r3, #12
 8002f70:	d11c      	bne.n	8002fac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f72:	4b44      	ldr	r3, [pc, #272]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d116      	bne.n	8002fac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7e:	4b41      	ldr	r3, [pc, #260]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d005      	beq.n	8002f96 <HAL_RCC_OscConfig+0x186>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d001      	beq.n	8002f96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e1d3      	b.n	800333e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f96:	4b3b      	ldr	r3, [pc, #236]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	4937      	ldr	r1, [pc, #220]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002faa:	e03a      	b.n	8003022 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d020      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fb4:	4b34      	ldr	r3, [pc, #208]	; (8003088 <HAL_RCC_OscConfig+0x278>)
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fba:	f7ff f911 	bl	80021e0 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fc2:	f7ff f90d 	bl	80021e0 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e1b4      	b.n	800333e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd4:	4b2b      	ldr	r3, [pc, #172]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0f0      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe0:	4b28      	ldr	r3, [pc, #160]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4925      	ldr	r1, [pc, #148]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	600b      	str	r3, [r1, #0]
 8002ff4:	e015      	b.n	8003022 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ff6:	4b24      	ldr	r3, [pc, #144]	; (8003088 <HAL_RCC_OscConfig+0x278>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffc:	f7ff f8f0 	bl	80021e0 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003004:	f7ff f8ec 	bl	80021e0 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e193      	b.n	800333e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003016:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d036      	beq.n	800309c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d016      	beq.n	8003064 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003036:	4b15      	ldr	r3, [pc, #84]	; (800308c <HAL_RCC_OscConfig+0x27c>)
 8003038:	2201      	movs	r2, #1
 800303a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303c:	f7ff f8d0 	bl	80021e0 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003044:	f7ff f8cc 	bl	80021e0 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e173      	b.n	800333e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003056:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <HAL_RCC_OscConfig+0x274>)
 8003058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0x234>
 8003062:	e01b      	b.n	800309c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003064:	4b09      	ldr	r3, [pc, #36]	; (800308c <HAL_RCC_OscConfig+0x27c>)
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306a:	f7ff f8b9 	bl	80021e0 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003070:	e00e      	b.n	8003090 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003072:	f7ff f8b5 	bl	80021e0 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d907      	bls.n	8003090 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e15c      	b.n	800333e <HAL_RCC_OscConfig+0x52e>
 8003084:	40023800 	.word	0x40023800
 8003088:	42470000 	.word	0x42470000
 800308c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003090:	4b8a      	ldr	r3, [pc, #552]	; (80032bc <HAL_RCC_OscConfig+0x4ac>)
 8003092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1ea      	bne.n	8003072 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 8097 	beq.w	80031d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030aa:	2300      	movs	r3, #0
 80030ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ae:	4b83      	ldr	r3, [pc, #524]	; (80032bc <HAL_RCC_OscConfig+0x4ac>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10f      	bne.n	80030da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	4b7f      	ldr	r3, [pc, #508]	; (80032bc <HAL_RCC_OscConfig+0x4ac>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	4a7e      	ldr	r2, [pc, #504]	; (80032bc <HAL_RCC_OscConfig+0x4ac>)
 80030c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ca:	4b7c      	ldr	r3, [pc, #496]	; (80032bc <HAL_RCC_OscConfig+0x4ac>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d6:	2301      	movs	r3, #1
 80030d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030da:	4b79      	ldr	r3, [pc, #484]	; (80032c0 <HAL_RCC_OscConfig+0x4b0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d118      	bne.n	8003118 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030e6:	4b76      	ldr	r3, [pc, #472]	; (80032c0 <HAL_RCC_OscConfig+0x4b0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a75      	ldr	r2, [pc, #468]	; (80032c0 <HAL_RCC_OscConfig+0x4b0>)
 80030ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030f2:	f7ff f875 	bl	80021e0 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030fa:	f7ff f871 	bl	80021e0 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e118      	b.n	800333e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310c:	4b6c      	ldr	r3, [pc, #432]	; (80032c0 <HAL_RCC_OscConfig+0x4b0>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d106      	bne.n	800312e <HAL_RCC_OscConfig+0x31e>
 8003120:	4b66      	ldr	r3, [pc, #408]	; (80032bc <HAL_RCC_OscConfig+0x4ac>)
 8003122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003124:	4a65      	ldr	r2, [pc, #404]	; (80032bc <HAL_RCC_OscConfig+0x4ac>)
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	6713      	str	r3, [r2, #112]	; 0x70
 800312c:	e01c      	b.n	8003168 <HAL_RCC_OscConfig+0x358>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b05      	cmp	r3, #5
 8003134:	d10c      	bne.n	8003150 <HAL_RCC_OscConfig+0x340>
 8003136:	4b61      	ldr	r3, [pc, #388]	; (80032bc <HAL_RCC_OscConfig+0x4ac>)
 8003138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313a:	4a60      	ldr	r2, [pc, #384]	; (80032bc <HAL_RCC_OscConfig+0x4ac>)
 800313c:	f043 0304 	orr.w	r3, r3, #4
 8003140:	6713      	str	r3, [r2, #112]	; 0x70
 8003142:	4b5e      	ldr	r3, [pc, #376]	; (80032bc <HAL_RCC_OscConfig+0x4ac>)
 8003144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003146:	4a5d      	ldr	r2, [pc, #372]	; (80032bc <HAL_RCC_OscConfig+0x4ac>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	6713      	str	r3, [r2, #112]	; 0x70
 800314e:	e00b      	b.n	8003168 <HAL_RCC_OscConfig+0x358>
 8003150:	4b5a      	ldr	r3, [pc, #360]	; (80032bc <HAL_RCC_OscConfig+0x4ac>)
 8003152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003154:	4a59      	ldr	r2, [pc, #356]	; (80032bc <HAL_RCC_OscConfig+0x4ac>)
 8003156:	f023 0301 	bic.w	r3, r3, #1
 800315a:	6713      	str	r3, [r2, #112]	; 0x70
 800315c:	4b57      	ldr	r3, [pc, #348]	; (80032bc <HAL_RCC_OscConfig+0x4ac>)
 800315e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003160:	4a56      	ldr	r2, [pc, #344]	; (80032bc <HAL_RCC_OscConfig+0x4ac>)
 8003162:	f023 0304 	bic.w	r3, r3, #4
 8003166:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d015      	beq.n	800319c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003170:	f7ff f836 	bl	80021e0 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003176:	e00a      	b.n	800318e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003178:	f7ff f832 	bl	80021e0 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	f241 3288 	movw	r2, #5000	; 0x1388
 8003186:	4293      	cmp	r3, r2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e0d7      	b.n	800333e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318e:	4b4b      	ldr	r3, [pc, #300]	; (80032bc <HAL_RCC_OscConfig+0x4ac>)
 8003190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0ee      	beq.n	8003178 <HAL_RCC_OscConfig+0x368>
 800319a:	e014      	b.n	80031c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319c:	f7ff f820 	bl	80021e0 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a2:	e00a      	b.n	80031ba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a4:	f7ff f81c 	bl	80021e0 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e0c1      	b.n	800333e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ba:	4b40      	ldr	r3, [pc, #256]	; (80032bc <HAL_RCC_OscConfig+0x4ac>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1ee      	bne.n	80031a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031c6:	7dfb      	ldrb	r3, [r7, #23]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d105      	bne.n	80031d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031cc:	4b3b      	ldr	r3, [pc, #236]	; (80032bc <HAL_RCC_OscConfig+0x4ac>)
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	4a3a      	ldr	r2, [pc, #232]	; (80032bc <HAL_RCC_OscConfig+0x4ac>)
 80031d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 80ad 	beq.w	800333c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031e2:	4b36      	ldr	r3, [pc, #216]	; (80032bc <HAL_RCC_OscConfig+0x4ac>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 030c 	and.w	r3, r3, #12
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d060      	beq.n	80032b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d145      	bne.n	8003282 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f6:	4b33      	ldr	r3, [pc, #204]	; (80032c4 <HAL_RCC_OscConfig+0x4b4>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7fe fff0 	bl	80021e0 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003204:	f7fe ffec 	bl	80021e0 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e093      	b.n	800333e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003216:	4b29      	ldr	r3, [pc, #164]	; (80032bc <HAL_RCC_OscConfig+0x4ac>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69da      	ldr	r2, [r3, #28]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	019b      	lsls	r3, r3, #6
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003238:	085b      	lsrs	r3, r3, #1
 800323a:	3b01      	subs	r3, #1
 800323c:	041b      	lsls	r3, r3, #16
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	061b      	lsls	r3, r3, #24
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	071b      	lsls	r3, r3, #28
 800324e:	491b      	ldr	r1, [pc, #108]	; (80032bc <HAL_RCC_OscConfig+0x4ac>)
 8003250:	4313      	orrs	r3, r2
 8003252:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003254:	4b1b      	ldr	r3, [pc, #108]	; (80032c4 <HAL_RCC_OscConfig+0x4b4>)
 8003256:	2201      	movs	r2, #1
 8003258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325a:	f7fe ffc1 	bl	80021e0 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003262:	f7fe ffbd 	bl	80021e0 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e064      	b.n	800333e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003274:	4b11      	ldr	r3, [pc, #68]	; (80032bc <HAL_RCC_OscConfig+0x4ac>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f0      	beq.n	8003262 <HAL_RCC_OscConfig+0x452>
 8003280:	e05c      	b.n	800333c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003282:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <HAL_RCC_OscConfig+0x4b4>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003288:	f7fe ffaa 	bl	80021e0 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003290:	f7fe ffa6 	bl	80021e0 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e04d      	b.n	800333e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_RCC_OscConfig+0x4ac>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x480>
 80032ae:	e045      	b.n	800333c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d107      	bne.n	80032c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e040      	b.n	800333e <HAL_RCC_OscConfig+0x52e>
 80032bc:	40023800 	.word	0x40023800
 80032c0:	40007000 	.word	0x40007000
 80032c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032c8:	4b1f      	ldr	r3, [pc, #124]	; (8003348 <HAL_RCC_OscConfig+0x538>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d030      	beq.n	8003338 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d129      	bne.n	8003338 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d122      	bne.n	8003338 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032f8:	4013      	ands	r3, r2
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003300:	4293      	cmp	r3, r2
 8003302:	d119      	bne.n	8003338 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	085b      	lsrs	r3, r3, #1
 8003310:	3b01      	subs	r3, #1
 8003312:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003314:	429a      	cmp	r2, r3
 8003316:	d10f      	bne.n	8003338 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003324:	429a      	cmp	r2, r3
 8003326:	d107      	bne.n	8003338 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003334:	429a      	cmp	r2, r3
 8003336:	d001      	beq.n	800333c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e000      	b.n	800333e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800

0800334c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e07b      	b.n	8003456 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	2b00      	cmp	r3, #0
 8003364:	d108      	bne.n	8003378 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800336e:	d009      	beq.n	8003384 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	61da      	str	r2, [r3, #28]
 8003376:	e005      	b.n	8003384 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fe f9c6 	bl	8001730 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003408:	ea42 0103 	orr.w	r1, r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003410:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	0c1b      	lsrs	r3, r3, #16
 8003422:	f003 0104 	and.w	r1, r3, #4
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	f003 0210 	and.w	r2, r3, #16
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69da      	ldr	r2, [r3, #28]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003444:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b088      	sub	sp, #32
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	603b      	str	r3, [r7, #0]
 800346a:	4613      	mov	r3, r2
 800346c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_SPI_Transmit+0x22>
 800347c:	2302      	movs	r3, #2
 800347e:	e126      	b.n	80036ce <HAL_SPI_Transmit+0x270>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003488:	f7fe feaa 	bl	80021e0 <HAL_GetTick>
 800348c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	d002      	beq.n	80034a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800349e:	2302      	movs	r3, #2
 80034a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034a2:	e10b      	b.n	80036bc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <HAL_SPI_Transmit+0x52>
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d102      	bne.n	80034b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034b4:	e102      	b.n	80036bc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2203      	movs	r2, #3
 80034ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	88fa      	ldrh	r2, [r7, #6]
 80034ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	88fa      	ldrh	r2, [r7, #6]
 80034d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034fc:	d10f      	bne.n	800351e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800350c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800351c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003528:	2b40      	cmp	r3, #64	; 0x40
 800352a:	d007      	beq.n	800353c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800353a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003544:	d14b      	bne.n	80035de <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_SPI_Transmit+0xf6>
 800354e:	8afb      	ldrh	r3, [r7, #22]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d13e      	bne.n	80035d2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	881a      	ldrh	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	1c9a      	adds	r2, r3, #2
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003578:	e02b      	b.n	80035d2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b02      	cmp	r3, #2
 8003586:	d112      	bne.n	80035ae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358c:	881a      	ldrh	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	1c9a      	adds	r2, r3, #2
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80035ac:	e011      	b.n	80035d2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ae:	f7fe fe17 	bl	80021e0 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d803      	bhi.n	80035c6 <HAL_SPI_Transmit+0x168>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d102      	bne.n	80035cc <HAL_SPI_Transmit+0x16e>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d102      	bne.n	80035d2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035d0:	e074      	b.n	80036bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1ce      	bne.n	800357a <HAL_SPI_Transmit+0x11c>
 80035dc:	e04c      	b.n	8003678 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <HAL_SPI_Transmit+0x18e>
 80035e6:	8afb      	ldrh	r3, [r7, #22]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d140      	bne.n	800366e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	330c      	adds	r3, #12
 80035f6:	7812      	ldrb	r2, [r2, #0]
 80035f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003608:	b29b      	uxth	r3, r3
 800360a:	3b01      	subs	r3, #1
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003612:	e02c      	b.n	800366e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b02      	cmp	r3, #2
 8003620:	d113      	bne.n	800364a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	330c      	adds	r3, #12
 800362c:	7812      	ldrb	r2, [r2, #0]
 800362e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	86da      	strh	r2, [r3, #54]	; 0x36
 8003648:	e011      	b.n	800366e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800364a:	f7fe fdc9 	bl	80021e0 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d803      	bhi.n	8003662 <HAL_SPI_Transmit+0x204>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003660:	d102      	bne.n	8003668 <HAL_SPI_Transmit+0x20a>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d102      	bne.n	800366e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800366c:	e026      	b.n	80036bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1cd      	bne.n	8003614 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	6839      	ldr	r1, [r7, #0]
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 f8b3 	bl	80037e8 <SPI_EndRxTxTransaction>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10a      	bne.n	80036ac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003696:	2300      	movs	r3, #0
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	77fb      	strb	r3, [r7, #31]
 80036b8:	e000      	b.n	80036bc <HAL_SPI_Transmit+0x25e>
  }

error:
 80036ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3720      	adds	r7, #32
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	603b      	str	r3, [r7, #0]
 80036e4:	4613      	mov	r3, r2
 80036e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036e8:	f7fe fd7a 	bl	80021e0 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	4413      	add	r3, r2
 80036f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036f8:	f7fe fd72 	bl	80021e0 <HAL_GetTick>
 80036fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036fe:	4b39      	ldr	r3, [pc, #228]	; (80037e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	015b      	lsls	r3, r3, #5
 8003704:	0d1b      	lsrs	r3, r3, #20
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	fb02 f303 	mul.w	r3, r2, r3
 800370c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800370e:	e054      	b.n	80037ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003716:	d050      	beq.n	80037ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003718:	f7fe fd62 	bl	80021e0 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	69fa      	ldr	r2, [r7, #28]
 8003724:	429a      	cmp	r2, r3
 8003726:	d902      	bls.n	800372e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d13d      	bne.n	80037aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800373c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003746:	d111      	bne.n	800376c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003750:	d004      	beq.n	800375c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375a:	d107      	bne.n	800376c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800376a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003774:	d10f      	bne.n	8003796 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003794:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e017      	b.n	80037da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4013      	ands	r3, r2
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	bf0c      	ite	eq
 80037ca:	2301      	moveq	r3, #1
 80037cc:	2300      	movne	r3, #0
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d19b      	bne.n	8003710 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3720      	adds	r7, #32
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000000 	.word	0x20000000

080037e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80037f4:	4b1b      	ldr	r3, [pc, #108]	; (8003864 <SPI_EndRxTxTransaction+0x7c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a1b      	ldr	r2, [pc, #108]	; (8003868 <SPI_EndRxTxTransaction+0x80>)
 80037fa:	fba2 2303 	umull	r2, r3, r2, r3
 80037fe:	0d5b      	lsrs	r3, r3, #21
 8003800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003804:	fb02 f303 	mul.w	r3, r2, r3
 8003808:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003812:	d112      	bne.n	800383a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2200      	movs	r2, #0
 800381c:	2180      	movs	r1, #128	; 0x80
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f7ff ff5a 	bl	80036d8 <SPI_WaitFlagStateUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d016      	beq.n	8003858 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382e:	f043 0220 	orr.w	r2, r3, #32
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e00f      	b.n	800385a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	3b01      	subs	r3, #1
 8003844:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003850:	2b80      	cmp	r3, #128	; 0x80
 8003852:	d0f2      	beq.n	800383a <SPI_EndRxTxTransaction+0x52>
 8003854:	e000      	b.n	8003858 <SPI_EndRxTxTransaction+0x70>
        break;
 8003856:	bf00      	nop
  }

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20000000 	.word	0x20000000
 8003868:	165e9f81 	.word	0x165e9f81

0800386c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e041      	b.n	8003902 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7fd ffb4 	bl	8001800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3304      	adds	r3, #4
 80038a8:	4619      	mov	r1, r3
 80038aa:	4610      	mov	r0, r2
 80038ac:	f000 f9ce 	bl	8003c4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	d001      	beq.n	8003924 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e04e      	b.n	80039c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a23      	ldr	r2, [pc, #140]	; (80039d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d022      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394e:	d01d      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a1f      	ldr	r2, [pc, #124]	; (80039d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d018      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1e      	ldr	r2, [pc, #120]	; (80039d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d013      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1c      	ldr	r2, [pc, #112]	; (80039dc <HAL_TIM_Base_Start_IT+0xd0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00e      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a1b      	ldr	r2, [pc, #108]	; (80039e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d009      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a19      	ldr	r2, [pc, #100]	; (80039e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d004      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a18      	ldr	r2, [pc, #96]	; (80039e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d111      	bne.n	80039b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b06      	cmp	r3, #6
 800399c:	d010      	beq.n	80039c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f042 0201 	orr.w	r2, r2, #1
 80039ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ae:	e007      	b.n	80039c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40010000 	.word	0x40010000
 80039d4:	40000400 	.word	0x40000400
 80039d8:	40000800 	.word	0x40000800
 80039dc:	40000c00 	.word	0x40000c00
 80039e0:	40010400 	.word	0x40010400
 80039e4:	40014000 	.word	0x40014000
 80039e8:	40001800 	.word	0x40001800

080039ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d122      	bne.n	8003a48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d11b      	bne.n	8003a48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f06f 0202 	mvn.w	r2, #2
 8003a18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f8ee 	bl	8003c10 <HAL_TIM_IC_CaptureCallback>
 8003a34:	e005      	b.n	8003a42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f8e0 	bl	8003bfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f8f1 	bl	8003c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d122      	bne.n	8003a9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d11b      	bne.n	8003a9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f06f 0204 	mvn.w	r2, #4
 8003a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2202      	movs	r2, #2
 8003a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f8c4 	bl	8003c10 <HAL_TIM_IC_CaptureCallback>
 8003a88:	e005      	b.n	8003a96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f8b6 	bl	8003bfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f8c7 	bl	8003c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f003 0308 	and.w	r3, r3, #8
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d122      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d11b      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f06f 0208 	mvn.w	r2, #8
 8003ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f89a 	bl	8003c10 <HAL_TIM_IC_CaptureCallback>
 8003adc:	e005      	b.n	8003aea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f88c 	bl	8003bfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f89d 	bl	8003c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	2b10      	cmp	r3, #16
 8003afc:	d122      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b10      	cmp	r3, #16
 8003b0a:	d11b      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0210 	mvn.w	r2, #16
 8003b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2208      	movs	r2, #8
 8003b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f870 	bl	8003c10 <HAL_TIM_IC_CaptureCallback>
 8003b30:	e005      	b.n	8003b3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f862 	bl	8003bfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f873 	bl	8003c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d10e      	bne.n	8003b70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d107      	bne.n	8003b70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0201 	mvn.w	r2, #1
 8003b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7fd fd9c 	bl	80016a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7a:	2b80      	cmp	r3, #128	; 0x80
 8003b7c:	d10e      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b88:	2b80      	cmp	r3, #128	; 0x80
 8003b8a:	d107      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f97e 	bl	8003e98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba6:	2b40      	cmp	r3, #64	; 0x40
 8003ba8:	d10e      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb4:	2b40      	cmp	r3, #64	; 0x40
 8003bb6:	d107      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f838 	bl	8003c38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0320 	and.w	r3, r3, #32
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	d10e      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d107      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0220 	mvn.w	r2, #32
 8003bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f948 	bl	8003e84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bf4:	bf00      	nop
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a40      	ldr	r2, [pc, #256]	; (8003d60 <TIM_Base_SetConfig+0x114>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d013      	beq.n	8003c8c <TIM_Base_SetConfig+0x40>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c6a:	d00f      	beq.n	8003c8c <TIM_Base_SetConfig+0x40>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a3d      	ldr	r2, [pc, #244]	; (8003d64 <TIM_Base_SetConfig+0x118>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d00b      	beq.n	8003c8c <TIM_Base_SetConfig+0x40>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a3c      	ldr	r2, [pc, #240]	; (8003d68 <TIM_Base_SetConfig+0x11c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d007      	beq.n	8003c8c <TIM_Base_SetConfig+0x40>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a3b      	ldr	r2, [pc, #236]	; (8003d6c <TIM_Base_SetConfig+0x120>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d003      	beq.n	8003c8c <TIM_Base_SetConfig+0x40>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a3a      	ldr	r2, [pc, #232]	; (8003d70 <TIM_Base_SetConfig+0x124>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d108      	bne.n	8003c9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a2f      	ldr	r2, [pc, #188]	; (8003d60 <TIM_Base_SetConfig+0x114>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d02b      	beq.n	8003cfe <TIM_Base_SetConfig+0xb2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cac:	d027      	beq.n	8003cfe <TIM_Base_SetConfig+0xb2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a2c      	ldr	r2, [pc, #176]	; (8003d64 <TIM_Base_SetConfig+0x118>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d023      	beq.n	8003cfe <TIM_Base_SetConfig+0xb2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a2b      	ldr	r2, [pc, #172]	; (8003d68 <TIM_Base_SetConfig+0x11c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d01f      	beq.n	8003cfe <TIM_Base_SetConfig+0xb2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a2a      	ldr	r2, [pc, #168]	; (8003d6c <TIM_Base_SetConfig+0x120>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d01b      	beq.n	8003cfe <TIM_Base_SetConfig+0xb2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a29      	ldr	r2, [pc, #164]	; (8003d70 <TIM_Base_SetConfig+0x124>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d017      	beq.n	8003cfe <TIM_Base_SetConfig+0xb2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a28      	ldr	r2, [pc, #160]	; (8003d74 <TIM_Base_SetConfig+0x128>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d013      	beq.n	8003cfe <TIM_Base_SetConfig+0xb2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a27      	ldr	r2, [pc, #156]	; (8003d78 <TIM_Base_SetConfig+0x12c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00f      	beq.n	8003cfe <TIM_Base_SetConfig+0xb2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a26      	ldr	r2, [pc, #152]	; (8003d7c <TIM_Base_SetConfig+0x130>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00b      	beq.n	8003cfe <TIM_Base_SetConfig+0xb2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a25      	ldr	r2, [pc, #148]	; (8003d80 <TIM_Base_SetConfig+0x134>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d007      	beq.n	8003cfe <TIM_Base_SetConfig+0xb2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a24      	ldr	r2, [pc, #144]	; (8003d84 <TIM_Base_SetConfig+0x138>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d003      	beq.n	8003cfe <TIM_Base_SetConfig+0xb2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a23      	ldr	r2, [pc, #140]	; (8003d88 <TIM_Base_SetConfig+0x13c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d108      	bne.n	8003d10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a0a      	ldr	r2, [pc, #40]	; (8003d60 <TIM_Base_SetConfig+0x114>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d003      	beq.n	8003d44 <TIM_Base_SetConfig+0xf8>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a0c      	ldr	r2, [pc, #48]	; (8003d70 <TIM_Base_SetConfig+0x124>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d103      	bne.n	8003d4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	691a      	ldr	r2, [r3, #16]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	615a      	str	r2, [r3, #20]
}
 8003d52:	bf00      	nop
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40010000 	.word	0x40010000
 8003d64:	40000400 	.word	0x40000400
 8003d68:	40000800 	.word	0x40000800
 8003d6c:	40000c00 	.word	0x40000c00
 8003d70:	40010400 	.word	0x40010400
 8003d74:	40014000 	.word	0x40014000
 8003d78:	40014400 	.word	0x40014400
 8003d7c:	40014800 	.word	0x40014800
 8003d80:	40001800 	.word	0x40001800
 8003d84:	40001c00 	.word	0x40001c00
 8003d88:	40002000 	.word	0x40002000

08003d8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e05a      	b.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a21      	ldr	r2, [pc, #132]	; (8003e68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d022      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df0:	d01d      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a1d      	ldr	r2, [pc, #116]	; (8003e6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d018      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a1b      	ldr	r2, [pc, #108]	; (8003e70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d013      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a1a      	ldr	r2, [pc, #104]	; (8003e74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00e      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a18      	ldr	r2, [pc, #96]	; (8003e78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d009      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a17      	ldr	r2, [pc, #92]	; (8003e7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d004      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a15      	ldr	r2, [pc, #84]	; (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d10c      	bne.n	8003e48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40010000 	.word	0x40010000
 8003e6c:	40000400 	.word	0x40000400
 8003e70:	40000800 	.word	0x40000800
 8003e74:	40000c00 	.word	0x40000c00
 8003e78:	40010400 	.word	0x40010400
 8003e7c:	40014000 	.word	0x40014000
 8003e80:	40001800 	.word	0x40001800

08003e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e03f      	b.n	8003f3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fd fcb6 	bl	8001844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2224      	movs	r2, #36	; 0x24
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f829 	bl	8003f48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695a      	ldr	r2, [r3, #20]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f4c:	b0c0      	sub	sp, #256	; 0x100
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f64:	68d9      	ldr	r1, [r3, #12]
 8003f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	ea40 0301 	orr.w	r3, r0, r1
 8003f70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	431a      	orrs	r2, r3
 8003f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fa0:	f021 010c 	bic.w	r1, r1, #12
 8003fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003fae:	430b      	orrs	r3, r1
 8003fb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc2:	6999      	ldr	r1, [r3, #24]
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	ea40 0301 	orr.w	r3, r0, r1
 8003fce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	4b8f      	ldr	r3, [pc, #572]	; (8004214 <UART_SetConfig+0x2cc>)
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d005      	beq.n	8003fe8 <UART_SetConfig+0xa0>
 8003fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	4b8d      	ldr	r3, [pc, #564]	; (8004218 <UART_SetConfig+0x2d0>)
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d104      	bne.n	8003ff2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fe8:	f7fe fc9c 	bl	8002924 <HAL_RCC_GetPCLK2Freq>
 8003fec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ff0:	e003      	b.n	8003ffa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ff2:	f7fe fc83 	bl	80028fc <HAL_RCC_GetPCLK1Freq>
 8003ff6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004004:	f040 810c 	bne.w	8004220 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004008:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800400c:	2200      	movs	r2, #0
 800400e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004012:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004016:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800401a:	4622      	mov	r2, r4
 800401c:	462b      	mov	r3, r5
 800401e:	1891      	adds	r1, r2, r2
 8004020:	65b9      	str	r1, [r7, #88]	; 0x58
 8004022:	415b      	adcs	r3, r3
 8004024:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004026:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800402a:	4621      	mov	r1, r4
 800402c:	eb12 0801 	adds.w	r8, r2, r1
 8004030:	4629      	mov	r1, r5
 8004032:	eb43 0901 	adc.w	r9, r3, r1
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	f04f 0300 	mov.w	r3, #0
 800403e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004042:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004046:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800404a:	4690      	mov	r8, r2
 800404c:	4699      	mov	r9, r3
 800404e:	4623      	mov	r3, r4
 8004050:	eb18 0303 	adds.w	r3, r8, r3
 8004054:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004058:	462b      	mov	r3, r5
 800405a:	eb49 0303 	adc.w	r3, r9, r3
 800405e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800406e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004072:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004076:	460b      	mov	r3, r1
 8004078:	18db      	adds	r3, r3, r3
 800407a:	653b      	str	r3, [r7, #80]	; 0x50
 800407c:	4613      	mov	r3, r2
 800407e:	eb42 0303 	adc.w	r3, r2, r3
 8004082:	657b      	str	r3, [r7, #84]	; 0x54
 8004084:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004088:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800408c:	f7fc f910 	bl	80002b0 <__aeabi_uldivmod>
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	4b61      	ldr	r3, [pc, #388]	; (800421c <UART_SetConfig+0x2d4>)
 8004096:	fba3 2302 	umull	r2, r3, r3, r2
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	011c      	lsls	r4, r3, #4
 800409e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040a2:	2200      	movs	r2, #0
 80040a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80040ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80040b0:	4642      	mov	r2, r8
 80040b2:	464b      	mov	r3, r9
 80040b4:	1891      	adds	r1, r2, r2
 80040b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80040b8:	415b      	adcs	r3, r3
 80040ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040c0:	4641      	mov	r1, r8
 80040c2:	eb12 0a01 	adds.w	sl, r2, r1
 80040c6:	4649      	mov	r1, r9
 80040c8:	eb43 0b01 	adc.w	fp, r3, r1
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040e0:	4692      	mov	sl, r2
 80040e2:	469b      	mov	fp, r3
 80040e4:	4643      	mov	r3, r8
 80040e6:	eb1a 0303 	adds.w	r3, sl, r3
 80040ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040ee:	464b      	mov	r3, r9
 80040f0:	eb4b 0303 	adc.w	r3, fp, r3
 80040f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80040f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004104:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004108:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800410c:	460b      	mov	r3, r1
 800410e:	18db      	adds	r3, r3, r3
 8004110:	643b      	str	r3, [r7, #64]	; 0x40
 8004112:	4613      	mov	r3, r2
 8004114:	eb42 0303 	adc.w	r3, r2, r3
 8004118:	647b      	str	r3, [r7, #68]	; 0x44
 800411a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800411e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004122:	f7fc f8c5 	bl	80002b0 <__aeabi_uldivmod>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4611      	mov	r1, r2
 800412c:	4b3b      	ldr	r3, [pc, #236]	; (800421c <UART_SetConfig+0x2d4>)
 800412e:	fba3 2301 	umull	r2, r3, r3, r1
 8004132:	095b      	lsrs	r3, r3, #5
 8004134:	2264      	movs	r2, #100	; 0x64
 8004136:	fb02 f303 	mul.w	r3, r2, r3
 800413a:	1acb      	subs	r3, r1, r3
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004142:	4b36      	ldr	r3, [pc, #216]	; (800421c <UART_SetConfig+0x2d4>)
 8004144:	fba3 2302 	umull	r2, r3, r3, r2
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004150:	441c      	add	r4, r3
 8004152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004156:	2200      	movs	r2, #0
 8004158:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800415c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004160:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004164:	4642      	mov	r2, r8
 8004166:	464b      	mov	r3, r9
 8004168:	1891      	adds	r1, r2, r2
 800416a:	63b9      	str	r1, [r7, #56]	; 0x38
 800416c:	415b      	adcs	r3, r3
 800416e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004170:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004174:	4641      	mov	r1, r8
 8004176:	1851      	adds	r1, r2, r1
 8004178:	6339      	str	r1, [r7, #48]	; 0x30
 800417a:	4649      	mov	r1, r9
 800417c:	414b      	adcs	r3, r1
 800417e:	637b      	str	r3, [r7, #52]	; 0x34
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800418c:	4659      	mov	r1, fp
 800418e:	00cb      	lsls	r3, r1, #3
 8004190:	4651      	mov	r1, sl
 8004192:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004196:	4651      	mov	r1, sl
 8004198:	00ca      	lsls	r2, r1, #3
 800419a:	4610      	mov	r0, r2
 800419c:	4619      	mov	r1, r3
 800419e:	4603      	mov	r3, r0
 80041a0:	4642      	mov	r2, r8
 80041a2:	189b      	adds	r3, r3, r2
 80041a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041a8:	464b      	mov	r3, r9
 80041aa:	460a      	mov	r2, r1
 80041ac:	eb42 0303 	adc.w	r3, r2, r3
 80041b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80041c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80041c8:	460b      	mov	r3, r1
 80041ca:	18db      	adds	r3, r3, r3
 80041cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ce:	4613      	mov	r3, r2
 80041d0:	eb42 0303 	adc.w	r3, r2, r3
 80041d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80041de:	f7fc f867 	bl	80002b0 <__aeabi_uldivmod>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	4b0d      	ldr	r3, [pc, #52]	; (800421c <UART_SetConfig+0x2d4>)
 80041e8:	fba3 1302 	umull	r1, r3, r3, r2
 80041ec:	095b      	lsrs	r3, r3, #5
 80041ee:	2164      	movs	r1, #100	; 0x64
 80041f0:	fb01 f303 	mul.w	r3, r1, r3
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	3332      	adds	r3, #50	; 0x32
 80041fa:	4a08      	ldr	r2, [pc, #32]	; (800421c <UART_SetConfig+0x2d4>)
 80041fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004200:	095b      	lsrs	r3, r3, #5
 8004202:	f003 0207 	and.w	r2, r3, #7
 8004206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4422      	add	r2, r4
 800420e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004210:	e105      	b.n	800441e <UART_SetConfig+0x4d6>
 8004212:	bf00      	nop
 8004214:	40011000 	.word	0x40011000
 8004218:	40011400 	.word	0x40011400
 800421c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004224:	2200      	movs	r2, #0
 8004226:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800422a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800422e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004232:	4642      	mov	r2, r8
 8004234:	464b      	mov	r3, r9
 8004236:	1891      	adds	r1, r2, r2
 8004238:	6239      	str	r1, [r7, #32]
 800423a:	415b      	adcs	r3, r3
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
 800423e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004242:	4641      	mov	r1, r8
 8004244:	1854      	adds	r4, r2, r1
 8004246:	4649      	mov	r1, r9
 8004248:	eb43 0501 	adc.w	r5, r3, r1
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	00eb      	lsls	r3, r5, #3
 8004256:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800425a:	00e2      	lsls	r2, r4, #3
 800425c:	4614      	mov	r4, r2
 800425e:	461d      	mov	r5, r3
 8004260:	4643      	mov	r3, r8
 8004262:	18e3      	adds	r3, r4, r3
 8004264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004268:	464b      	mov	r3, r9
 800426a:	eb45 0303 	adc.w	r3, r5, r3
 800426e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800427e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	f04f 0300 	mov.w	r3, #0
 800428a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800428e:	4629      	mov	r1, r5
 8004290:	008b      	lsls	r3, r1, #2
 8004292:	4621      	mov	r1, r4
 8004294:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004298:	4621      	mov	r1, r4
 800429a:	008a      	lsls	r2, r1, #2
 800429c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80042a0:	f7fc f806 	bl	80002b0 <__aeabi_uldivmod>
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	4b60      	ldr	r3, [pc, #384]	; (800442c <UART_SetConfig+0x4e4>)
 80042aa:	fba3 2302 	umull	r2, r3, r3, r2
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	011c      	lsls	r4, r3, #4
 80042b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042b6:	2200      	movs	r2, #0
 80042b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80042c4:	4642      	mov	r2, r8
 80042c6:	464b      	mov	r3, r9
 80042c8:	1891      	adds	r1, r2, r2
 80042ca:	61b9      	str	r1, [r7, #24]
 80042cc:	415b      	adcs	r3, r3
 80042ce:	61fb      	str	r3, [r7, #28]
 80042d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042d4:	4641      	mov	r1, r8
 80042d6:	1851      	adds	r1, r2, r1
 80042d8:	6139      	str	r1, [r7, #16]
 80042da:	4649      	mov	r1, r9
 80042dc:	414b      	adcs	r3, r1
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042ec:	4659      	mov	r1, fp
 80042ee:	00cb      	lsls	r3, r1, #3
 80042f0:	4651      	mov	r1, sl
 80042f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042f6:	4651      	mov	r1, sl
 80042f8:	00ca      	lsls	r2, r1, #3
 80042fa:	4610      	mov	r0, r2
 80042fc:	4619      	mov	r1, r3
 80042fe:	4603      	mov	r3, r0
 8004300:	4642      	mov	r2, r8
 8004302:	189b      	adds	r3, r3, r2
 8004304:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004308:	464b      	mov	r3, r9
 800430a:	460a      	mov	r2, r1
 800430c:	eb42 0303 	adc.w	r3, r2, r3
 8004310:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	67bb      	str	r3, [r7, #120]	; 0x78
 800431e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800432c:	4649      	mov	r1, r9
 800432e:	008b      	lsls	r3, r1, #2
 8004330:	4641      	mov	r1, r8
 8004332:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004336:	4641      	mov	r1, r8
 8004338:	008a      	lsls	r2, r1, #2
 800433a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800433e:	f7fb ffb7 	bl	80002b0 <__aeabi_uldivmod>
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	4b39      	ldr	r3, [pc, #228]	; (800442c <UART_SetConfig+0x4e4>)
 8004348:	fba3 1302 	umull	r1, r3, r3, r2
 800434c:	095b      	lsrs	r3, r3, #5
 800434e:	2164      	movs	r1, #100	; 0x64
 8004350:	fb01 f303 	mul.w	r3, r1, r3
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	3332      	adds	r3, #50	; 0x32
 800435a:	4a34      	ldr	r2, [pc, #208]	; (800442c <UART_SetConfig+0x4e4>)
 800435c:	fba2 2303 	umull	r2, r3, r2, r3
 8004360:	095b      	lsrs	r3, r3, #5
 8004362:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004366:	441c      	add	r4, r3
 8004368:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800436c:	2200      	movs	r2, #0
 800436e:	673b      	str	r3, [r7, #112]	; 0x70
 8004370:	677a      	str	r2, [r7, #116]	; 0x74
 8004372:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004376:	4642      	mov	r2, r8
 8004378:	464b      	mov	r3, r9
 800437a:	1891      	adds	r1, r2, r2
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	415b      	adcs	r3, r3
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004386:	4641      	mov	r1, r8
 8004388:	1851      	adds	r1, r2, r1
 800438a:	6039      	str	r1, [r7, #0]
 800438c:	4649      	mov	r1, r9
 800438e:	414b      	adcs	r3, r1
 8004390:	607b      	str	r3, [r7, #4]
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800439e:	4659      	mov	r1, fp
 80043a0:	00cb      	lsls	r3, r1, #3
 80043a2:	4651      	mov	r1, sl
 80043a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043a8:	4651      	mov	r1, sl
 80043aa:	00ca      	lsls	r2, r1, #3
 80043ac:	4610      	mov	r0, r2
 80043ae:	4619      	mov	r1, r3
 80043b0:	4603      	mov	r3, r0
 80043b2:	4642      	mov	r2, r8
 80043b4:	189b      	adds	r3, r3, r2
 80043b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80043b8:	464b      	mov	r3, r9
 80043ba:	460a      	mov	r2, r1
 80043bc:	eb42 0303 	adc.w	r3, r2, r3
 80043c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	663b      	str	r3, [r7, #96]	; 0x60
 80043cc:	667a      	str	r2, [r7, #100]	; 0x64
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80043da:	4649      	mov	r1, r9
 80043dc:	008b      	lsls	r3, r1, #2
 80043de:	4641      	mov	r1, r8
 80043e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043e4:	4641      	mov	r1, r8
 80043e6:	008a      	lsls	r2, r1, #2
 80043e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043ec:	f7fb ff60 	bl	80002b0 <__aeabi_uldivmod>
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4b0d      	ldr	r3, [pc, #52]	; (800442c <UART_SetConfig+0x4e4>)
 80043f6:	fba3 1302 	umull	r1, r3, r3, r2
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	2164      	movs	r1, #100	; 0x64
 80043fe:	fb01 f303 	mul.w	r3, r1, r3
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	3332      	adds	r3, #50	; 0x32
 8004408:	4a08      	ldr	r2, [pc, #32]	; (800442c <UART_SetConfig+0x4e4>)
 800440a:	fba2 2303 	umull	r2, r3, r2, r3
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	f003 020f 	and.w	r2, r3, #15
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4422      	add	r2, r4
 800441c:	609a      	str	r2, [r3, #8]
}
 800441e:	bf00      	nop
 8004420:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004424:	46bd      	mov	sp, r7
 8004426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800442a:	bf00      	nop
 800442c:	51eb851f 	.word	0x51eb851f

08004430 <__NVIC_SetPriority>:
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	4603      	mov	r3, r0
 8004438:	6039      	str	r1, [r7, #0]
 800443a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800443c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004440:	2b00      	cmp	r3, #0
 8004442:	db0a      	blt.n	800445a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	b2da      	uxtb	r2, r3
 8004448:	490c      	ldr	r1, [pc, #48]	; (800447c <__NVIC_SetPriority+0x4c>)
 800444a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444e:	0112      	lsls	r2, r2, #4
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	440b      	add	r3, r1
 8004454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004458:	e00a      	b.n	8004470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	b2da      	uxtb	r2, r3
 800445e:	4908      	ldr	r1, [pc, #32]	; (8004480 <__NVIC_SetPriority+0x50>)
 8004460:	79fb      	ldrb	r3, [r7, #7]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	3b04      	subs	r3, #4
 8004468:	0112      	lsls	r2, r2, #4
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	440b      	add	r3, r1
 800446e:	761a      	strb	r2, [r3, #24]
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	e000e100 	.word	0xe000e100
 8004480:	e000ed00 	.word	0xe000ed00

08004484 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004488:	4b05      	ldr	r3, [pc, #20]	; (80044a0 <SysTick_Handler+0x1c>)
 800448a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800448c:	f001 fd28 	bl	8005ee0 <xTaskGetSchedulerState>
 8004490:	4603      	mov	r3, r0
 8004492:	2b01      	cmp	r3, #1
 8004494:	d001      	beq.n	800449a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004496:	f002 fb0f 	bl	8006ab8 <xPortSysTickHandler>
  }
}
 800449a:	bf00      	nop
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	e000e010 	.word	0xe000e010

080044a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80044a8:	2100      	movs	r1, #0
 80044aa:	f06f 0004 	mvn.w	r0, #4
 80044ae:	f7ff ffbf 	bl	8004430 <__NVIC_SetPriority>
#endif
}
 80044b2:	bf00      	nop
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044be:	f3ef 8305 	mrs	r3, IPSR
 80044c2:	603b      	str	r3, [r7, #0]
  return(result);
 80044c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80044ca:	f06f 0305 	mvn.w	r3, #5
 80044ce:	607b      	str	r3, [r7, #4]
 80044d0:	e00c      	b.n	80044ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80044d2:	4b0a      	ldr	r3, [pc, #40]	; (80044fc <osKernelInitialize+0x44>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d105      	bne.n	80044e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80044da:	4b08      	ldr	r3, [pc, #32]	; (80044fc <osKernelInitialize+0x44>)
 80044dc:	2201      	movs	r2, #1
 80044de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80044e0:	2300      	movs	r3, #0
 80044e2:	607b      	str	r3, [r7, #4]
 80044e4:	e002      	b.n	80044ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80044e6:	f04f 33ff 	mov.w	r3, #4294967295
 80044ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044ec:	687b      	ldr	r3, [r7, #4]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	200005e0 	.word	0x200005e0

08004500 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004506:	f3ef 8305 	mrs	r3, IPSR
 800450a:	603b      	str	r3, [r7, #0]
  return(result);
 800450c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004512:	f06f 0305 	mvn.w	r3, #5
 8004516:	607b      	str	r3, [r7, #4]
 8004518:	e010      	b.n	800453c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800451a:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <osKernelStart+0x48>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d109      	bne.n	8004536 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004522:	f7ff ffbf 	bl	80044a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004526:	4b08      	ldr	r3, [pc, #32]	; (8004548 <osKernelStart+0x48>)
 8004528:	2202      	movs	r2, #2
 800452a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800452c:	f001 f87c 	bl	8005628 <vTaskStartScheduler>
      stat = osOK;
 8004530:	2300      	movs	r3, #0
 8004532:	607b      	str	r3, [r7, #4]
 8004534:	e002      	b.n	800453c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004536:	f04f 33ff 	mov.w	r3, #4294967295
 800453a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800453c:	687b      	ldr	r3, [r7, #4]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	200005e0 	.word	0x200005e0

0800454c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800454c:	b580      	push	{r7, lr}
 800454e:	b08e      	sub	sp, #56	; 0x38
 8004550:	af04      	add	r7, sp, #16
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004558:	2300      	movs	r3, #0
 800455a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800455c:	f3ef 8305 	mrs	r3, IPSR
 8004560:	617b      	str	r3, [r7, #20]
  return(result);
 8004562:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004564:	2b00      	cmp	r3, #0
 8004566:	d17e      	bne.n	8004666 <osThreadNew+0x11a>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d07b      	beq.n	8004666 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800456e:	2380      	movs	r3, #128	; 0x80
 8004570:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004572:	2318      	movs	r3, #24
 8004574:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004576:	2300      	movs	r3, #0
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800457a:	f04f 33ff 	mov.w	r3, #4294967295
 800457e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d045      	beq.n	8004612 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <osThreadNew+0x48>
        name = attr->name;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d002      	beq.n	80045a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <osThreadNew+0x6e>
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	2b38      	cmp	r3, #56	; 0x38
 80045ac:	d805      	bhi.n	80045ba <osThreadNew+0x6e>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <osThreadNew+0x72>
        return (NULL);
 80045ba:	2300      	movs	r3, #0
 80045bc:	e054      	b.n	8004668 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	089b      	lsrs	r3, r3, #2
 80045cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00e      	beq.n	80045f4 <osThreadNew+0xa8>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	2bbb      	cmp	r3, #187	; 0xbb
 80045dc:	d90a      	bls.n	80045f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d006      	beq.n	80045f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <osThreadNew+0xa8>
        mem = 1;
 80045ee:	2301      	movs	r3, #1
 80045f0:	61bb      	str	r3, [r7, #24]
 80045f2:	e010      	b.n	8004616 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10c      	bne.n	8004616 <osThreadNew+0xca>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d108      	bne.n	8004616 <osThreadNew+0xca>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d104      	bne.n	8004616 <osThreadNew+0xca>
          mem = 0;
 800460c:	2300      	movs	r3, #0
 800460e:	61bb      	str	r3, [r7, #24]
 8004610:	e001      	b.n	8004616 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004612:	2300      	movs	r3, #0
 8004614:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d110      	bne.n	800463e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004624:	9202      	str	r2, [sp, #8]
 8004626:	9301      	str	r3, [sp, #4]
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	6a3a      	ldr	r2, [r7, #32]
 8004630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 fe0c 	bl	8005250 <xTaskCreateStatic>
 8004638:	4603      	mov	r3, r0
 800463a:	613b      	str	r3, [r7, #16]
 800463c:	e013      	b.n	8004666 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d110      	bne.n	8004666 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004644:	6a3b      	ldr	r3, [r7, #32]
 8004646:	b29a      	uxth	r2, r3
 8004648:	f107 0310 	add.w	r3, r7, #16
 800464c:	9301      	str	r3, [sp, #4]
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 fe57 	bl	800530a <xTaskCreate>
 800465c:	4603      	mov	r3, r0
 800465e:	2b01      	cmp	r3, #1
 8004660:	d001      	beq.n	8004666 <osThreadNew+0x11a>
            hTask = NULL;
 8004662:	2300      	movs	r3, #0
 8004664:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004666:	693b      	ldr	r3, [r7, #16]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3728      	adds	r7, #40	; 0x28
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004678:	f3ef 8305 	mrs	r3, IPSR
 800467c:	60bb      	str	r3, [r7, #8]
  return(result);
 800467e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <osDelay+0x1c>
    stat = osErrorISR;
 8004684:	f06f 0305 	mvn.w	r3, #5
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	e007      	b.n	800469c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800468c:	2300      	movs	r3, #0
 800468e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 ff92 	bl	80055c0 <vTaskDelay>
    }
  }

  return (stat);
 800469c:	68fb      	ldr	r3, [r7, #12]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
	...

080046a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4a07      	ldr	r2, [pc, #28]	; (80046d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80046b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	4a06      	ldr	r2, [pc, #24]	; (80046d8 <vApplicationGetIdleTaskMemory+0x30>)
 80046be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2280      	movs	r2, #128	; 0x80
 80046c4:	601a      	str	r2, [r3, #0]
}
 80046c6:	bf00      	nop
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	200005e4 	.word	0x200005e4
 80046d8:	200006a0 	.word	0x200006a0

080046dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4a07      	ldr	r2, [pc, #28]	; (8004708 <vApplicationGetTimerTaskMemory+0x2c>)
 80046ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	4a06      	ldr	r2, [pc, #24]	; (800470c <vApplicationGetTimerTaskMemory+0x30>)
 80046f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046fa:	601a      	str	r2, [r3, #0]
}
 80046fc:	bf00      	nop
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	200008a0 	.word	0x200008a0
 800470c:	2000095c 	.word	0x2000095c

08004710 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f103 0208 	add.w	r2, r3, #8
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f04f 32ff 	mov.w	r2, #4294967295
 8004728:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f103 0208 	add.w	r2, r3, #8
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f103 0208 	add.w	r2, r3, #8
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800476a:	b480      	push	{r7}
 800476c:	b085      	sub	sp, #20
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	1c5a      	adds	r2, r3, #1
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	601a      	str	r2, [r3, #0]
}
 80047a6:	bf00      	nop
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047b2:	b480      	push	{r7}
 80047b4:	b085      	sub	sp, #20
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c8:	d103      	bne.n	80047d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	e00c      	b.n	80047ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3308      	adds	r3, #8
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	e002      	b.n	80047e0 <vListInsert+0x2e>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d2f6      	bcs.n	80047da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	601a      	str	r2, [r3, #0]
}
 8004818:	bf00      	nop
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6892      	ldr	r2, [r2, #8]
 800483a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6852      	ldr	r2, [r2, #4]
 8004844:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	429a      	cmp	r2, r3
 800484e:	d103      	bne.n	8004858 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	1e5a      	subs	r2, r3, #1
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10a      	bne.n	80048a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800488c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800489e:	bf00      	nop
 80048a0:	e7fe      	b.n	80048a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80048a2:	f002 f877 	bl	8006994 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ae:	68f9      	ldr	r1, [r7, #12]
 80048b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048b2:	fb01 f303 	mul.w	r3, r1, r3
 80048b6:	441a      	add	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d2:	3b01      	subs	r3, #1
 80048d4:	68f9      	ldr	r1, [r7, #12]
 80048d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048d8:	fb01 f303 	mul.w	r3, r1, r3
 80048dc:	441a      	add	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	22ff      	movs	r2, #255	; 0xff
 80048e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	22ff      	movs	r2, #255	; 0xff
 80048ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d114      	bne.n	8004922 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d01a      	beq.n	8004936 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	3310      	adds	r3, #16
 8004904:	4618      	mov	r0, r3
 8004906:	f001 f929 	bl	8005b5c <xTaskRemoveFromEventList>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d012      	beq.n	8004936 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004910:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <xQueueGenericReset+0xcc>)
 8004912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	e009      	b.n	8004936 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	3310      	adds	r3, #16
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff fef2 	bl	8004710 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3324      	adds	r3, #36	; 0x24
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff feed 	bl	8004710 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004936:	f002 f85d 	bl	80069f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800493a:	2301      	movs	r3, #1
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	e000ed04 	.word	0xe000ed04

08004948 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08e      	sub	sp, #56	; 0x38
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
 8004954:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10a      	bne.n	8004972 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800495c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800496e:	bf00      	nop
 8004970:	e7fe      	b.n	8004970 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10a      	bne.n	800498e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497c:	f383 8811 	msr	BASEPRI, r3
 8004980:	f3bf 8f6f 	isb	sy
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
}
 800498a:	bf00      	nop
 800498c:	e7fe      	b.n	800498c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <xQueueGenericCreateStatic+0x52>
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <xQueueGenericCreateStatic+0x56>
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <xQueueGenericCreateStatic+0x58>
 800499e:	2300      	movs	r3, #0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10a      	bne.n	80049ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	623b      	str	r3, [r7, #32]
}
 80049b6:	bf00      	nop
 80049b8:	e7fe      	b.n	80049b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d102      	bne.n	80049c6 <xQueueGenericCreateStatic+0x7e>
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <xQueueGenericCreateStatic+0x82>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e000      	b.n	80049cc <xQueueGenericCreateStatic+0x84>
 80049ca:	2300      	movs	r3, #0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10a      	bne.n	80049e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	61fb      	str	r3, [r7, #28]
}
 80049e2:	bf00      	nop
 80049e4:	e7fe      	b.n	80049e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80049e6:	2350      	movs	r3, #80	; 0x50
 80049e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	2b50      	cmp	r3, #80	; 0x50
 80049ee:	d00a      	beq.n	8004a06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	61bb      	str	r3, [r7, #24]
}
 8004a02:	bf00      	nop
 8004a04:	e7fe      	b.n	8004a04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00d      	beq.n	8004a2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	4613      	mov	r3, r2
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	68b9      	ldr	r1, [r7, #8]
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f805 	bl	8004a38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3730      	adds	r7, #48	; 0x30
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
 8004a44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d103      	bne.n	8004a54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	e002      	b.n	8004a5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a66:	2101      	movs	r1, #1
 8004a68:	69b8      	ldr	r0, [r7, #24]
 8004a6a:	f7ff ff05 	bl	8004878 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	78fa      	ldrb	r2, [r7, #3]
 8004a72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a76:	bf00      	nop
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08e      	sub	sp, #56	; 0x38
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10a      	bne.n	8004ab2 <xQueueGenericSend+0x32>
	__asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004aae:	bf00      	nop
 8004ab0:	e7fe      	b.n	8004ab0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d103      	bne.n	8004ac0 <xQueueGenericSend+0x40>
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <xQueueGenericSend+0x44>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <xQueueGenericSend+0x46>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10a      	bne.n	8004ae0 <xQueueGenericSend+0x60>
	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004adc:	bf00      	nop
 8004ade:	e7fe      	b.n	8004ade <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d103      	bne.n	8004aee <xQueueGenericSend+0x6e>
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d101      	bne.n	8004af2 <xQueueGenericSend+0x72>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <xQueueGenericSend+0x74>
 8004af2:	2300      	movs	r3, #0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10a      	bne.n	8004b0e <xQueueGenericSend+0x8e>
	__asm volatile
 8004af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	623b      	str	r3, [r7, #32]
}
 8004b0a:	bf00      	nop
 8004b0c:	e7fe      	b.n	8004b0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b0e:	f001 f9e7 	bl	8005ee0 <xTaskGetSchedulerState>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d102      	bne.n	8004b1e <xQueueGenericSend+0x9e>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <xQueueGenericSend+0xa2>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <xQueueGenericSend+0xa4>
 8004b22:	2300      	movs	r3, #0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10a      	bne.n	8004b3e <xQueueGenericSend+0xbe>
	__asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	61fb      	str	r3, [r7, #28]
}
 8004b3a:	bf00      	nop
 8004b3c:	e7fe      	b.n	8004b3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b3e:	f001 ff29 	bl	8006994 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d302      	bcc.n	8004b54 <xQueueGenericSend+0xd4>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d129      	bne.n	8004ba8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	68b9      	ldr	r1, [r7, #8]
 8004b58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b5a:	f000 fa0b 	bl	8004f74 <prvCopyDataToQueue>
 8004b5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d010      	beq.n	8004b8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6a:	3324      	adds	r3, #36	; 0x24
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fff5 	bl	8005b5c <xTaskRemoveFromEventList>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d013      	beq.n	8004ba0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b78:	4b3f      	ldr	r3, [pc, #252]	; (8004c78 <xQueueGenericSend+0x1f8>)
 8004b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	e00a      	b.n	8004ba0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d007      	beq.n	8004ba0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b90:	4b39      	ldr	r3, [pc, #228]	; (8004c78 <xQueueGenericSend+0x1f8>)
 8004b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ba0:	f001 ff28 	bl	80069f4 <vPortExitCritical>
				return pdPASS;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e063      	b.n	8004c70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d103      	bne.n	8004bb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bae:	f001 ff21 	bl	80069f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e05c      	b.n	8004c70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d106      	bne.n	8004bca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bbc:	f107 0314 	add.w	r3, r7, #20
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f001 f82f 	bl	8005c24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bca:	f001 ff13 	bl	80069f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bce:	f000 fd9b 	bl	8005708 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bd2:	f001 fedf 	bl	8006994 <vPortEnterCritical>
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bdc:	b25b      	sxtb	r3, r3
 8004bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be2:	d103      	bne.n	8004bec <xQueueGenericSend+0x16c>
 8004be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bf2:	b25b      	sxtb	r3, r3
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf8:	d103      	bne.n	8004c02 <xQueueGenericSend+0x182>
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c02:	f001 fef7 	bl	80069f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c06:	1d3a      	adds	r2, r7, #4
 8004c08:	f107 0314 	add.w	r3, r7, #20
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f001 f81e 	bl	8005c50 <xTaskCheckForTimeOut>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d124      	bne.n	8004c64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c1c:	f000 faa2 	bl	8005164 <prvIsQueueFull>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d018      	beq.n	8004c58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	3310      	adds	r3, #16
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 ff44 	bl	8005abc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c36:	f000 fa2d 	bl	8005094 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c3a:	f000 fd73 	bl	8005724 <xTaskResumeAll>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f47f af7c 	bne.w	8004b3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004c46:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <xQueueGenericSend+0x1f8>)
 8004c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	e772      	b.n	8004b3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c5a:	f000 fa1b 	bl	8005094 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c5e:	f000 fd61 	bl	8005724 <xTaskResumeAll>
 8004c62:	e76c      	b.n	8004b3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c66:	f000 fa15 	bl	8005094 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c6a:	f000 fd5b 	bl	8005724 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3738      	adds	r7, #56	; 0x38
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	e000ed04 	.word	0xe000ed04

08004c7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b090      	sub	sp, #64	; 0x40
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10a      	bne.n	8004caa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c98:	f383 8811 	msr	BASEPRI, r3
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ca6:	bf00      	nop
 8004ca8:	e7fe      	b.n	8004ca8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d103      	bne.n	8004cb8 <xQueueGenericSendFromISR+0x3c>
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <xQueueGenericSendFromISR+0x40>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e000      	b.n	8004cbe <xQueueGenericSendFromISR+0x42>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10a      	bne.n	8004cd8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004cd4:	bf00      	nop
 8004cd6:	e7fe      	b.n	8004cd6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d103      	bne.n	8004ce6 <xQueueGenericSendFromISR+0x6a>
 8004cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <xQueueGenericSendFromISR+0x6e>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e000      	b.n	8004cec <xQueueGenericSendFromISR+0x70>
 8004cea:	2300      	movs	r3, #0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10a      	bne.n	8004d06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	623b      	str	r3, [r7, #32]
}
 8004d02:	bf00      	nop
 8004d04:	e7fe      	b.n	8004d04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d06:	f001 ff27 	bl	8006b58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d0a:	f3ef 8211 	mrs	r2, BASEPRI
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	61fa      	str	r2, [r7, #28]
 8004d20:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d22:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d24:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d302      	bcc.n	8004d38 <xQueueGenericSendFromISR+0xbc>
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d12f      	bne.n	8004d98 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d4e:	f000 f911 	bl	8004f74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d52:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5a:	d112      	bne.n	8004d82 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d016      	beq.n	8004d92 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d66:	3324      	adds	r3, #36	; 0x24
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 fef7 	bl	8005b5c <xTaskRemoveFromEventList>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00e      	beq.n	8004d92 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00b      	beq.n	8004d92 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	e007      	b.n	8004d92 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d86:	3301      	adds	r3, #1
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	b25a      	sxtb	r2, r3
 8004d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004d92:	2301      	movs	r3, #1
 8004d94:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004d96:	e001      	b.n	8004d9c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004da6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3740      	adds	r7, #64	; 0x40
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
	...

08004db4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b08c      	sub	sp, #48	; 0x30
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10a      	bne.n	8004de4 <xQueueReceive+0x30>
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	623b      	str	r3, [r7, #32]
}
 8004de0:	bf00      	nop
 8004de2:	e7fe      	b.n	8004de2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d103      	bne.n	8004df2 <xQueueReceive+0x3e>
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <xQueueReceive+0x42>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <xQueueReceive+0x44>
 8004df6:	2300      	movs	r3, #0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10a      	bne.n	8004e12 <xQueueReceive+0x5e>
	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	61fb      	str	r3, [r7, #28]
}
 8004e0e:	bf00      	nop
 8004e10:	e7fe      	b.n	8004e10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e12:	f001 f865 	bl	8005ee0 <xTaskGetSchedulerState>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d102      	bne.n	8004e22 <xQueueReceive+0x6e>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <xQueueReceive+0x72>
 8004e22:	2301      	movs	r3, #1
 8004e24:	e000      	b.n	8004e28 <xQueueReceive+0x74>
 8004e26:	2300      	movs	r3, #0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10a      	bne.n	8004e42 <xQueueReceive+0x8e>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	61bb      	str	r3, [r7, #24]
}
 8004e3e:	bf00      	nop
 8004e40:	e7fe      	b.n	8004e40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e42:	f001 fda7 	bl	8006994 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d01f      	beq.n	8004e92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e52:	68b9      	ldr	r1, [r7, #8]
 8004e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e56:	f000 f8f7 	bl	8005048 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	1e5a      	subs	r2, r3, #1
 8004e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00f      	beq.n	8004e8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6c:	3310      	adds	r3, #16
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fe74 	bl	8005b5c <xTaskRemoveFromEventList>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d007      	beq.n	8004e8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e7a:	4b3d      	ldr	r3, [pc, #244]	; (8004f70 <xQueueReceive+0x1bc>)
 8004e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e8a:	f001 fdb3 	bl	80069f4 <vPortExitCritical>
				return pdPASS;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e069      	b.n	8004f66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d103      	bne.n	8004ea0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e98:	f001 fdac 	bl	80069f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	e062      	b.n	8004f66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ea6:	f107 0310 	add.w	r3, r7, #16
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 feba 	bl	8005c24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004eb4:	f001 fd9e 	bl	80069f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004eb8:	f000 fc26 	bl	8005708 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ebc:	f001 fd6a 	bl	8006994 <vPortEnterCritical>
 8004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ec6:	b25b      	sxtb	r3, r3
 8004ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ecc:	d103      	bne.n	8004ed6 <xQueueReceive+0x122>
 8004ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004edc:	b25b      	sxtb	r3, r3
 8004ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee2:	d103      	bne.n	8004eec <xQueueReceive+0x138>
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eec:	f001 fd82 	bl	80069f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ef0:	1d3a      	adds	r2, r7, #4
 8004ef2:	f107 0310 	add.w	r3, r7, #16
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 fea9 	bl	8005c50 <xTaskCheckForTimeOut>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d123      	bne.n	8004f4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f06:	f000 f917 	bl	8005138 <prvIsQueueEmpty>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d017      	beq.n	8004f40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	3324      	adds	r3, #36	; 0x24
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	4611      	mov	r1, r2
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 fdcf 	bl	8005abc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f20:	f000 f8b8 	bl	8005094 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f24:	f000 fbfe 	bl	8005724 <xTaskResumeAll>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d189      	bne.n	8004e42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004f2e:	4b10      	ldr	r3, [pc, #64]	; (8004f70 <xQueueReceive+0x1bc>)
 8004f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	e780      	b.n	8004e42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f42:	f000 f8a7 	bl	8005094 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f46:	f000 fbed 	bl	8005724 <xTaskResumeAll>
 8004f4a:	e77a      	b.n	8004e42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f4e:	f000 f8a1 	bl	8005094 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f52:	f000 fbe7 	bl	8005724 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f58:	f000 f8ee 	bl	8005138 <prvIsQueueEmpty>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f43f af6f 	beq.w	8004e42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3730      	adds	r7, #48	; 0x30
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	e000ed04 	.word	0xe000ed04

08004f74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f80:	2300      	movs	r3, #0
 8004f82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10d      	bne.n	8004fae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d14d      	bne.n	8005036 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 ffbc 	bl	8005f1c <xTaskPriorityDisinherit>
 8004fa4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	609a      	str	r2, [r3, #8]
 8004fac:	e043      	b.n	8005036 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d119      	bne.n	8004fe8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6858      	ldr	r0, [r3, #4]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	68b9      	ldr	r1, [r7, #8]
 8004fc0:	f002 f917 	bl	80071f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	441a      	add	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d32b      	bcc.n	8005036 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	605a      	str	r2, [r3, #4]
 8004fe6:	e026      	b.n	8005036 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	68d8      	ldr	r0, [r3, #12]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	68b9      	ldr	r1, [r7, #8]
 8004ff4:	f002 f8fd 	bl	80071f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005000:	425b      	negs	r3, r3
 8005002:	441a      	add	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	68da      	ldr	r2, [r3, #12]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d207      	bcs.n	8005024 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501c:	425b      	negs	r3, r3
 800501e:	441a      	add	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d105      	bne.n	8005036 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	3b01      	subs	r3, #1
 8005034:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800503e:	697b      	ldr	r3, [r7, #20]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	2b00      	cmp	r3, #0
 8005058:	d018      	beq.n	800508c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	441a      	add	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	429a      	cmp	r2, r3
 8005072:	d303      	bcc.n	800507c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68d9      	ldr	r1, [r3, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005084:	461a      	mov	r2, r3
 8005086:	6838      	ldr	r0, [r7, #0]
 8005088:	f002 f8b3 	bl	80071f2 <memcpy>
	}
}
 800508c:	bf00      	nop
 800508e:	3708      	adds	r7, #8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800509c:	f001 fc7a 	bl	8006994 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050a8:	e011      	b.n	80050ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d012      	beq.n	80050d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3324      	adds	r3, #36	; 0x24
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fd50 	bl	8005b5c <xTaskRemoveFromEventList>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80050c2:	f000 fe27 	bl	8005d14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	dce9      	bgt.n	80050aa <prvUnlockQueue+0x16>
 80050d6:	e000      	b.n	80050da <prvUnlockQueue+0x46>
					break;
 80050d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	22ff      	movs	r2, #255	; 0xff
 80050de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80050e2:	f001 fc87 	bl	80069f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80050e6:	f001 fc55 	bl	8006994 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050f2:	e011      	b.n	8005118 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d012      	beq.n	8005122 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3310      	adds	r3, #16
 8005100:	4618      	mov	r0, r3
 8005102:	f000 fd2b 	bl	8005b5c <xTaskRemoveFromEventList>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800510c:	f000 fe02 	bl	8005d14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005110:	7bbb      	ldrb	r3, [r7, #14]
 8005112:	3b01      	subs	r3, #1
 8005114:	b2db      	uxtb	r3, r3
 8005116:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005118:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800511c:	2b00      	cmp	r3, #0
 800511e:	dce9      	bgt.n	80050f4 <prvUnlockQueue+0x60>
 8005120:	e000      	b.n	8005124 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005122:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	22ff      	movs	r2, #255	; 0xff
 8005128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800512c:	f001 fc62 	bl	80069f4 <vPortExitCritical>
}
 8005130:	bf00      	nop
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005140:	f001 fc28 	bl	8006994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005148:	2b00      	cmp	r3, #0
 800514a:	d102      	bne.n	8005152 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800514c:	2301      	movs	r3, #1
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	e001      	b.n	8005156 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005152:	2300      	movs	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005156:	f001 fc4d 	bl	80069f4 <vPortExitCritical>

	return xReturn;
 800515a:	68fb      	ldr	r3, [r7, #12]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800516c:	f001 fc12 	bl	8006994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005178:	429a      	cmp	r2, r3
 800517a:	d102      	bne.n	8005182 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800517c:	2301      	movs	r3, #1
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	e001      	b.n	8005186 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005182:	2300      	movs	r3, #0
 8005184:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005186:	f001 fc35 	bl	80069f4 <vPortExitCritical>

	return xReturn;
 800518a:	68fb      	ldr	r3, [r7, #12]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]
 80051a2:	e014      	b.n	80051ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80051a4:	4a0f      	ldr	r2, [pc, #60]	; (80051e4 <vQueueAddToRegistry+0x50>)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10b      	bne.n	80051c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80051b0:	490c      	ldr	r1, [pc, #48]	; (80051e4 <vQueueAddToRegistry+0x50>)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80051ba:	4a0a      	ldr	r2, [pc, #40]	; (80051e4 <vQueueAddToRegistry+0x50>)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	4413      	add	r3, r2
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80051c6:	e006      	b.n	80051d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	3301      	adds	r3, #1
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2b07      	cmp	r3, #7
 80051d2:	d9e7      	bls.n	80051a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20000d5c 	.word	0x20000d5c

080051e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80051f8:	f001 fbcc 	bl	8006994 <vPortEnterCritical>
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005202:	b25b      	sxtb	r3, r3
 8005204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005208:	d103      	bne.n	8005212 <vQueueWaitForMessageRestricted+0x2a>
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005218:	b25b      	sxtb	r3, r3
 800521a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521e:	d103      	bne.n	8005228 <vQueueWaitForMessageRestricted+0x40>
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005228:	f001 fbe4 	bl	80069f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005230:	2b00      	cmp	r3, #0
 8005232:	d106      	bne.n	8005242 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	3324      	adds	r3, #36	; 0x24
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	4618      	mov	r0, r3
 800523e:	f000 fc61 	bl	8005b04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005242:	6978      	ldr	r0, [r7, #20]
 8005244:	f7ff ff26 	bl	8005094 <prvUnlockQueue>
	}
 8005248:	bf00      	nop
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08e      	sub	sp, #56	; 0x38
 8005254:	af04      	add	r7, sp, #16
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800525e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10a      	bne.n	800527a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	623b      	str	r3, [r7, #32]
}
 8005276:	bf00      	nop
 8005278:	e7fe      	b.n	8005278 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800527a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10a      	bne.n	8005296 <xTaskCreateStatic+0x46>
	__asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	61fb      	str	r3, [r7, #28]
}
 8005292:	bf00      	nop
 8005294:	e7fe      	b.n	8005294 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005296:	23bc      	movs	r3, #188	; 0xbc
 8005298:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	2bbc      	cmp	r3, #188	; 0xbc
 800529e:	d00a      	beq.n	80052b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	61bb      	str	r3, [r7, #24]
}
 80052b2:	bf00      	nop
 80052b4:	e7fe      	b.n	80052b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80052b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d01e      	beq.n	80052fc <xTaskCreateStatic+0xac>
 80052be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d01b      	beq.n	80052fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	2202      	movs	r2, #2
 80052d2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052d6:	2300      	movs	r3, #0
 80052d8:	9303      	str	r3, [sp, #12]
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	9302      	str	r3, [sp, #8]
 80052de:	f107 0314 	add.w	r3, r7, #20
 80052e2:	9301      	str	r3, [sp, #4]
 80052e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	68b9      	ldr	r1, [r7, #8]
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 f850 	bl	8005394 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052f6:	f000 f8f3 	bl	80054e0 <prvAddNewTaskToReadyList>
 80052fa:	e001      	b.n	8005300 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80052fc:	2300      	movs	r3, #0
 80052fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005300:	697b      	ldr	r3, [r7, #20]
	}
 8005302:	4618      	mov	r0, r3
 8005304:	3728      	adds	r7, #40	; 0x28
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800530a:	b580      	push	{r7, lr}
 800530c:	b08c      	sub	sp, #48	; 0x30
 800530e:	af04      	add	r7, sp, #16
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	603b      	str	r3, [r7, #0]
 8005316:	4613      	mov	r3, r2
 8005318:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800531a:	88fb      	ldrh	r3, [r7, #6]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4618      	mov	r0, r3
 8005320:	f001 fc5a 	bl	8006bd8 <pvPortMalloc>
 8005324:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00e      	beq.n	800534a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800532c:	20bc      	movs	r0, #188	; 0xbc
 800532e:	f001 fc53 	bl	8006bd8 <pvPortMalloc>
 8005332:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	631a      	str	r2, [r3, #48]	; 0x30
 8005340:	e005      	b.n	800534e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005342:	6978      	ldr	r0, [r7, #20]
 8005344:	f001 fd14 	bl	8006d70 <vPortFree>
 8005348:	e001      	b.n	800534e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800534a:	2300      	movs	r3, #0
 800534c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d017      	beq.n	8005384 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800535c:	88fa      	ldrh	r2, [r7, #6]
 800535e:	2300      	movs	r3, #0
 8005360:	9303      	str	r3, [sp, #12]
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	9302      	str	r3, [sp, #8]
 8005366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005368:	9301      	str	r3, [sp, #4]
 800536a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68b9      	ldr	r1, [r7, #8]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 f80e 	bl	8005394 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005378:	69f8      	ldr	r0, [r7, #28]
 800537a:	f000 f8b1 	bl	80054e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800537e:	2301      	movs	r3, #1
 8005380:	61bb      	str	r3, [r7, #24]
 8005382:	e002      	b.n	800538a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005384:	f04f 33ff 	mov.w	r3, #4294967295
 8005388:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800538a:	69bb      	ldr	r3, [r7, #24]
	}
 800538c:	4618      	mov	r0, r3
 800538e:	3720      	adds	r7, #32
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	461a      	mov	r2, r3
 80053ac:	21a5      	movs	r1, #165	; 0xa5
 80053ae:	f001 ff2e 	bl	800720e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80053bc:	3b01      	subs	r3, #1
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	f023 0307 	bic.w	r3, r3, #7
 80053ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	617b      	str	r3, [r7, #20]
}
 80053e8:	bf00      	nop
 80053ea:	e7fe      	b.n	80053ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d01f      	beq.n	8005432 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053f2:	2300      	movs	r3, #0
 80053f4:	61fb      	str	r3, [r7, #28]
 80053f6:	e012      	b.n	800541e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	4413      	add	r3, r2
 80053fe:	7819      	ldrb	r1, [r3, #0]
 8005400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	4413      	add	r3, r2
 8005406:	3334      	adds	r3, #52	; 0x34
 8005408:	460a      	mov	r2, r1
 800540a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	4413      	add	r3, r2
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d006      	beq.n	8005426 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	3301      	adds	r3, #1
 800541c:	61fb      	str	r3, [r7, #28]
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	2b0f      	cmp	r3, #15
 8005422:	d9e9      	bls.n	80053f8 <prvInitialiseNewTask+0x64>
 8005424:	e000      	b.n	8005428 <prvInitialiseNewTask+0x94>
			{
				break;
 8005426:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005430:	e003      	b.n	800543a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543c:	2b37      	cmp	r3, #55	; 0x37
 800543e:	d901      	bls.n	8005444 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005440:	2337      	movs	r3, #55	; 0x37
 8005442:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005448:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800544e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005452:	2200      	movs	r2, #0
 8005454:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005458:	3304      	adds	r3, #4
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff f978 	bl	8004750 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005462:	3318      	adds	r3, #24
 8005464:	4618      	mov	r0, r3
 8005466:	f7ff f973 	bl	8004750 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800546e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005478:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800547e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005482:	2200      	movs	r2, #0
 8005484:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548a:	2200      	movs	r2, #0
 800548c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005492:	3354      	adds	r3, #84	; 0x54
 8005494:	2260      	movs	r2, #96	; 0x60
 8005496:	2100      	movs	r1, #0
 8005498:	4618      	mov	r0, r3
 800549a:	f001 feb8 	bl	800720e <memset>
 800549e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a0:	4a0c      	ldr	r2, [pc, #48]	; (80054d4 <prvInitialiseNewTask+0x140>)
 80054a2:	659a      	str	r2, [r3, #88]	; 0x58
 80054a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a6:	4a0c      	ldr	r2, [pc, #48]	; (80054d8 <prvInitialiseNewTask+0x144>)
 80054a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	4a0b      	ldr	r2, [pc, #44]	; (80054dc <prvInitialiseNewTask+0x148>)
 80054ae:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	68f9      	ldr	r1, [r7, #12]
 80054b4:	69b8      	ldr	r0, [r7, #24]
 80054b6:	f001 f941 	bl	800673c <pxPortInitialiseStack>
 80054ba:	4602      	mov	r2, r0
 80054bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80054c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054cc:	bf00      	nop
 80054ce:	3720      	adds	r7, #32
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	08008e40 	.word	0x08008e40
 80054d8:	08008e60 	.word	0x08008e60
 80054dc:	08008e20 	.word	0x08008e20

080054e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054e8:	f001 fa54 	bl	8006994 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054ec:	4b2d      	ldr	r3, [pc, #180]	; (80055a4 <prvAddNewTaskToReadyList+0xc4>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3301      	adds	r3, #1
 80054f2:	4a2c      	ldr	r2, [pc, #176]	; (80055a4 <prvAddNewTaskToReadyList+0xc4>)
 80054f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054f6:	4b2c      	ldr	r3, [pc, #176]	; (80055a8 <prvAddNewTaskToReadyList+0xc8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d109      	bne.n	8005512 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054fe:	4a2a      	ldr	r2, [pc, #168]	; (80055a8 <prvAddNewTaskToReadyList+0xc8>)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005504:	4b27      	ldr	r3, [pc, #156]	; (80055a4 <prvAddNewTaskToReadyList+0xc4>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d110      	bne.n	800552e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800550c:	f000 fc26 	bl	8005d5c <prvInitialiseTaskLists>
 8005510:	e00d      	b.n	800552e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005512:	4b26      	ldr	r3, [pc, #152]	; (80055ac <prvAddNewTaskToReadyList+0xcc>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d109      	bne.n	800552e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800551a:	4b23      	ldr	r3, [pc, #140]	; (80055a8 <prvAddNewTaskToReadyList+0xc8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005524:	429a      	cmp	r2, r3
 8005526:	d802      	bhi.n	800552e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005528:	4a1f      	ldr	r2, [pc, #124]	; (80055a8 <prvAddNewTaskToReadyList+0xc8>)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800552e:	4b20      	ldr	r3, [pc, #128]	; (80055b0 <prvAddNewTaskToReadyList+0xd0>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3301      	adds	r3, #1
 8005534:	4a1e      	ldr	r2, [pc, #120]	; (80055b0 <prvAddNewTaskToReadyList+0xd0>)
 8005536:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005538:	4b1d      	ldr	r3, [pc, #116]	; (80055b0 <prvAddNewTaskToReadyList+0xd0>)
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005544:	4b1b      	ldr	r3, [pc, #108]	; (80055b4 <prvAddNewTaskToReadyList+0xd4>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	429a      	cmp	r2, r3
 800554a:	d903      	bls.n	8005554 <prvAddNewTaskToReadyList+0x74>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	4a18      	ldr	r2, [pc, #96]	; (80055b4 <prvAddNewTaskToReadyList+0xd4>)
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005558:	4613      	mov	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4a15      	ldr	r2, [pc, #84]	; (80055b8 <prvAddNewTaskToReadyList+0xd8>)
 8005562:	441a      	add	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3304      	adds	r3, #4
 8005568:	4619      	mov	r1, r3
 800556a:	4610      	mov	r0, r2
 800556c:	f7ff f8fd 	bl	800476a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005570:	f001 fa40 	bl	80069f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005574:	4b0d      	ldr	r3, [pc, #52]	; (80055ac <prvAddNewTaskToReadyList+0xcc>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00e      	beq.n	800559a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800557c:	4b0a      	ldr	r3, [pc, #40]	; (80055a8 <prvAddNewTaskToReadyList+0xc8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005586:	429a      	cmp	r2, r3
 8005588:	d207      	bcs.n	800559a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800558a:	4b0c      	ldr	r3, [pc, #48]	; (80055bc <prvAddNewTaskToReadyList+0xdc>)
 800558c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800559a:	bf00      	nop
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	20001270 	.word	0x20001270
 80055a8:	20000d9c 	.word	0x20000d9c
 80055ac:	2000127c 	.word	0x2000127c
 80055b0:	2000128c 	.word	0x2000128c
 80055b4:	20001278 	.word	0x20001278
 80055b8:	20000da0 	.word	0x20000da0
 80055bc:	e000ed04 	.word	0xe000ed04

080055c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80055c8:	2300      	movs	r3, #0
 80055ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d017      	beq.n	8005602 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80055d2:	4b13      	ldr	r3, [pc, #76]	; (8005620 <vTaskDelay+0x60>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00a      	beq.n	80055f0 <vTaskDelay+0x30>
	__asm volatile
 80055da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	60bb      	str	r3, [r7, #8]
}
 80055ec:	bf00      	nop
 80055ee:	e7fe      	b.n	80055ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80055f0:	f000 f88a 	bl	8005708 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80055f4:	2100      	movs	r1, #0
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fcfe 	bl	8005ff8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80055fc:	f000 f892 	bl	8005724 <xTaskResumeAll>
 8005600:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d107      	bne.n	8005618 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005608:	4b06      	ldr	r3, [pc, #24]	; (8005624 <vTaskDelay+0x64>)
 800560a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005618:	bf00      	nop
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	20001298 	.word	0x20001298
 8005624:	e000ed04 	.word	0xe000ed04

08005628 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b08a      	sub	sp, #40	; 0x28
 800562c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800562e:	2300      	movs	r3, #0
 8005630:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005632:	2300      	movs	r3, #0
 8005634:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005636:	463a      	mov	r2, r7
 8005638:	1d39      	adds	r1, r7, #4
 800563a:	f107 0308 	add.w	r3, r7, #8
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff f832 	bl	80046a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005644:	6839      	ldr	r1, [r7, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	9202      	str	r2, [sp, #8]
 800564c:	9301      	str	r3, [sp, #4]
 800564e:	2300      	movs	r3, #0
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	2300      	movs	r3, #0
 8005654:	460a      	mov	r2, r1
 8005656:	4924      	ldr	r1, [pc, #144]	; (80056e8 <vTaskStartScheduler+0xc0>)
 8005658:	4824      	ldr	r0, [pc, #144]	; (80056ec <vTaskStartScheduler+0xc4>)
 800565a:	f7ff fdf9 	bl	8005250 <xTaskCreateStatic>
 800565e:	4603      	mov	r3, r0
 8005660:	4a23      	ldr	r2, [pc, #140]	; (80056f0 <vTaskStartScheduler+0xc8>)
 8005662:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005664:	4b22      	ldr	r3, [pc, #136]	; (80056f0 <vTaskStartScheduler+0xc8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800566c:	2301      	movs	r3, #1
 800566e:	617b      	str	r3, [r7, #20]
 8005670:	e001      	b.n	8005676 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005672:	2300      	movs	r3, #0
 8005674:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d102      	bne.n	8005682 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800567c:	f000 fd10 	bl	80060a0 <xTimerCreateTimerTask>
 8005680:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d11b      	bne.n	80056c0 <vTaskStartScheduler+0x98>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	613b      	str	r3, [r7, #16]
}
 800569a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800569c:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <vTaskStartScheduler+0xcc>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3354      	adds	r3, #84	; 0x54
 80056a2:	4a15      	ldr	r2, [pc, #84]	; (80056f8 <vTaskStartScheduler+0xd0>)
 80056a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056a6:	4b15      	ldr	r3, [pc, #84]	; (80056fc <vTaskStartScheduler+0xd4>)
 80056a8:	f04f 32ff 	mov.w	r2, #4294967295
 80056ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056ae:	4b14      	ldr	r3, [pc, #80]	; (8005700 <vTaskStartScheduler+0xd8>)
 80056b0:	2201      	movs	r2, #1
 80056b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056b4:	4b13      	ldr	r3, [pc, #76]	; (8005704 <vTaskStartScheduler+0xdc>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056ba:	f001 f8c9 	bl	8006850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056be:	e00e      	b.n	80056de <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c6:	d10a      	bne.n	80056de <vTaskStartScheduler+0xb6>
	__asm volatile
 80056c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	60fb      	str	r3, [r7, #12]
}
 80056da:	bf00      	nop
 80056dc:	e7fe      	b.n	80056dc <vTaskStartScheduler+0xb4>
}
 80056de:	bf00      	nop
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	080082d8 	.word	0x080082d8
 80056ec:	08005d2d 	.word	0x08005d2d
 80056f0:	20001294 	.word	0x20001294
 80056f4:	20000d9c 	.word	0x20000d9c
 80056f8:	20000010 	.word	0x20000010
 80056fc:	20001290 	.word	0x20001290
 8005700:	2000127c 	.word	0x2000127c
 8005704:	20001274 	.word	0x20001274

08005708 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800570c:	4b04      	ldr	r3, [pc, #16]	; (8005720 <vTaskSuspendAll+0x18>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3301      	adds	r3, #1
 8005712:	4a03      	ldr	r2, [pc, #12]	; (8005720 <vTaskSuspendAll+0x18>)
 8005714:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005716:	bf00      	nop
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	20001298 	.word	0x20001298

08005724 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800572a:	2300      	movs	r3, #0
 800572c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800572e:	2300      	movs	r3, #0
 8005730:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005732:	4b42      	ldr	r3, [pc, #264]	; (800583c <xTaskResumeAll+0x118>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10a      	bne.n	8005750 <xTaskResumeAll+0x2c>
	__asm volatile
 800573a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	603b      	str	r3, [r7, #0]
}
 800574c:	bf00      	nop
 800574e:	e7fe      	b.n	800574e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005750:	f001 f920 	bl	8006994 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005754:	4b39      	ldr	r3, [pc, #228]	; (800583c <xTaskResumeAll+0x118>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3b01      	subs	r3, #1
 800575a:	4a38      	ldr	r2, [pc, #224]	; (800583c <xTaskResumeAll+0x118>)
 800575c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800575e:	4b37      	ldr	r3, [pc, #220]	; (800583c <xTaskResumeAll+0x118>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d162      	bne.n	800582c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005766:	4b36      	ldr	r3, [pc, #216]	; (8005840 <xTaskResumeAll+0x11c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d05e      	beq.n	800582c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800576e:	e02f      	b.n	80057d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005770:	4b34      	ldr	r3, [pc, #208]	; (8005844 <xTaskResumeAll+0x120>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	3318      	adds	r3, #24
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff f851 	bl	8004824 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3304      	adds	r3, #4
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff f84c 	bl	8004824 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005790:	4b2d      	ldr	r3, [pc, #180]	; (8005848 <xTaskResumeAll+0x124>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	429a      	cmp	r2, r3
 8005796:	d903      	bls.n	80057a0 <xTaskResumeAll+0x7c>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579c:	4a2a      	ldr	r2, [pc, #168]	; (8005848 <xTaskResumeAll+0x124>)
 800579e:	6013      	str	r3, [r2, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a4:	4613      	mov	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4a27      	ldr	r2, [pc, #156]	; (800584c <xTaskResumeAll+0x128>)
 80057ae:	441a      	add	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	3304      	adds	r3, #4
 80057b4:	4619      	mov	r1, r3
 80057b6:	4610      	mov	r0, r2
 80057b8:	f7fe ffd7 	bl	800476a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c0:	4b23      	ldr	r3, [pc, #140]	; (8005850 <xTaskResumeAll+0x12c>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d302      	bcc.n	80057d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80057ca:	4b22      	ldr	r3, [pc, #136]	; (8005854 <xTaskResumeAll+0x130>)
 80057cc:	2201      	movs	r2, #1
 80057ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057d0:	4b1c      	ldr	r3, [pc, #112]	; (8005844 <xTaskResumeAll+0x120>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1cb      	bne.n	8005770 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80057de:	f000 fb5f 	bl	8005ea0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80057e2:	4b1d      	ldr	r3, [pc, #116]	; (8005858 <xTaskResumeAll+0x134>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d010      	beq.n	8005810 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80057ee:	f000 f847 	bl	8005880 <xTaskIncrementTick>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80057f8:	4b16      	ldr	r3, [pc, #88]	; (8005854 <xTaskResumeAll+0x130>)
 80057fa:	2201      	movs	r2, #1
 80057fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3b01      	subs	r3, #1
 8005802:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f1      	bne.n	80057ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800580a:	4b13      	ldr	r3, [pc, #76]	; (8005858 <xTaskResumeAll+0x134>)
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005810:	4b10      	ldr	r3, [pc, #64]	; (8005854 <xTaskResumeAll+0x130>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d009      	beq.n	800582c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005818:	2301      	movs	r3, #1
 800581a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800581c:	4b0f      	ldr	r3, [pc, #60]	; (800585c <xTaskResumeAll+0x138>)
 800581e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800582c:	f001 f8e2 	bl	80069f4 <vPortExitCritical>

	return xAlreadyYielded;
 8005830:	68bb      	ldr	r3, [r7, #8]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	20001298 	.word	0x20001298
 8005840:	20001270 	.word	0x20001270
 8005844:	20001230 	.word	0x20001230
 8005848:	20001278 	.word	0x20001278
 800584c:	20000da0 	.word	0x20000da0
 8005850:	20000d9c 	.word	0x20000d9c
 8005854:	20001284 	.word	0x20001284
 8005858:	20001280 	.word	0x20001280
 800585c:	e000ed04 	.word	0xe000ed04

08005860 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005866:	4b05      	ldr	r3, [pc, #20]	; (800587c <xTaskGetTickCount+0x1c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800586c:	687b      	ldr	r3, [r7, #4]
}
 800586e:	4618      	mov	r0, r3
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	20001274 	.word	0x20001274

08005880 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800588a:	4b4f      	ldr	r3, [pc, #316]	; (80059c8 <xTaskIncrementTick+0x148>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	f040 808f 	bne.w	80059b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005894:	4b4d      	ldr	r3, [pc, #308]	; (80059cc <xTaskIncrementTick+0x14c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3301      	adds	r3, #1
 800589a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800589c:	4a4b      	ldr	r2, [pc, #300]	; (80059cc <xTaskIncrementTick+0x14c>)
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d120      	bne.n	80058ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80058a8:	4b49      	ldr	r3, [pc, #292]	; (80059d0 <xTaskIncrementTick+0x150>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	603b      	str	r3, [r7, #0]
}
 80058c4:	bf00      	nop
 80058c6:	e7fe      	b.n	80058c6 <xTaskIncrementTick+0x46>
 80058c8:	4b41      	ldr	r3, [pc, #260]	; (80059d0 <xTaskIncrementTick+0x150>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	60fb      	str	r3, [r7, #12]
 80058ce:	4b41      	ldr	r3, [pc, #260]	; (80059d4 <xTaskIncrementTick+0x154>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a3f      	ldr	r2, [pc, #252]	; (80059d0 <xTaskIncrementTick+0x150>)
 80058d4:	6013      	str	r3, [r2, #0]
 80058d6:	4a3f      	ldr	r2, [pc, #252]	; (80059d4 <xTaskIncrementTick+0x154>)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6013      	str	r3, [r2, #0]
 80058dc:	4b3e      	ldr	r3, [pc, #248]	; (80059d8 <xTaskIncrementTick+0x158>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3301      	adds	r3, #1
 80058e2:	4a3d      	ldr	r2, [pc, #244]	; (80059d8 <xTaskIncrementTick+0x158>)
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	f000 fadb 	bl	8005ea0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80058ea:	4b3c      	ldr	r3, [pc, #240]	; (80059dc <xTaskIncrementTick+0x15c>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d349      	bcc.n	8005988 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058f4:	4b36      	ldr	r3, [pc, #216]	; (80059d0 <xTaskIncrementTick+0x150>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d104      	bne.n	8005908 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058fe:	4b37      	ldr	r3, [pc, #220]	; (80059dc <xTaskIncrementTick+0x15c>)
 8005900:	f04f 32ff 	mov.w	r2, #4294967295
 8005904:	601a      	str	r2, [r3, #0]
					break;
 8005906:	e03f      	b.n	8005988 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005908:	4b31      	ldr	r3, [pc, #196]	; (80059d0 <xTaskIncrementTick+0x150>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	429a      	cmp	r2, r3
 800591e:	d203      	bcs.n	8005928 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005920:	4a2e      	ldr	r2, [pc, #184]	; (80059dc <xTaskIncrementTick+0x15c>)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005926:	e02f      	b.n	8005988 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	3304      	adds	r3, #4
 800592c:	4618      	mov	r0, r3
 800592e:	f7fe ff79 	bl	8004824 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005936:	2b00      	cmp	r3, #0
 8005938:	d004      	beq.n	8005944 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	3318      	adds	r3, #24
 800593e:	4618      	mov	r0, r3
 8005940:	f7fe ff70 	bl	8004824 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005948:	4b25      	ldr	r3, [pc, #148]	; (80059e0 <xTaskIncrementTick+0x160>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	429a      	cmp	r2, r3
 800594e:	d903      	bls.n	8005958 <xTaskIncrementTick+0xd8>
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005954:	4a22      	ldr	r2, [pc, #136]	; (80059e0 <xTaskIncrementTick+0x160>)
 8005956:	6013      	str	r3, [r2, #0]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800595c:	4613      	mov	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4a1f      	ldr	r2, [pc, #124]	; (80059e4 <xTaskIncrementTick+0x164>)
 8005966:	441a      	add	r2, r3
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	3304      	adds	r3, #4
 800596c:	4619      	mov	r1, r3
 800596e:	4610      	mov	r0, r2
 8005970:	f7fe fefb 	bl	800476a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005978:	4b1b      	ldr	r3, [pc, #108]	; (80059e8 <xTaskIncrementTick+0x168>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597e:	429a      	cmp	r2, r3
 8005980:	d3b8      	bcc.n	80058f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005982:	2301      	movs	r3, #1
 8005984:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005986:	e7b5      	b.n	80058f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005988:	4b17      	ldr	r3, [pc, #92]	; (80059e8 <xTaskIncrementTick+0x168>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800598e:	4915      	ldr	r1, [pc, #84]	; (80059e4 <xTaskIncrementTick+0x164>)
 8005990:	4613      	mov	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	440b      	add	r3, r1
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d901      	bls.n	80059a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80059a0:	2301      	movs	r3, #1
 80059a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80059a4:	4b11      	ldr	r3, [pc, #68]	; (80059ec <xTaskIncrementTick+0x16c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d007      	beq.n	80059bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80059ac:	2301      	movs	r3, #1
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	e004      	b.n	80059bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80059b2:	4b0f      	ldr	r3, [pc, #60]	; (80059f0 <xTaskIncrementTick+0x170>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3301      	adds	r3, #1
 80059b8:	4a0d      	ldr	r2, [pc, #52]	; (80059f0 <xTaskIncrementTick+0x170>)
 80059ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80059bc:	697b      	ldr	r3, [r7, #20]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	20001298 	.word	0x20001298
 80059cc:	20001274 	.word	0x20001274
 80059d0:	20001228 	.word	0x20001228
 80059d4:	2000122c 	.word	0x2000122c
 80059d8:	20001288 	.word	0x20001288
 80059dc:	20001290 	.word	0x20001290
 80059e0:	20001278 	.word	0x20001278
 80059e4:	20000da0 	.word	0x20000da0
 80059e8:	20000d9c 	.word	0x20000d9c
 80059ec:	20001284 	.word	0x20001284
 80059f0:	20001280 	.word	0x20001280

080059f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80059fa:	4b2a      	ldr	r3, [pc, #168]	; (8005aa4 <vTaskSwitchContext+0xb0>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a02:	4b29      	ldr	r3, [pc, #164]	; (8005aa8 <vTaskSwitchContext+0xb4>)
 8005a04:	2201      	movs	r2, #1
 8005a06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a08:	e046      	b.n	8005a98 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005a0a:	4b27      	ldr	r3, [pc, #156]	; (8005aa8 <vTaskSwitchContext+0xb4>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a10:	4b26      	ldr	r3, [pc, #152]	; (8005aac <vTaskSwitchContext+0xb8>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	60fb      	str	r3, [r7, #12]
 8005a16:	e010      	b.n	8005a3a <vTaskSwitchContext+0x46>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <vTaskSwitchContext+0x40>
	__asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	607b      	str	r3, [r7, #4]
}
 8005a30:	bf00      	nop
 8005a32:	e7fe      	b.n	8005a32 <vTaskSwitchContext+0x3e>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	3b01      	subs	r3, #1
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	491d      	ldr	r1, [pc, #116]	; (8005ab0 <vTaskSwitchContext+0xbc>)
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	440b      	add	r3, r1
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d0e4      	beq.n	8005a18 <vTaskSwitchContext+0x24>
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	4613      	mov	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4a15      	ldr	r2, [pc, #84]	; (8005ab0 <vTaskSwitchContext+0xbc>)
 8005a5a:	4413      	add	r3, r2
 8005a5c:	60bb      	str	r3, [r7, #8]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	605a      	str	r2, [r3, #4]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	3308      	adds	r3, #8
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d104      	bne.n	8005a7e <vTaskSwitchContext+0x8a>
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	605a      	str	r2, [r3, #4]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	4a0b      	ldr	r2, [pc, #44]	; (8005ab4 <vTaskSwitchContext+0xc0>)
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	4a08      	ldr	r2, [pc, #32]	; (8005aac <vTaskSwitchContext+0xb8>)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a8e:	4b09      	ldr	r3, [pc, #36]	; (8005ab4 <vTaskSwitchContext+0xc0>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3354      	adds	r3, #84	; 0x54
 8005a94:	4a08      	ldr	r2, [pc, #32]	; (8005ab8 <vTaskSwitchContext+0xc4>)
 8005a96:	6013      	str	r3, [r2, #0]
}
 8005a98:	bf00      	nop
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	20001298 	.word	0x20001298
 8005aa8:	20001284 	.word	0x20001284
 8005aac:	20001278 	.word	0x20001278
 8005ab0:	20000da0 	.word	0x20000da0
 8005ab4:	20000d9c 	.word	0x20000d9c
 8005ab8:	20000010 	.word	0x20000010

08005abc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10a      	bne.n	8005ae2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	60fb      	str	r3, [r7, #12]
}
 8005ade:	bf00      	nop
 8005ae0:	e7fe      	b.n	8005ae0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ae2:	4b07      	ldr	r3, [pc, #28]	; (8005b00 <vTaskPlaceOnEventList+0x44>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3318      	adds	r3, #24
 8005ae8:	4619      	mov	r1, r3
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fe fe61 	bl	80047b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005af0:	2101      	movs	r1, #1
 8005af2:	6838      	ldr	r0, [r7, #0]
 8005af4:	f000 fa80 	bl	8005ff8 <prvAddCurrentTaskToDelayedList>
}
 8005af8:	bf00      	nop
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	20000d9c 	.word	0x20000d9c

08005b04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10a      	bne.n	8005b2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	617b      	str	r3, [r7, #20]
}
 8005b28:	bf00      	nop
 8005b2a:	e7fe      	b.n	8005b2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b2c:	4b0a      	ldr	r3, [pc, #40]	; (8005b58 <vTaskPlaceOnEventListRestricted+0x54>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3318      	adds	r3, #24
 8005b32:	4619      	mov	r1, r3
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f7fe fe18 	bl	800476a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d002      	beq.n	8005b46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005b40:	f04f 33ff 	mov.w	r3, #4294967295
 8005b44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b46:	6879      	ldr	r1, [r7, #4]
 8005b48:	68b8      	ldr	r0, [r7, #8]
 8005b4a:	f000 fa55 	bl	8005ff8 <prvAddCurrentTaskToDelayedList>
	}
 8005b4e:	bf00      	nop
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	20000d9c 	.word	0x20000d9c

08005b5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10a      	bne.n	8005b88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	60fb      	str	r3, [r7, #12]
}
 8005b84:	bf00      	nop
 8005b86:	e7fe      	b.n	8005b86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	3318      	adds	r3, #24
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7fe fe49 	bl	8004824 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b92:	4b1e      	ldr	r3, [pc, #120]	; (8005c0c <xTaskRemoveFromEventList+0xb0>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d11d      	bne.n	8005bd6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fe fe40 	bl	8004824 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba8:	4b19      	ldr	r3, [pc, #100]	; (8005c10 <xTaskRemoveFromEventList+0xb4>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d903      	bls.n	8005bb8 <xTaskRemoveFromEventList+0x5c>
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb4:	4a16      	ldr	r2, [pc, #88]	; (8005c10 <xTaskRemoveFromEventList+0xb4>)
 8005bb6:	6013      	str	r3, [r2, #0]
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4a13      	ldr	r2, [pc, #76]	; (8005c14 <xTaskRemoveFromEventList+0xb8>)
 8005bc6:	441a      	add	r2, r3
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	3304      	adds	r3, #4
 8005bcc:	4619      	mov	r1, r3
 8005bce:	4610      	mov	r0, r2
 8005bd0:	f7fe fdcb 	bl	800476a <vListInsertEnd>
 8005bd4:	e005      	b.n	8005be2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	3318      	adds	r3, #24
 8005bda:	4619      	mov	r1, r3
 8005bdc:	480e      	ldr	r0, [pc, #56]	; (8005c18 <xTaskRemoveFromEventList+0xbc>)
 8005bde:	f7fe fdc4 	bl	800476a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be6:	4b0d      	ldr	r3, [pc, #52]	; (8005c1c <xTaskRemoveFromEventList+0xc0>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d905      	bls.n	8005bfc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005bf4:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <xTaskRemoveFromEventList+0xc4>)
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	e001      	b.n	8005c00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c00:	697b      	ldr	r3, [r7, #20]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3718      	adds	r7, #24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20001298 	.word	0x20001298
 8005c10:	20001278 	.word	0x20001278
 8005c14:	20000da0 	.word	0x20000da0
 8005c18:	20001230 	.word	0x20001230
 8005c1c:	20000d9c 	.word	0x20000d9c
 8005c20:	20001284 	.word	0x20001284

08005c24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c2c:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <vTaskInternalSetTimeOutState+0x24>)
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c34:	4b05      	ldr	r3, [pc, #20]	; (8005c4c <vTaskInternalSetTimeOutState+0x28>)
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	605a      	str	r2, [r3, #4]
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	20001288 	.word	0x20001288
 8005c4c:	20001274 	.word	0x20001274

08005c50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10a      	bne.n	8005c76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	613b      	str	r3, [r7, #16]
}
 8005c72:	bf00      	nop
 8005c74:	e7fe      	b.n	8005c74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10a      	bne.n	8005c92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	60fb      	str	r3, [r7, #12]
}
 8005c8e:	bf00      	nop
 8005c90:	e7fe      	b.n	8005c90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005c92:	f000 fe7f 	bl	8006994 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c96:	4b1d      	ldr	r3, [pc, #116]	; (8005d0c <xTaskCheckForTimeOut+0xbc>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cae:	d102      	bne.n	8005cb6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	61fb      	str	r3, [r7, #28]
 8005cb4:	e023      	b.n	8005cfe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	4b15      	ldr	r3, [pc, #84]	; (8005d10 <xTaskCheckForTimeOut+0xc0>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d007      	beq.n	8005cd2 <xTaskCheckForTimeOut+0x82>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d302      	bcc.n	8005cd2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	61fb      	str	r3, [r7, #28]
 8005cd0:	e015      	b.n	8005cfe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d20b      	bcs.n	8005cf4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	1ad2      	subs	r2, r2, r3
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7ff ff9b 	bl	8005c24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	61fb      	str	r3, [r7, #28]
 8005cf2:	e004      	b.n	8005cfe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005cfe:	f000 fe79 	bl	80069f4 <vPortExitCritical>

	return xReturn;
 8005d02:	69fb      	ldr	r3, [r7, #28]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3720      	adds	r7, #32
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	20001274 	.word	0x20001274
 8005d10:	20001288 	.word	0x20001288

08005d14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d18:	4b03      	ldr	r3, [pc, #12]	; (8005d28 <vTaskMissedYield+0x14>)
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]
}
 8005d1e:	bf00      	nop
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	20001284 	.word	0x20001284

08005d2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d34:	f000 f852 	bl	8005ddc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d38:	4b06      	ldr	r3, [pc, #24]	; (8005d54 <prvIdleTask+0x28>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d9f9      	bls.n	8005d34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d40:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <prvIdleTask+0x2c>)
 8005d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d50:	e7f0      	b.n	8005d34 <prvIdleTask+0x8>
 8005d52:	bf00      	nop
 8005d54:	20000da0 	.word	0x20000da0
 8005d58:	e000ed04 	.word	0xe000ed04

08005d5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d62:	2300      	movs	r3, #0
 8005d64:	607b      	str	r3, [r7, #4]
 8005d66:	e00c      	b.n	8005d82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4a12      	ldr	r2, [pc, #72]	; (8005dbc <prvInitialiseTaskLists+0x60>)
 8005d74:	4413      	add	r3, r2
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fe fcca 	bl	8004710 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	607b      	str	r3, [r7, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b37      	cmp	r3, #55	; 0x37
 8005d86:	d9ef      	bls.n	8005d68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d88:	480d      	ldr	r0, [pc, #52]	; (8005dc0 <prvInitialiseTaskLists+0x64>)
 8005d8a:	f7fe fcc1 	bl	8004710 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d8e:	480d      	ldr	r0, [pc, #52]	; (8005dc4 <prvInitialiseTaskLists+0x68>)
 8005d90:	f7fe fcbe 	bl	8004710 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d94:	480c      	ldr	r0, [pc, #48]	; (8005dc8 <prvInitialiseTaskLists+0x6c>)
 8005d96:	f7fe fcbb 	bl	8004710 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d9a:	480c      	ldr	r0, [pc, #48]	; (8005dcc <prvInitialiseTaskLists+0x70>)
 8005d9c:	f7fe fcb8 	bl	8004710 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005da0:	480b      	ldr	r0, [pc, #44]	; (8005dd0 <prvInitialiseTaskLists+0x74>)
 8005da2:	f7fe fcb5 	bl	8004710 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005da6:	4b0b      	ldr	r3, [pc, #44]	; (8005dd4 <prvInitialiseTaskLists+0x78>)
 8005da8:	4a05      	ldr	r2, [pc, #20]	; (8005dc0 <prvInitialiseTaskLists+0x64>)
 8005daa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dac:	4b0a      	ldr	r3, [pc, #40]	; (8005dd8 <prvInitialiseTaskLists+0x7c>)
 8005dae:	4a05      	ldr	r2, [pc, #20]	; (8005dc4 <prvInitialiseTaskLists+0x68>)
 8005db0:	601a      	str	r2, [r3, #0]
}
 8005db2:	bf00      	nop
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	20000da0 	.word	0x20000da0
 8005dc0:	20001200 	.word	0x20001200
 8005dc4:	20001214 	.word	0x20001214
 8005dc8:	20001230 	.word	0x20001230
 8005dcc:	20001244 	.word	0x20001244
 8005dd0:	2000125c 	.word	0x2000125c
 8005dd4:	20001228 	.word	0x20001228
 8005dd8:	2000122c 	.word	0x2000122c

08005ddc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005de2:	e019      	b.n	8005e18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005de4:	f000 fdd6 	bl	8006994 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005de8:	4b10      	ldr	r3, [pc, #64]	; (8005e2c <prvCheckTasksWaitingTermination+0x50>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3304      	adds	r3, #4
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fe fd15 	bl	8004824 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005dfa:	4b0d      	ldr	r3, [pc, #52]	; (8005e30 <prvCheckTasksWaitingTermination+0x54>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	4a0b      	ldr	r2, [pc, #44]	; (8005e30 <prvCheckTasksWaitingTermination+0x54>)
 8005e02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e04:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <prvCheckTasksWaitingTermination+0x58>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	4a0a      	ldr	r2, [pc, #40]	; (8005e34 <prvCheckTasksWaitingTermination+0x58>)
 8005e0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e0e:	f000 fdf1 	bl	80069f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f810 	bl	8005e38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e18:	4b06      	ldr	r3, [pc, #24]	; (8005e34 <prvCheckTasksWaitingTermination+0x58>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e1      	bne.n	8005de4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e20:	bf00      	nop
 8005e22:	bf00      	nop
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20001244 	.word	0x20001244
 8005e30:	20001270 	.word	0x20001270
 8005e34:	20001258 	.word	0x20001258

08005e38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	3354      	adds	r3, #84	; 0x54
 8005e44:	4618      	mov	r0, r3
 8005e46:	f001 faf9 	bl	800743c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d108      	bne.n	8005e66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 ff89 	bl	8006d70 <vPortFree>
				vPortFree( pxTCB );
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 ff86 	bl	8006d70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e64:	e018      	b.n	8005e98 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d103      	bne.n	8005e78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 ff7d 	bl	8006d70 <vPortFree>
	}
 8005e76:	e00f      	b.n	8005e98 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d00a      	beq.n	8005e98 <prvDeleteTCB+0x60>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	60fb      	str	r3, [r7, #12]
}
 8005e94:	bf00      	nop
 8005e96:	e7fe      	b.n	8005e96 <prvDeleteTCB+0x5e>
	}
 8005e98:	bf00      	nop
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ea6:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <prvResetNextTaskUnblockTime+0x38>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d104      	bne.n	8005eba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005eb0:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <prvResetNextTaskUnblockTime+0x3c>)
 8005eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005eb8:	e008      	b.n	8005ecc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eba:	4b07      	ldr	r3, [pc, #28]	; (8005ed8 <prvResetNextTaskUnblockTime+0x38>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	4a04      	ldr	r2, [pc, #16]	; (8005edc <prvResetNextTaskUnblockTime+0x3c>)
 8005eca:	6013      	str	r3, [r2, #0]
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	20001228 	.word	0x20001228
 8005edc:	20001290 	.word	0x20001290

08005ee0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ee6:	4b0b      	ldr	r3, [pc, #44]	; (8005f14 <xTaskGetSchedulerState+0x34>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d102      	bne.n	8005ef4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	607b      	str	r3, [r7, #4]
 8005ef2:	e008      	b.n	8005f06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ef4:	4b08      	ldr	r3, [pc, #32]	; (8005f18 <xTaskGetSchedulerState+0x38>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d102      	bne.n	8005f02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005efc:	2302      	movs	r3, #2
 8005efe:	607b      	str	r3, [r7, #4]
 8005f00:	e001      	b.n	8005f06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f02:	2300      	movs	r3, #0
 8005f04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f06:	687b      	ldr	r3, [r7, #4]
	}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	2000127c 	.word	0x2000127c
 8005f18:	20001298 	.word	0x20001298

08005f1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d056      	beq.n	8005fe0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f32:	4b2e      	ldr	r3, [pc, #184]	; (8005fec <xTaskPriorityDisinherit+0xd0>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d00a      	beq.n	8005f52 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f40:	f383 8811 	msr	BASEPRI, r3
 8005f44:	f3bf 8f6f 	isb	sy
 8005f48:	f3bf 8f4f 	dsb	sy
 8005f4c:	60fb      	str	r3, [r7, #12]
}
 8005f4e:	bf00      	nop
 8005f50:	e7fe      	b.n	8005f50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10a      	bne.n	8005f70 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5e:	f383 8811 	msr	BASEPRI, r3
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	60bb      	str	r3, [r7, #8]
}
 8005f6c:	bf00      	nop
 8005f6e:	e7fe      	b.n	8005f6e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f74:	1e5a      	subs	r2, r3, #1
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d02c      	beq.n	8005fe0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d128      	bne.n	8005fe0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	3304      	adds	r3, #4
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fe fc46 	bl	8004824 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb0:	4b0f      	ldr	r3, [pc, #60]	; (8005ff0 <xTaskPriorityDisinherit+0xd4>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d903      	bls.n	8005fc0 <xTaskPriorityDisinherit+0xa4>
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbc:	4a0c      	ldr	r2, [pc, #48]	; (8005ff0 <xTaskPriorityDisinherit+0xd4>)
 8005fbe:	6013      	str	r3, [r2, #0]
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4a09      	ldr	r2, [pc, #36]	; (8005ff4 <xTaskPriorityDisinherit+0xd8>)
 8005fce:	441a      	add	r2, r3
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	f7fe fbc7 	bl	800476a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005fe0:	697b      	ldr	r3, [r7, #20]
	}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3718      	adds	r7, #24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	20000d9c 	.word	0x20000d9c
 8005ff0:	20001278 	.word	0x20001278
 8005ff4:	20000da0 	.word	0x20000da0

08005ff8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006002:	4b21      	ldr	r3, [pc, #132]	; (8006088 <prvAddCurrentTaskToDelayedList+0x90>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006008:	4b20      	ldr	r3, [pc, #128]	; (800608c <prvAddCurrentTaskToDelayedList+0x94>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3304      	adds	r3, #4
 800600e:	4618      	mov	r0, r3
 8006010:	f7fe fc08 	bl	8004824 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601a:	d10a      	bne.n	8006032 <prvAddCurrentTaskToDelayedList+0x3a>
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d007      	beq.n	8006032 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006022:	4b1a      	ldr	r3, [pc, #104]	; (800608c <prvAddCurrentTaskToDelayedList+0x94>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3304      	adds	r3, #4
 8006028:	4619      	mov	r1, r3
 800602a:	4819      	ldr	r0, [pc, #100]	; (8006090 <prvAddCurrentTaskToDelayedList+0x98>)
 800602c:	f7fe fb9d 	bl	800476a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006030:	e026      	b.n	8006080 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4413      	add	r3, r2
 8006038:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800603a:	4b14      	ldr	r3, [pc, #80]	; (800608c <prvAddCurrentTaskToDelayedList+0x94>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	429a      	cmp	r2, r3
 8006048:	d209      	bcs.n	800605e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800604a:	4b12      	ldr	r3, [pc, #72]	; (8006094 <prvAddCurrentTaskToDelayedList+0x9c>)
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	4b0f      	ldr	r3, [pc, #60]	; (800608c <prvAddCurrentTaskToDelayedList+0x94>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	3304      	adds	r3, #4
 8006054:	4619      	mov	r1, r3
 8006056:	4610      	mov	r0, r2
 8006058:	f7fe fbab 	bl	80047b2 <vListInsert>
}
 800605c:	e010      	b.n	8006080 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800605e:	4b0e      	ldr	r3, [pc, #56]	; (8006098 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	4b0a      	ldr	r3, [pc, #40]	; (800608c <prvAddCurrentTaskToDelayedList+0x94>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	3304      	adds	r3, #4
 8006068:	4619      	mov	r1, r3
 800606a:	4610      	mov	r0, r2
 800606c:	f7fe fba1 	bl	80047b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006070:	4b0a      	ldr	r3, [pc, #40]	; (800609c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	429a      	cmp	r2, r3
 8006078:	d202      	bcs.n	8006080 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800607a:	4a08      	ldr	r2, [pc, #32]	; (800609c <prvAddCurrentTaskToDelayedList+0xa4>)
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	6013      	str	r3, [r2, #0]
}
 8006080:	bf00      	nop
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	20001274 	.word	0x20001274
 800608c:	20000d9c 	.word	0x20000d9c
 8006090:	2000125c 	.word	0x2000125c
 8006094:	2000122c 	.word	0x2000122c
 8006098:	20001228 	.word	0x20001228
 800609c:	20001290 	.word	0x20001290

080060a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08a      	sub	sp, #40	; 0x28
 80060a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060a6:	2300      	movs	r3, #0
 80060a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060aa:	f000 fb07 	bl	80066bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060ae:	4b1c      	ldr	r3, [pc, #112]	; (8006120 <xTimerCreateTimerTask+0x80>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d021      	beq.n	80060fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060be:	1d3a      	adds	r2, r7, #4
 80060c0:	f107 0108 	add.w	r1, r7, #8
 80060c4:	f107 030c 	add.w	r3, r7, #12
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7fe fb07 	bl	80046dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	9202      	str	r2, [sp, #8]
 80060d6:	9301      	str	r3, [sp, #4]
 80060d8:	2302      	movs	r3, #2
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	2300      	movs	r3, #0
 80060de:	460a      	mov	r2, r1
 80060e0:	4910      	ldr	r1, [pc, #64]	; (8006124 <xTimerCreateTimerTask+0x84>)
 80060e2:	4811      	ldr	r0, [pc, #68]	; (8006128 <xTimerCreateTimerTask+0x88>)
 80060e4:	f7ff f8b4 	bl	8005250 <xTaskCreateStatic>
 80060e8:	4603      	mov	r3, r0
 80060ea:	4a10      	ldr	r2, [pc, #64]	; (800612c <xTimerCreateTimerTask+0x8c>)
 80060ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80060ee:	4b0f      	ldr	r3, [pc, #60]	; (800612c <xTimerCreateTimerTask+0x8c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80060f6:	2301      	movs	r3, #1
 80060f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10a      	bne.n	8006116 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	613b      	str	r3, [r7, #16]
}
 8006112:	bf00      	nop
 8006114:	e7fe      	b.n	8006114 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006116:	697b      	ldr	r3, [r7, #20]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3718      	adds	r7, #24
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	200012cc 	.word	0x200012cc
 8006124:	080082e0 	.word	0x080082e0
 8006128:	08006265 	.word	0x08006265
 800612c:	200012d0 	.word	0x200012d0

08006130 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08a      	sub	sp, #40	; 0x28
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800613e:	2300      	movs	r3, #0
 8006140:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10a      	bne.n	800615e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	623b      	str	r3, [r7, #32]
}
 800615a:	bf00      	nop
 800615c:	e7fe      	b.n	800615c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800615e:	4b1a      	ldr	r3, [pc, #104]	; (80061c8 <xTimerGenericCommand+0x98>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d02a      	beq.n	80061bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b05      	cmp	r3, #5
 8006176:	dc18      	bgt.n	80061aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006178:	f7ff feb2 	bl	8005ee0 <xTaskGetSchedulerState>
 800617c:	4603      	mov	r3, r0
 800617e:	2b02      	cmp	r3, #2
 8006180:	d109      	bne.n	8006196 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006182:	4b11      	ldr	r3, [pc, #68]	; (80061c8 <xTimerGenericCommand+0x98>)
 8006184:	6818      	ldr	r0, [r3, #0]
 8006186:	f107 0110 	add.w	r1, r7, #16
 800618a:	2300      	movs	r3, #0
 800618c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800618e:	f7fe fc77 	bl	8004a80 <xQueueGenericSend>
 8006192:	6278      	str	r0, [r7, #36]	; 0x24
 8006194:	e012      	b.n	80061bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006196:	4b0c      	ldr	r3, [pc, #48]	; (80061c8 <xTimerGenericCommand+0x98>)
 8006198:	6818      	ldr	r0, [r3, #0]
 800619a:	f107 0110 	add.w	r1, r7, #16
 800619e:	2300      	movs	r3, #0
 80061a0:	2200      	movs	r2, #0
 80061a2:	f7fe fc6d 	bl	8004a80 <xQueueGenericSend>
 80061a6:	6278      	str	r0, [r7, #36]	; 0x24
 80061a8:	e008      	b.n	80061bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80061aa:	4b07      	ldr	r3, [pc, #28]	; (80061c8 <xTimerGenericCommand+0x98>)
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	f107 0110 	add.w	r1, r7, #16
 80061b2:	2300      	movs	r3, #0
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	f7fe fd61 	bl	8004c7c <xQueueGenericSendFromISR>
 80061ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3728      	adds	r7, #40	; 0x28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	200012cc 	.word	0x200012cc

080061cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af02      	add	r7, sp, #8
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061d6:	4b22      	ldr	r3, [pc, #136]	; (8006260 <prvProcessExpiredTimer+0x94>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	3304      	adds	r3, #4
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7fe fb1d 	bl	8004824 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061f0:	f003 0304 	and.w	r3, r3, #4
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d022      	beq.n	800623e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	699a      	ldr	r2, [r3, #24]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	18d1      	adds	r1, r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	6978      	ldr	r0, [r7, #20]
 8006206:	f000 f8d1 	bl	80063ac <prvInsertTimerInActiveList>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d01f      	beq.n	8006250 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006210:	2300      	movs	r3, #0
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	2300      	movs	r3, #0
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	2100      	movs	r1, #0
 800621a:	6978      	ldr	r0, [r7, #20]
 800621c:	f7ff ff88 	bl	8006130 <xTimerGenericCommand>
 8006220:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d113      	bne.n	8006250 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	60fb      	str	r3, [r7, #12]
}
 800623a:	bf00      	nop
 800623c:	e7fe      	b.n	800623c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006244:	f023 0301 	bic.w	r3, r3, #1
 8006248:	b2da      	uxtb	r2, r3
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	6978      	ldr	r0, [r7, #20]
 8006256:	4798      	blx	r3
}
 8006258:	bf00      	nop
 800625a:	3718      	adds	r7, #24
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	200012c4 	.word	0x200012c4

08006264 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800626c:	f107 0308 	add.w	r3, r7, #8
 8006270:	4618      	mov	r0, r3
 8006272:	f000 f857 	bl	8006324 <prvGetNextExpireTime>
 8006276:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4619      	mov	r1, r3
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 f803 	bl	8006288 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006282:	f000 f8d5 	bl	8006430 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006286:	e7f1      	b.n	800626c <prvTimerTask+0x8>

08006288 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006292:	f7ff fa39 	bl	8005708 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006296:	f107 0308 	add.w	r3, r7, #8
 800629a:	4618      	mov	r0, r3
 800629c:	f000 f866 	bl	800636c <prvSampleTimeNow>
 80062a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d130      	bne.n	800630a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10a      	bne.n	80062c4 <prvProcessTimerOrBlockTask+0x3c>
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d806      	bhi.n	80062c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062b6:	f7ff fa35 	bl	8005724 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062ba:	68f9      	ldr	r1, [r7, #12]
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7ff ff85 	bl	80061cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062c2:	e024      	b.n	800630e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d008      	beq.n	80062dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062ca:	4b13      	ldr	r3, [pc, #76]	; (8006318 <prvProcessTimerOrBlockTask+0x90>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <prvProcessTimerOrBlockTask+0x50>
 80062d4:	2301      	movs	r3, #1
 80062d6:	e000      	b.n	80062da <prvProcessTimerOrBlockTask+0x52>
 80062d8:	2300      	movs	r3, #0
 80062da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80062dc:	4b0f      	ldr	r3, [pc, #60]	; (800631c <prvProcessTimerOrBlockTask+0x94>)
 80062de:	6818      	ldr	r0, [r3, #0]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	4619      	mov	r1, r3
 80062ea:	f7fe ff7d 	bl	80051e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062ee:	f7ff fa19 	bl	8005724 <xTaskResumeAll>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10a      	bne.n	800630e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80062f8:	4b09      	ldr	r3, [pc, #36]	; (8006320 <prvProcessTimerOrBlockTask+0x98>)
 80062fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	f3bf 8f6f 	isb	sy
}
 8006308:	e001      	b.n	800630e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800630a:	f7ff fa0b 	bl	8005724 <xTaskResumeAll>
}
 800630e:	bf00      	nop
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	200012c8 	.word	0x200012c8
 800631c:	200012cc 	.word	0x200012cc
 8006320:	e000ed04 	.word	0xe000ed04

08006324 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800632c:	4b0e      	ldr	r3, [pc, #56]	; (8006368 <prvGetNextExpireTime+0x44>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <prvGetNextExpireTime+0x16>
 8006336:	2201      	movs	r2, #1
 8006338:	e000      	b.n	800633c <prvGetNextExpireTime+0x18>
 800633a:	2200      	movs	r2, #0
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d105      	bne.n	8006354 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006348:	4b07      	ldr	r3, [pc, #28]	; (8006368 <prvGetNextExpireTime+0x44>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	e001      	b.n	8006358 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006354:	2300      	movs	r3, #0
 8006356:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006358:	68fb      	ldr	r3, [r7, #12]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	200012c4 	.word	0x200012c4

0800636c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006374:	f7ff fa74 	bl	8005860 <xTaskGetTickCount>
 8006378:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800637a:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <prvSampleTimeNow+0x3c>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	429a      	cmp	r2, r3
 8006382:	d205      	bcs.n	8006390 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006384:	f000 f936 	bl	80065f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	e002      	b.n	8006396 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006396:	4a04      	ldr	r2, [pc, #16]	; (80063a8 <prvSampleTimeNow+0x3c>)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800639c:	68fb      	ldr	r3, [r7, #12]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	200012d4 	.word	0x200012d4

080063ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063ba:	2300      	movs	r3, #0
 80063bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d812      	bhi.n	80063f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	1ad2      	subs	r2, r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d302      	bcc.n	80063e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80063e0:	2301      	movs	r3, #1
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	e01b      	b.n	800641e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063e6:	4b10      	ldr	r3, [pc, #64]	; (8006428 <prvInsertTimerInActiveList+0x7c>)
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	3304      	adds	r3, #4
 80063ee:	4619      	mov	r1, r3
 80063f0:	4610      	mov	r0, r2
 80063f2:	f7fe f9de 	bl	80047b2 <vListInsert>
 80063f6:	e012      	b.n	800641e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d206      	bcs.n	800640e <prvInsertTimerInActiveList+0x62>
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	429a      	cmp	r2, r3
 8006406:	d302      	bcc.n	800640e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006408:	2301      	movs	r3, #1
 800640a:	617b      	str	r3, [r7, #20]
 800640c:	e007      	b.n	800641e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800640e:	4b07      	ldr	r3, [pc, #28]	; (800642c <prvInsertTimerInActiveList+0x80>)
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3304      	adds	r3, #4
 8006416:	4619      	mov	r1, r3
 8006418:	4610      	mov	r0, r2
 800641a:	f7fe f9ca 	bl	80047b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800641e:	697b      	ldr	r3, [r7, #20]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	200012c8 	.word	0x200012c8
 800642c:	200012c4 	.word	0x200012c4

08006430 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08e      	sub	sp, #56	; 0x38
 8006434:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006436:	e0ca      	b.n	80065ce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	da18      	bge.n	8006470 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800643e:	1d3b      	adds	r3, r7, #4
 8006440:	3304      	adds	r3, #4
 8006442:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10a      	bne.n	8006460 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	61fb      	str	r3, [r7, #28]
}
 800645c:	bf00      	nop
 800645e:	e7fe      	b.n	800645e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006466:	6850      	ldr	r0, [r2, #4]
 8006468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800646a:	6892      	ldr	r2, [r2, #8]
 800646c:	4611      	mov	r1, r2
 800646e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	f2c0 80aa 	blt.w	80065cc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d004      	beq.n	800648e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	3304      	adds	r3, #4
 8006488:	4618      	mov	r0, r3
 800648a:	f7fe f9cb 	bl	8004824 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800648e:	463b      	mov	r3, r7
 8006490:	4618      	mov	r0, r3
 8006492:	f7ff ff6b 	bl	800636c <prvSampleTimeNow>
 8006496:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b09      	cmp	r3, #9
 800649c:	f200 8097 	bhi.w	80065ce <prvProcessReceivedCommands+0x19e>
 80064a0:	a201      	add	r2, pc, #4	; (adr r2, 80064a8 <prvProcessReceivedCommands+0x78>)
 80064a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a6:	bf00      	nop
 80064a8:	080064d1 	.word	0x080064d1
 80064ac:	080064d1 	.word	0x080064d1
 80064b0:	080064d1 	.word	0x080064d1
 80064b4:	08006545 	.word	0x08006545
 80064b8:	08006559 	.word	0x08006559
 80064bc:	080065a3 	.word	0x080065a3
 80064c0:	080064d1 	.word	0x080064d1
 80064c4:	080064d1 	.word	0x080064d1
 80064c8:	08006545 	.word	0x08006545
 80064cc:	08006559 	.word	0x08006559
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064d6:	f043 0301 	orr.w	r3, r3, #1
 80064da:	b2da      	uxtb	r2, r3
 80064dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	18d1      	adds	r1, r2, r3
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064f0:	f7ff ff5c 	bl	80063ac <prvInsertTimerInActiveList>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d069      	beq.n	80065ce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006500:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006504:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b00      	cmp	r3, #0
 800650e:	d05e      	beq.n	80065ce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	441a      	add	r2, r3
 8006518:	2300      	movs	r3, #0
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	2300      	movs	r3, #0
 800651e:	2100      	movs	r1, #0
 8006520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006522:	f7ff fe05 	bl	8006130 <xTimerGenericCommand>
 8006526:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d14f      	bne.n	80065ce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	61bb      	str	r3, [r7, #24]
}
 8006540:	bf00      	nop
 8006542:	e7fe      	b.n	8006542 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006546:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800654a:	f023 0301 	bic.w	r3, r3, #1
 800654e:	b2da      	uxtb	r2, r3
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006556:	e03a      	b.n	80065ce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800655e:	f043 0301 	orr.w	r3, r3, #1
 8006562:	b2da      	uxtb	r2, r3
 8006564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006566:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10a      	bne.n	800658e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	617b      	str	r3, [r7, #20]
}
 800658a:	bf00      	nop
 800658c:	e7fe      	b.n	800658c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006590:	699a      	ldr	r2, [r3, #24]
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	18d1      	adds	r1, r2, r3
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800659a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800659c:	f7ff ff06 	bl	80063ac <prvInsertTimerInActiveList>
					break;
 80065a0:	e015      	b.n	80065ce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d103      	bne.n	80065b8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80065b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065b2:	f000 fbdd 	bl	8006d70 <vPortFree>
 80065b6:	e00a      	b.n	80065ce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065be:	f023 0301 	bic.w	r3, r3, #1
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80065ca:	e000      	b.n	80065ce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80065cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065ce:	4b08      	ldr	r3, [pc, #32]	; (80065f0 <prvProcessReceivedCommands+0x1c0>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	1d39      	adds	r1, r7, #4
 80065d4:	2200      	movs	r2, #0
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fe fbec 	bl	8004db4 <xQueueReceive>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f47f af2a 	bne.w	8006438 <prvProcessReceivedCommands+0x8>
	}
}
 80065e4:	bf00      	nop
 80065e6:	bf00      	nop
 80065e8:	3730      	adds	r7, #48	; 0x30
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	200012cc 	.word	0x200012cc

080065f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b088      	sub	sp, #32
 80065f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065fa:	e048      	b.n	800668e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065fc:	4b2d      	ldr	r3, [pc, #180]	; (80066b4 <prvSwitchTimerLists+0xc0>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006606:	4b2b      	ldr	r3, [pc, #172]	; (80066b4 <prvSwitchTimerLists+0xc0>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	3304      	adds	r3, #4
 8006614:	4618      	mov	r0, r3
 8006616:	f7fe f905 	bl	8004824 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b00      	cmp	r3, #0
 800662e:	d02e      	beq.n	800668e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	4413      	add	r3, r2
 8006638:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	429a      	cmp	r2, r3
 8006640:	d90e      	bls.n	8006660 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800664e:	4b19      	ldr	r3, [pc, #100]	; (80066b4 <prvSwitchTimerLists+0xc0>)
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	3304      	adds	r3, #4
 8006656:	4619      	mov	r1, r3
 8006658:	4610      	mov	r0, r2
 800665a:	f7fe f8aa 	bl	80047b2 <vListInsert>
 800665e:	e016      	b.n	800668e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006660:	2300      	movs	r3, #0
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	2300      	movs	r3, #0
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	2100      	movs	r1, #0
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f7ff fd60 	bl	8006130 <xTimerGenericCommand>
 8006670:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10a      	bne.n	800668e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	603b      	str	r3, [r7, #0]
}
 800668a:	bf00      	nop
 800668c:	e7fe      	b.n	800668c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800668e:	4b09      	ldr	r3, [pc, #36]	; (80066b4 <prvSwitchTimerLists+0xc0>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1b1      	bne.n	80065fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006698:	4b06      	ldr	r3, [pc, #24]	; (80066b4 <prvSwitchTimerLists+0xc0>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800669e:	4b06      	ldr	r3, [pc, #24]	; (80066b8 <prvSwitchTimerLists+0xc4>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a04      	ldr	r2, [pc, #16]	; (80066b4 <prvSwitchTimerLists+0xc0>)
 80066a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80066a6:	4a04      	ldr	r2, [pc, #16]	; (80066b8 <prvSwitchTimerLists+0xc4>)
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	6013      	str	r3, [r2, #0]
}
 80066ac:	bf00      	nop
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	200012c4 	.word	0x200012c4
 80066b8:	200012c8 	.word	0x200012c8

080066bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80066c2:	f000 f967 	bl	8006994 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80066c6:	4b15      	ldr	r3, [pc, #84]	; (800671c <prvCheckForValidListAndQueue+0x60>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d120      	bne.n	8006710 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80066ce:	4814      	ldr	r0, [pc, #80]	; (8006720 <prvCheckForValidListAndQueue+0x64>)
 80066d0:	f7fe f81e 	bl	8004710 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80066d4:	4813      	ldr	r0, [pc, #76]	; (8006724 <prvCheckForValidListAndQueue+0x68>)
 80066d6:	f7fe f81b 	bl	8004710 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80066da:	4b13      	ldr	r3, [pc, #76]	; (8006728 <prvCheckForValidListAndQueue+0x6c>)
 80066dc:	4a10      	ldr	r2, [pc, #64]	; (8006720 <prvCheckForValidListAndQueue+0x64>)
 80066de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80066e0:	4b12      	ldr	r3, [pc, #72]	; (800672c <prvCheckForValidListAndQueue+0x70>)
 80066e2:	4a10      	ldr	r2, [pc, #64]	; (8006724 <prvCheckForValidListAndQueue+0x68>)
 80066e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80066e6:	2300      	movs	r3, #0
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	4b11      	ldr	r3, [pc, #68]	; (8006730 <prvCheckForValidListAndQueue+0x74>)
 80066ec:	4a11      	ldr	r2, [pc, #68]	; (8006734 <prvCheckForValidListAndQueue+0x78>)
 80066ee:	2110      	movs	r1, #16
 80066f0:	200a      	movs	r0, #10
 80066f2:	f7fe f929 	bl	8004948 <xQueueGenericCreateStatic>
 80066f6:	4603      	mov	r3, r0
 80066f8:	4a08      	ldr	r2, [pc, #32]	; (800671c <prvCheckForValidListAndQueue+0x60>)
 80066fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80066fc:	4b07      	ldr	r3, [pc, #28]	; (800671c <prvCheckForValidListAndQueue+0x60>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006704:	4b05      	ldr	r3, [pc, #20]	; (800671c <prvCheckForValidListAndQueue+0x60>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	490b      	ldr	r1, [pc, #44]	; (8006738 <prvCheckForValidListAndQueue+0x7c>)
 800670a:	4618      	mov	r0, r3
 800670c:	f7fe fd42 	bl	8005194 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006710:	f000 f970 	bl	80069f4 <vPortExitCritical>
}
 8006714:	bf00      	nop
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	200012cc 	.word	0x200012cc
 8006720:	2000129c 	.word	0x2000129c
 8006724:	200012b0 	.word	0x200012b0
 8006728:	200012c4 	.word	0x200012c4
 800672c:	200012c8 	.word	0x200012c8
 8006730:	20001378 	.word	0x20001378
 8006734:	200012d8 	.word	0x200012d8
 8006738:	080082e8 	.word	0x080082e8

0800673c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	3b04      	subs	r3, #4
 800674c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006754:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	3b04      	subs	r3, #4
 800675a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f023 0201 	bic.w	r2, r3, #1
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	3b04      	subs	r3, #4
 800676a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800676c:	4a0c      	ldr	r2, [pc, #48]	; (80067a0 <pxPortInitialiseStack+0x64>)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	3b14      	subs	r3, #20
 8006776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	3b04      	subs	r3, #4
 8006782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f06f 0202 	mvn.w	r2, #2
 800678a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	3b20      	subs	r3, #32
 8006790:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006792:	68fb      	ldr	r3, [r7, #12]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	080067a5 	.word	0x080067a5

080067a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067aa:	2300      	movs	r3, #0
 80067ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067ae:	4b12      	ldr	r3, [pc, #72]	; (80067f8 <prvTaskExitError+0x54>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b6:	d00a      	beq.n	80067ce <prvTaskExitError+0x2a>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	60fb      	str	r3, [r7, #12]
}
 80067ca:	bf00      	nop
 80067cc:	e7fe      	b.n	80067cc <prvTaskExitError+0x28>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	60bb      	str	r3, [r7, #8]
}
 80067e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067e2:	bf00      	nop
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0fc      	beq.n	80067e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067ea:	bf00      	nop
 80067ec:	bf00      	nop
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr
 80067f8:	2000000c 	.word	0x2000000c
 80067fc:	00000000 	.word	0x00000000

08006800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006800:	4b07      	ldr	r3, [pc, #28]	; (8006820 <pxCurrentTCBConst2>)
 8006802:	6819      	ldr	r1, [r3, #0]
 8006804:	6808      	ldr	r0, [r1, #0]
 8006806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680a:	f380 8809 	msr	PSP, r0
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f04f 0000 	mov.w	r0, #0
 8006816:	f380 8811 	msr	BASEPRI, r0
 800681a:	4770      	bx	lr
 800681c:	f3af 8000 	nop.w

08006820 <pxCurrentTCBConst2>:
 8006820:	20000d9c 	.word	0x20000d9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop

08006828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006828:	4808      	ldr	r0, [pc, #32]	; (800684c <prvPortStartFirstTask+0x24>)
 800682a:	6800      	ldr	r0, [r0, #0]
 800682c:	6800      	ldr	r0, [r0, #0]
 800682e:	f380 8808 	msr	MSP, r0
 8006832:	f04f 0000 	mov.w	r0, #0
 8006836:	f380 8814 	msr	CONTROL, r0
 800683a:	b662      	cpsie	i
 800683c:	b661      	cpsie	f
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	df00      	svc	0
 8006848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800684a:	bf00      	nop
 800684c:	e000ed08 	.word	0xe000ed08

08006850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006856:	4b46      	ldr	r3, [pc, #280]	; (8006970 <xPortStartScheduler+0x120>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a46      	ldr	r2, [pc, #280]	; (8006974 <xPortStartScheduler+0x124>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d10a      	bne.n	8006876 <xPortStartScheduler+0x26>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	613b      	str	r3, [r7, #16]
}
 8006872:	bf00      	nop
 8006874:	e7fe      	b.n	8006874 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006876:	4b3e      	ldr	r3, [pc, #248]	; (8006970 <xPortStartScheduler+0x120>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a3f      	ldr	r2, [pc, #252]	; (8006978 <xPortStartScheduler+0x128>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d10a      	bne.n	8006896 <xPortStartScheduler+0x46>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	60fb      	str	r3, [r7, #12]
}
 8006892:	bf00      	nop
 8006894:	e7fe      	b.n	8006894 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006896:	4b39      	ldr	r3, [pc, #228]	; (800697c <xPortStartScheduler+0x12c>)
 8006898:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	22ff      	movs	r2, #255	; 0xff
 80068a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068b0:	78fb      	ldrb	r3, [r7, #3]
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	4b31      	ldr	r3, [pc, #196]	; (8006980 <xPortStartScheduler+0x130>)
 80068bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068be:	4b31      	ldr	r3, [pc, #196]	; (8006984 <xPortStartScheduler+0x134>)
 80068c0:	2207      	movs	r2, #7
 80068c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068c4:	e009      	b.n	80068da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80068c6:	4b2f      	ldr	r3, [pc, #188]	; (8006984 <xPortStartScheduler+0x134>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	4a2d      	ldr	r2, [pc, #180]	; (8006984 <xPortStartScheduler+0x134>)
 80068ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068d0:	78fb      	ldrb	r3, [r7, #3]
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068da:	78fb      	ldrb	r3, [r7, #3]
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e2:	2b80      	cmp	r3, #128	; 0x80
 80068e4:	d0ef      	beq.n	80068c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068e6:	4b27      	ldr	r3, [pc, #156]	; (8006984 <xPortStartScheduler+0x134>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f1c3 0307 	rsb	r3, r3, #7
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d00a      	beq.n	8006908 <xPortStartScheduler+0xb8>
	__asm volatile
 80068f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	60bb      	str	r3, [r7, #8]
}
 8006904:	bf00      	nop
 8006906:	e7fe      	b.n	8006906 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006908:	4b1e      	ldr	r3, [pc, #120]	; (8006984 <xPortStartScheduler+0x134>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	021b      	lsls	r3, r3, #8
 800690e:	4a1d      	ldr	r2, [pc, #116]	; (8006984 <xPortStartScheduler+0x134>)
 8006910:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006912:	4b1c      	ldr	r3, [pc, #112]	; (8006984 <xPortStartScheduler+0x134>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800691a:	4a1a      	ldr	r2, [pc, #104]	; (8006984 <xPortStartScheduler+0x134>)
 800691c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	b2da      	uxtb	r2, r3
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006926:	4b18      	ldr	r3, [pc, #96]	; (8006988 <xPortStartScheduler+0x138>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a17      	ldr	r2, [pc, #92]	; (8006988 <xPortStartScheduler+0x138>)
 800692c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006930:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006932:	4b15      	ldr	r3, [pc, #84]	; (8006988 <xPortStartScheduler+0x138>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a14      	ldr	r2, [pc, #80]	; (8006988 <xPortStartScheduler+0x138>)
 8006938:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800693c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800693e:	f000 f8dd 	bl	8006afc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006942:	4b12      	ldr	r3, [pc, #72]	; (800698c <xPortStartScheduler+0x13c>)
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006948:	f000 f8fc 	bl	8006b44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800694c:	4b10      	ldr	r3, [pc, #64]	; (8006990 <xPortStartScheduler+0x140>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a0f      	ldr	r2, [pc, #60]	; (8006990 <xPortStartScheduler+0x140>)
 8006952:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006956:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006958:	f7ff ff66 	bl	8006828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800695c:	f7ff f84a 	bl	80059f4 <vTaskSwitchContext>
	prvTaskExitError();
 8006960:	f7ff ff20 	bl	80067a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	e000ed00 	.word	0xe000ed00
 8006974:	410fc271 	.word	0x410fc271
 8006978:	410fc270 	.word	0x410fc270
 800697c:	e000e400 	.word	0xe000e400
 8006980:	200013c8 	.word	0x200013c8
 8006984:	200013cc 	.word	0x200013cc
 8006988:	e000ed20 	.word	0xe000ed20
 800698c:	2000000c 	.word	0x2000000c
 8006990:	e000ef34 	.word	0xe000ef34

08006994 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	607b      	str	r3, [r7, #4]
}
 80069ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069ae:	4b0f      	ldr	r3, [pc, #60]	; (80069ec <vPortEnterCritical+0x58>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3301      	adds	r3, #1
 80069b4:	4a0d      	ldr	r2, [pc, #52]	; (80069ec <vPortEnterCritical+0x58>)
 80069b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069b8:	4b0c      	ldr	r3, [pc, #48]	; (80069ec <vPortEnterCritical+0x58>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d10f      	bne.n	80069e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069c0:	4b0b      	ldr	r3, [pc, #44]	; (80069f0 <vPortEnterCritical+0x5c>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00a      	beq.n	80069e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80069ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	603b      	str	r3, [r7, #0]
}
 80069dc:	bf00      	nop
 80069de:	e7fe      	b.n	80069de <vPortEnterCritical+0x4a>
	}
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	2000000c 	.word	0x2000000c
 80069f0:	e000ed04 	.word	0xe000ed04

080069f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069fa:	4b12      	ldr	r3, [pc, #72]	; (8006a44 <vPortExitCritical+0x50>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10a      	bne.n	8006a18 <vPortExitCritical+0x24>
	__asm volatile
 8006a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	607b      	str	r3, [r7, #4]
}
 8006a14:	bf00      	nop
 8006a16:	e7fe      	b.n	8006a16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a18:	4b0a      	ldr	r3, [pc, #40]	; (8006a44 <vPortExitCritical+0x50>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	4a09      	ldr	r2, [pc, #36]	; (8006a44 <vPortExitCritical+0x50>)
 8006a20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a22:	4b08      	ldr	r3, [pc, #32]	; (8006a44 <vPortExitCritical+0x50>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d105      	bne.n	8006a36 <vPortExitCritical+0x42>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	f383 8811 	msr	BASEPRI, r3
}
 8006a34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	2000000c 	.word	0x2000000c
	...

08006a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a50:	f3ef 8009 	mrs	r0, PSP
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	4b15      	ldr	r3, [pc, #84]	; (8006ab0 <pxCurrentTCBConst>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	f01e 0f10 	tst.w	lr, #16
 8006a60:	bf08      	it	eq
 8006a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6a:	6010      	str	r0, [r2, #0]
 8006a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a74:	f380 8811 	msr	BASEPRI, r0
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f7fe ffb8 	bl	80059f4 <vTaskSwitchContext>
 8006a84:	f04f 0000 	mov.w	r0, #0
 8006a88:	f380 8811 	msr	BASEPRI, r0
 8006a8c:	bc09      	pop	{r0, r3}
 8006a8e:	6819      	ldr	r1, [r3, #0]
 8006a90:	6808      	ldr	r0, [r1, #0]
 8006a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a96:	f01e 0f10 	tst.w	lr, #16
 8006a9a:	bf08      	it	eq
 8006a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006aa0:	f380 8809 	msr	PSP, r0
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	f3af 8000 	nop.w

08006ab0 <pxCurrentTCBConst>:
 8006ab0:	20000d9c 	.word	0x20000d9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop

08006ab8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	607b      	str	r3, [r7, #4]
}
 8006ad0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ad2:	f7fe fed5 	bl	8005880 <xTaskIncrementTick>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006adc:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <xPortSysTickHandler+0x40>)
 8006ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	f383 8811 	msr	BASEPRI, r3
}
 8006aee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006af0:	bf00      	nop
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	e000ed04 	.word	0xe000ed04

08006afc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b00:	4b0b      	ldr	r3, [pc, #44]	; (8006b30 <vPortSetupTimerInterrupt+0x34>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b06:	4b0b      	ldr	r3, [pc, #44]	; (8006b34 <vPortSetupTimerInterrupt+0x38>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b0c:	4b0a      	ldr	r3, [pc, #40]	; (8006b38 <vPortSetupTimerInterrupt+0x3c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a0a      	ldr	r2, [pc, #40]	; (8006b3c <vPortSetupTimerInterrupt+0x40>)
 8006b12:	fba2 2303 	umull	r2, r3, r2, r3
 8006b16:	099b      	lsrs	r3, r3, #6
 8006b18:	4a09      	ldr	r2, [pc, #36]	; (8006b40 <vPortSetupTimerInterrupt+0x44>)
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b1e:	4b04      	ldr	r3, [pc, #16]	; (8006b30 <vPortSetupTimerInterrupt+0x34>)
 8006b20:	2207      	movs	r2, #7
 8006b22:	601a      	str	r2, [r3, #0]
}
 8006b24:	bf00      	nop
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	e000e010 	.word	0xe000e010
 8006b34:	e000e018 	.word	0xe000e018
 8006b38:	20000000 	.word	0x20000000
 8006b3c:	10624dd3 	.word	0x10624dd3
 8006b40:	e000e014 	.word	0xe000e014

08006b44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b54 <vPortEnableVFP+0x10>
 8006b48:	6801      	ldr	r1, [r0, #0]
 8006b4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b4e:	6001      	str	r1, [r0, #0]
 8006b50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b52:	bf00      	nop
 8006b54:	e000ed88 	.word	0xe000ed88

08006b58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b5e:	f3ef 8305 	mrs	r3, IPSR
 8006b62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2b0f      	cmp	r3, #15
 8006b68:	d914      	bls.n	8006b94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b6a:	4a17      	ldr	r2, [pc, #92]	; (8006bc8 <vPortValidateInterruptPriority+0x70>)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4413      	add	r3, r2
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b74:	4b15      	ldr	r3, [pc, #84]	; (8006bcc <vPortValidateInterruptPriority+0x74>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	7afa      	ldrb	r2, [r7, #11]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d20a      	bcs.n	8006b94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	607b      	str	r3, [r7, #4]
}
 8006b90:	bf00      	nop
 8006b92:	e7fe      	b.n	8006b92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b94:	4b0e      	ldr	r3, [pc, #56]	; (8006bd0 <vPortValidateInterruptPriority+0x78>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b9c:	4b0d      	ldr	r3, [pc, #52]	; (8006bd4 <vPortValidateInterruptPriority+0x7c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d90a      	bls.n	8006bba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	603b      	str	r3, [r7, #0]
}
 8006bb6:	bf00      	nop
 8006bb8:	e7fe      	b.n	8006bb8 <vPortValidateInterruptPriority+0x60>
	}
 8006bba:	bf00      	nop
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	e000e3f0 	.word	0xe000e3f0
 8006bcc:	200013c8 	.word	0x200013c8
 8006bd0:	e000ed0c 	.word	0xe000ed0c
 8006bd4:	200013cc 	.word	0x200013cc

08006bd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b08a      	sub	sp, #40	; 0x28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006be0:	2300      	movs	r3, #0
 8006be2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006be4:	f7fe fd90 	bl	8005708 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006be8:	4b5b      	ldr	r3, [pc, #364]	; (8006d58 <pvPortMalloc+0x180>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bf0:	f000 f920 	bl	8006e34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bf4:	4b59      	ldr	r3, [pc, #356]	; (8006d5c <pvPortMalloc+0x184>)
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f040 8093 	bne.w	8006d28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d01d      	beq.n	8006c44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c08:	2208      	movs	r2, #8
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f003 0307 	and.w	r3, r3, #7
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d014      	beq.n	8006c44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f023 0307 	bic.w	r3, r3, #7
 8006c20:	3308      	adds	r3, #8
 8006c22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <pvPortMalloc+0x6c>
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	617b      	str	r3, [r7, #20]
}
 8006c40:	bf00      	nop
 8006c42:	e7fe      	b.n	8006c42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d06e      	beq.n	8006d28 <pvPortMalloc+0x150>
 8006c4a:	4b45      	ldr	r3, [pc, #276]	; (8006d60 <pvPortMalloc+0x188>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d869      	bhi.n	8006d28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c54:	4b43      	ldr	r3, [pc, #268]	; (8006d64 <pvPortMalloc+0x18c>)
 8006c56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c58:	4b42      	ldr	r3, [pc, #264]	; (8006d64 <pvPortMalloc+0x18c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c5e:	e004      	b.n	8006c6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d903      	bls.n	8006c7c <pvPortMalloc+0xa4>
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1f1      	bne.n	8006c60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c7c:	4b36      	ldr	r3, [pc, #216]	; (8006d58 <pvPortMalloc+0x180>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d050      	beq.n	8006d28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2208      	movs	r2, #8
 8006c8c:	4413      	add	r3, r2
 8006c8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	1ad2      	subs	r2, r2, r3
 8006ca0:	2308      	movs	r3, #8
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d91f      	bls.n	8006ce8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4413      	add	r3, r2
 8006cae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	f003 0307 	and.w	r3, r3, #7
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00a      	beq.n	8006cd0 <pvPortMalloc+0xf8>
	__asm volatile
 8006cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	613b      	str	r3, [r7, #16]
}
 8006ccc:	bf00      	nop
 8006cce:	e7fe      	b.n	8006cce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	1ad2      	subs	r2, r2, r3
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ce2:	69b8      	ldr	r0, [r7, #24]
 8006ce4:	f000 f908 	bl	8006ef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ce8:	4b1d      	ldr	r3, [pc, #116]	; (8006d60 <pvPortMalloc+0x188>)
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	4a1b      	ldr	r2, [pc, #108]	; (8006d60 <pvPortMalloc+0x188>)
 8006cf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cf6:	4b1a      	ldr	r3, [pc, #104]	; (8006d60 <pvPortMalloc+0x188>)
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	4b1b      	ldr	r3, [pc, #108]	; (8006d68 <pvPortMalloc+0x190>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d203      	bcs.n	8006d0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d02:	4b17      	ldr	r3, [pc, #92]	; (8006d60 <pvPortMalloc+0x188>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a18      	ldr	r2, [pc, #96]	; (8006d68 <pvPortMalloc+0x190>)
 8006d08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	4b13      	ldr	r3, [pc, #76]	; (8006d5c <pvPortMalloc+0x184>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	431a      	orrs	r2, r3
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d1e:	4b13      	ldr	r3, [pc, #76]	; (8006d6c <pvPortMalloc+0x194>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3301      	adds	r3, #1
 8006d24:	4a11      	ldr	r2, [pc, #68]	; (8006d6c <pvPortMalloc+0x194>)
 8006d26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d28:	f7fe fcfc 	bl	8005724 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00a      	beq.n	8006d4c <pvPortMalloc+0x174>
	__asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	60fb      	str	r3, [r7, #12]
}
 8006d48:	bf00      	nop
 8006d4a:	e7fe      	b.n	8006d4a <pvPortMalloc+0x172>
	return pvReturn;
 8006d4c:	69fb      	ldr	r3, [r7, #28]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3728      	adds	r7, #40	; 0x28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20004fd8 	.word	0x20004fd8
 8006d5c:	20004fec 	.word	0x20004fec
 8006d60:	20004fdc 	.word	0x20004fdc
 8006d64:	20004fd0 	.word	0x20004fd0
 8006d68:	20004fe0 	.word	0x20004fe0
 8006d6c:	20004fe4 	.word	0x20004fe4

08006d70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d04d      	beq.n	8006e1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d82:	2308      	movs	r3, #8
 8006d84:	425b      	negs	r3, r3
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	4413      	add	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	4b24      	ldr	r3, [pc, #144]	; (8006e28 <vPortFree+0xb8>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4013      	ands	r3, r2
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10a      	bne.n	8006db4 <vPortFree+0x44>
	__asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	60fb      	str	r3, [r7, #12]
}
 8006db0:	bf00      	nop
 8006db2:	e7fe      	b.n	8006db2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00a      	beq.n	8006dd2 <vPortFree+0x62>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	60bb      	str	r3, [r7, #8]
}
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	685a      	ldr	r2, [r3, #4]
 8006dd6:	4b14      	ldr	r3, [pc, #80]	; (8006e28 <vPortFree+0xb8>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4013      	ands	r3, r2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d01e      	beq.n	8006e1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d11a      	bne.n	8006e1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	4b0e      	ldr	r3, [pc, #56]	; (8006e28 <vPortFree+0xb8>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	43db      	mvns	r3, r3
 8006df2:	401a      	ands	r2, r3
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006df8:	f7fe fc86 	bl	8005708 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	4b0a      	ldr	r3, [pc, #40]	; (8006e2c <vPortFree+0xbc>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4413      	add	r3, r2
 8006e06:	4a09      	ldr	r2, [pc, #36]	; (8006e2c <vPortFree+0xbc>)
 8006e08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e0a:	6938      	ldr	r0, [r7, #16]
 8006e0c:	f000 f874 	bl	8006ef8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e10:	4b07      	ldr	r3, [pc, #28]	; (8006e30 <vPortFree+0xc0>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	3301      	adds	r3, #1
 8006e16:	4a06      	ldr	r2, [pc, #24]	; (8006e30 <vPortFree+0xc0>)
 8006e18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e1a:	f7fe fc83 	bl	8005724 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e1e:	bf00      	nop
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20004fec 	.word	0x20004fec
 8006e2c:	20004fdc 	.word	0x20004fdc
 8006e30:	20004fe8 	.word	0x20004fe8

08006e34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e40:	4b27      	ldr	r3, [pc, #156]	; (8006ee0 <prvHeapInit+0xac>)
 8006e42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f003 0307 	and.w	r3, r3, #7
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00c      	beq.n	8006e68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	3307      	adds	r3, #7
 8006e52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f023 0307 	bic.w	r3, r3, #7
 8006e5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	4a1f      	ldr	r2, [pc, #124]	; (8006ee0 <prvHeapInit+0xac>)
 8006e64:	4413      	add	r3, r2
 8006e66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e6c:	4a1d      	ldr	r2, [pc, #116]	; (8006ee4 <prvHeapInit+0xb0>)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e72:	4b1c      	ldr	r3, [pc, #112]	; (8006ee4 <prvHeapInit+0xb0>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e80:	2208      	movs	r2, #8
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	1a9b      	subs	r3, r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0307 	bic.w	r3, r3, #7
 8006e8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4a15      	ldr	r2, [pc, #84]	; (8006ee8 <prvHeapInit+0xb4>)
 8006e94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e96:	4b14      	ldr	r3, [pc, #80]	; (8006ee8 <prvHeapInit+0xb4>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e9e:	4b12      	ldr	r3, [pc, #72]	; (8006ee8 <prvHeapInit+0xb4>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	1ad2      	subs	r2, r2, r3
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006eb4:	4b0c      	ldr	r3, [pc, #48]	; (8006ee8 <prvHeapInit+0xb4>)
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	4a0a      	ldr	r2, [pc, #40]	; (8006eec <prvHeapInit+0xb8>)
 8006ec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	4a09      	ldr	r2, [pc, #36]	; (8006ef0 <prvHeapInit+0xbc>)
 8006eca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ecc:	4b09      	ldr	r3, [pc, #36]	; (8006ef4 <prvHeapInit+0xc0>)
 8006ece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ed2:	601a      	str	r2, [r3, #0]
}
 8006ed4:	bf00      	nop
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	200013d0 	.word	0x200013d0
 8006ee4:	20004fd0 	.word	0x20004fd0
 8006ee8:	20004fd8 	.word	0x20004fd8
 8006eec:	20004fe0 	.word	0x20004fe0
 8006ef0:	20004fdc 	.word	0x20004fdc
 8006ef4:	20004fec 	.word	0x20004fec

08006ef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f00:	4b28      	ldr	r3, [pc, #160]	; (8006fa4 <prvInsertBlockIntoFreeList+0xac>)
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	e002      	b.n	8006f0c <prvInsertBlockIntoFreeList+0x14>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	60fb      	str	r3, [r7, #12]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d8f7      	bhi.n	8006f06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	4413      	add	r3, r2
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d108      	bne.n	8006f3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	441a      	add	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	441a      	add	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d118      	bne.n	8006f80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	4b15      	ldr	r3, [pc, #84]	; (8006fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d00d      	beq.n	8006f76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	441a      	add	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	e008      	b.n	8006f88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f76:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	e003      	b.n	8006f88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d002      	beq.n	8006f96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f96:	bf00      	nop
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	20004fd0 	.word	0x20004fd0
 8006fa8:	20004fd8 	.word	0x20004fd8

08006fac <__errno>:
 8006fac:	4b01      	ldr	r3, [pc, #4]	; (8006fb4 <__errno+0x8>)
 8006fae:	6818      	ldr	r0, [r3, #0]
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	20000010 	.word	0x20000010

08006fb8 <std>:
 8006fb8:	2300      	movs	r3, #0
 8006fba:	b510      	push	{r4, lr}
 8006fbc:	4604      	mov	r4, r0
 8006fbe:	e9c0 3300 	strd	r3, r3, [r0]
 8006fc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fc6:	6083      	str	r3, [r0, #8]
 8006fc8:	8181      	strh	r1, [r0, #12]
 8006fca:	6643      	str	r3, [r0, #100]	; 0x64
 8006fcc:	81c2      	strh	r2, [r0, #14]
 8006fce:	6183      	str	r3, [r0, #24]
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	2208      	movs	r2, #8
 8006fd4:	305c      	adds	r0, #92	; 0x5c
 8006fd6:	f000 f91a 	bl	800720e <memset>
 8006fda:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <std+0x38>)
 8006fdc:	6263      	str	r3, [r4, #36]	; 0x24
 8006fde:	4b05      	ldr	r3, [pc, #20]	; (8006ff4 <std+0x3c>)
 8006fe0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fe2:	4b05      	ldr	r3, [pc, #20]	; (8006ff8 <std+0x40>)
 8006fe4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fe6:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <std+0x44>)
 8006fe8:	6224      	str	r4, [r4, #32]
 8006fea:	6323      	str	r3, [r4, #48]	; 0x30
 8006fec:	bd10      	pop	{r4, pc}
 8006fee:	bf00      	nop
 8006ff0:	08007515 	.word	0x08007515
 8006ff4:	08007537 	.word	0x08007537
 8006ff8:	0800756f 	.word	0x0800756f
 8006ffc:	08007593 	.word	0x08007593

08007000 <_cleanup_r>:
 8007000:	4901      	ldr	r1, [pc, #4]	; (8007008 <_cleanup_r+0x8>)
 8007002:	f000 b8af 	b.w	8007164 <_fwalk_reent>
 8007006:	bf00      	nop
 8007008:	0800775d 	.word	0x0800775d

0800700c <__sfmoreglue>:
 800700c:	b570      	push	{r4, r5, r6, lr}
 800700e:	2268      	movs	r2, #104	; 0x68
 8007010:	1e4d      	subs	r5, r1, #1
 8007012:	4355      	muls	r5, r2
 8007014:	460e      	mov	r6, r1
 8007016:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800701a:	f000 f921 	bl	8007260 <_malloc_r>
 800701e:	4604      	mov	r4, r0
 8007020:	b140      	cbz	r0, 8007034 <__sfmoreglue+0x28>
 8007022:	2100      	movs	r1, #0
 8007024:	e9c0 1600 	strd	r1, r6, [r0]
 8007028:	300c      	adds	r0, #12
 800702a:	60a0      	str	r0, [r4, #8]
 800702c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007030:	f000 f8ed 	bl	800720e <memset>
 8007034:	4620      	mov	r0, r4
 8007036:	bd70      	pop	{r4, r5, r6, pc}

08007038 <__sfp_lock_acquire>:
 8007038:	4801      	ldr	r0, [pc, #4]	; (8007040 <__sfp_lock_acquire+0x8>)
 800703a:	f000 b8d8 	b.w	80071ee <__retarget_lock_acquire_recursive>
 800703e:	bf00      	nop
 8007040:	20004ff1 	.word	0x20004ff1

08007044 <__sfp_lock_release>:
 8007044:	4801      	ldr	r0, [pc, #4]	; (800704c <__sfp_lock_release+0x8>)
 8007046:	f000 b8d3 	b.w	80071f0 <__retarget_lock_release_recursive>
 800704a:	bf00      	nop
 800704c:	20004ff1 	.word	0x20004ff1

08007050 <__sinit_lock_acquire>:
 8007050:	4801      	ldr	r0, [pc, #4]	; (8007058 <__sinit_lock_acquire+0x8>)
 8007052:	f000 b8cc 	b.w	80071ee <__retarget_lock_acquire_recursive>
 8007056:	bf00      	nop
 8007058:	20004ff2 	.word	0x20004ff2

0800705c <__sinit_lock_release>:
 800705c:	4801      	ldr	r0, [pc, #4]	; (8007064 <__sinit_lock_release+0x8>)
 800705e:	f000 b8c7 	b.w	80071f0 <__retarget_lock_release_recursive>
 8007062:	bf00      	nop
 8007064:	20004ff2 	.word	0x20004ff2

08007068 <__sinit>:
 8007068:	b510      	push	{r4, lr}
 800706a:	4604      	mov	r4, r0
 800706c:	f7ff fff0 	bl	8007050 <__sinit_lock_acquire>
 8007070:	69a3      	ldr	r3, [r4, #24]
 8007072:	b11b      	cbz	r3, 800707c <__sinit+0x14>
 8007074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007078:	f7ff bff0 	b.w	800705c <__sinit_lock_release>
 800707c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007080:	6523      	str	r3, [r4, #80]	; 0x50
 8007082:	4b13      	ldr	r3, [pc, #76]	; (80070d0 <__sinit+0x68>)
 8007084:	4a13      	ldr	r2, [pc, #76]	; (80070d4 <__sinit+0x6c>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	62a2      	str	r2, [r4, #40]	; 0x28
 800708a:	42a3      	cmp	r3, r4
 800708c:	bf04      	itt	eq
 800708e:	2301      	moveq	r3, #1
 8007090:	61a3      	streq	r3, [r4, #24]
 8007092:	4620      	mov	r0, r4
 8007094:	f000 f820 	bl	80070d8 <__sfp>
 8007098:	6060      	str	r0, [r4, #4]
 800709a:	4620      	mov	r0, r4
 800709c:	f000 f81c 	bl	80070d8 <__sfp>
 80070a0:	60a0      	str	r0, [r4, #8]
 80070a2:	4620      	mov	r0, r4
 80070a4:	f000 f818 	bl	80070d8 <__sfp>
 80070a8:	2200      	movs	r2, #0
 80070aa:	60e0      	str	r0, [r4, #12]
 80070ac:	2104      	movs	r1, #4
 80070ae:	6860      	ldr	r0, [r4, #4]
 80070b0:	f7ff ff82 	bl	8006fb8 <std>
 80070b4:	68a0      	ldr	r0, [r4, #8]
 80070b6:	2201      	movs	r2, #1
 80070b8:	2109      	movs	r1, #9
 80070ba:	f7ff ff7d 	bl	8006fb8 <std>
 80070be:	68e0      	ldr	r0, [r4, #12]
 80070c0:	2202      	movs	r2, #2
 80070c2:	2112      	movs	r1, #18
 80070c4:	f7ff ff78 	bl	8006fb8 <std>
 80070c8:	2301      	movs	r3, #1
 80070ca:	61a3      	str	r3, [r4, #24]
 80070cc:	e7d2      	b.n	8007074 <__sinit+0xc>
 80070ce:	bf00      	nop
 80070d0:	08008e80 	.word	0x08008e80
 80070d4:	08007001 	.word	0x08007001

080070d8 <__sfp>:
 80070d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070da:	4607      	mov	r7, r0
 80070dc:	f7ff ffac 	bl	8007038 <__sfp_lock_acquire>
 80070e0:	4b1e      	ldr	r3, [pc, #120]	; (800715c <__sfp+0x84>)
 80070e2:	681e      	ldr	r6, [r3, #0]
 80070e4:	69b3      	ldr	r3, [r6, #24]
 80070e6:	b913      	cbnz	r3, 80070ee <__sfp+0x16>
 80070e8:	4630      	mov	r0, r6
 80070ea:	f7ff ffbd 	bl	8007068 <__sinit>
 80070ee:	3648      	adds	r6, #72	; 0x48
 80070f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	d503      	bpl.n	8007100 <__sfp+0x28>
 80070f8:	6833      	ldr	r3, [r6, #0]
 80070fa:	b30b      	cbz	r3, 8007140 <__sfp+0x68>
 80070fc:	6836      	ldr	r6, [r6, #0]
 80070fe:	e7f7      	b.n	80070f0 <__sfp+0x18>
 8007100:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007104:	b9d5      	cbnz	r5, 800713c <__sfp+0x64>
 8007106:	4b16      	ldr	r3, [pc, #88]	; (8007160 <__sfp+0x88>)
 8007108:	60e3      	str	r3, [r4, #12]
 800710a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800710e:	6665      	str	r5, [r4, #100]	; 0x64
 8007110:	f000 f86c 	bl	80071ec <__retarget_lock_init_recursive>
 8007114:	f7ff ff96 	bl	8007044 <__sfp_lock_release>
 8007118:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800711c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007120:	6025      	str	r5, [r4, #0]
 8007122:	61a5      	str	r5, [r4, #24]
 8007124:	2208      	movs	r2, #8
 8007126:	4629      	mov	r1, r5
 8007128:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800712c:	f000 f86f 	bl	800720e <memset>
 8007130:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007134:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007138:	4620      	mov	r0, r4
 800713a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800713c:	3468      	adds	r4, #104	; 0x68
 800713e:	e7d9      	b.n	80070f4 <__sfp+0x1c>
 8007140:	2104      	movs	r1, #4
 8007142:	4638      	mov	r0, r7
 8007144:	f7ff ff62 	bl	800700c <__sfmoreglue>
 8007148:	4604      	mov	r4, r0
 800714a:	6030      	str	r0, [r6, #0]
 800714c:	2800      	cmp	r0, #0
 800714e:	d1d5      	bne.n	80070fc <__sfp+0x24>
 8007150:	f7ff ff78 	bl	8007044 <__sfp_lock_release>
 8007154:	230c      	movs	r3, #12
 8007156:	603b      	str	r3, [r7, #0]
 8007158:	e7ee      	b.n	8007138 <__sfp+0x60>
 800715a:	bf00      	nop
 800715c:	08008e80 	.word	0x08008e80
 8007160:	ffff0001 	.word	0xffff0001

08007164 <_fwalk_reent>:
 8007164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007168:	4606      	mov	r6, r0
 800716a:	4688      	mov	r8, r1
 800716c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007170:	2700      	movs	r7, #0
 8007172:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007176:	f1b9 0901 	subs.w	r9, r9, #1
 800717a:	d505      	bpl.n	8007188 <_fwalk_reent+0x24>
 800717c:	6824      	ldr	r4, [r4, #0]
 800717e:	2c00      	cmp	r4, #0
 8007180:	d1f7      	bne.n	8007172 <_fwalk_reent+0xe>
 8007182:	4638      	mov	r0, r7
 8007184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007188:	89ab      	ldrh	r3, [r5, #12]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d907      	bls.n	800719e <_fwalk_reent+0x3a>
 800718e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007192:	3301      	adds	r3, #1
 8007194:	d003      	beq.n	800719e <_fwalk_reent+0x3a>
 8007196:	4629      	mov	r1, r5
 8007198:	4630      	mov	r0, r6
 800719a:	47c0      	blx	r8
 800719c:	4307      	orrs	r7, r0
 800719e:	3568      	adds	r5, #104	; 0x68
 80071a0:	e7e9      	b.n	8007176 <_fwalk_reent+0x12>
	...

080071a4 <__libc_init_array>:
 80071a4:	b570      	push	{r4, r5, r6, lr}
 80071a6:	4d0d      	ldr	r5, [pc, #52]	; (80071dc <__libc_init_array+0x38>)
 80071a8:	4c0d      	ldr	r4, [pc, #52]	; (80071e0 <__libc_init_array+0x3c>)
 80071aa:	1b64      	subs	r4, r4, r5
 80071ac:	10a4      	asrs	r4, r4, #2
 80071ae:	2600      	movs	r6, #0
 80071b0:	42a6      	cmp	r6, r4
 80071b2:	d109      	bne.n	80071c8 <__libc_init_array+0x24>
 80071b4:	4d0b      	ldr	r5, [pc, #44]	; (80071e4 <__libc_init_array+0x40>)
 80071b6:	4c0c      	ldr	r4, [pc, #48]	; (80071e8 <__libc_init_array+0x44>)
 80071b8:	f001 f83c 	bl	8008234 <_init>
 80071bc:	1b64      	subs	r4, r4, r5
 80071be:	10a4      	asrs	r4, r4, #2
 80071c0:	2600      	movs	r6, #0
 80071c2:	42a6      	cmp	r6, r4
 80071c4:	d105      	bne.n	80071d2 <__libc_init_array+0x2e>
 80071c6:	bd70      	pop	{r4, r5, r6, pc}
 80071c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80071cc:	4798      	blx	r3
 80071ce:	3601      	adds	r6, #1
 80071d0:	e7ee      	b.n	80071b0 <__libc_init_array+0xc>
 80071d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071d6:	4798      	blx	r3
 80071d8:	3601      	adds	r6, #1
 80071da:	e7f2      	b.n	80071c2 <__libc_init_array+0x1e>
 80071dc:	08008f70 	.word	0x08008f70
 80071e0:	08008f70 	.word	0x08008f70
 80071e4:	08008f70 	.word	0x08008f70
 80071e8:	08008f74 	.word	0x08008f74

080071ec <__retarget_lock_init_recursive>:
 80071ec:	4770      	bx	lr

080071ee <__retarget_lock_acquire_recursive>:
 80071ee:	4770      	bx	lr

080071f0 <__retarget_lock_release_recursive>:
 80071f0:	4770      	bx	lr

080071f2 <memcpy>:
 80071f2:	440a      	add	r2, r1
 80071f4:	4291      	cmp	r1, r2
 80071f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80071fa:	d100      	bne.n	80071fe <memcpy+0xc>
 80071fc:	4770      	bx	lr
 80071fe:	b510      	push	{r4, lr}
 8007200:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007204:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007208:	4291      	cmp	r1, r2
 800720a:	d1f9      	bne.n	8007200 <memcpy+0xe>
 800720c:	bd10      	pop	{r4, pc}

0800720e <memset>:
 800720e:	4402      	add	r2, r0
 8007210:	4603      	mov	r3, r0
 8007212:	4293      	cmp	r3, r2
 8007214:	d100      	bne.n	8007218 <memset+0xa>
 8007216:	4770      	bx	lr
 8007218:	f803 1b01 	strb.w	r1, [r3], #1
 800721c:	e7f9      	b.n	8007212 <memset+0x4>
	...

08007220 <sbrk_aligned>:
 8007220:	b570      	push	{r4, r5, r6, lr}
 8007222:	4e0e      	ldr	r6, [pc, #56]	; (800725c <sbrk_aligned+0x3c>)
 8007224:	460c      	mov	r4, r1
 8007226:	6831      	ldr	r1, [r6, #0]
 8007228:	4605      	mov	r5, r0
 800722a:	b911      	cbnz	r1, 8007232 <sbrk_aligned+0x12>
 800722c:	f000 f962 	bl	80074f4 <_sbrk_r>
 8007230:	6030      	str	r0, [r6, #0]
 8007232:	4621      	mov	r1, r4
 8007234:	4628      	mov	r0, r5
 8007236:	f000 f95d 	bl	80074f4 <_sbrk_r>
 800723a:	1c43      	adds	r3, r0, #1
 800723c:	d00a      	beq.n	8007254 <sbrk_aligned+0x34>
 800723e:	1cc4      	adds	r4, r0, #3
 8007240:	f024 0403 	bic.w	r4, r4, #3
 8007244:	42a0      	cmp	r0, r4
 8007246:	d007      	beq.n	8007258 <sbrk_aligned+0x38>
 8007248:	1a21      	subs	r1, r4, r0
 800724a:	4628      	mov	r0, r5
 800724c:	f000 f952 	bl	80074f4 <_sbrk_r>
 8007250:	3001      	adds	r0, #1
 8007252:	d101      	bne.n	8007258 <sbrk_aligned+0x38>
 8007254:	f04f 34ff 	mov.w	r4, #4294967295
 8007258:	4620      	mov	r0, r4
 800725a:	bd70      	pop	{r4, r5, r6, pc}
 800725c:	20004ff8 	.word	0x20004ff8

08007260 <_malloc_r>:
 8007260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007264:	1ccd      	adds	r5, r1, #3
 8007266:	f025 0503 	bic.w	r5, r5, #3
 800726a:	3508      	adds	r5, #8
 800726c:	2d0c      	cmp	r5, #12
 800726e:	bf38      	it	cc
 8007270:	250c      	movcc	r5, #12
 8007272:	2d00      	cmp	r5, #0
 8007274:	4607      	mov	r7, r0
 8007276:	db01      	blt.n	800727c <_malloc_r+0x1c>
 8007278:	42a9      	cmp	r1, r5
 800727a:	d905      	bls.n	8007288 <_malloc_r+0x28>
 800727c:	230c      	movs	r3, #12
 800727e:	603b      	str	r3, [r7, #0]
 8007280:	2600      	movs	r6, #0
 8007282:	4630      	mov	r0, r6
 8007284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007288:	4e2e      	ldr	r6, [pc, #184]	; (8007344 <_malloc_r+0xe4>)
 800728a:	f000 fae1 	bl	8007850 <__malloc_lock>
 800728e:	6833      	ldr	r3, [r6, #0]
 8007290:	461c      	mov	r4, r3
 8007292:	bb34      	cbnz	r4, 80072e2 <_malloc_r+0x82>
 8007294:	4629      	mov	r1, r5
 8007296:	4638      	mov	r0, r7
 8007298:	f7ff ffc2 	bl	8007220 <sbrk_aligned>
 800729c:	1c43      	adds	r3, r0, #1
 800729e:	4604      	mov	r4, r0
 80072a0:	d14d      	bne.n	800733e <_malloc_r+0xde>
 80072a2:	6834      	ldr	r4, [r6, #0]
 80072a4:	4626      	mov	r6, r4
 80072a6:	2e00      	cmp	r6, #0
 80072a8:	d140      	bne.n	800732c <_malloc_r+0xcc>
 80072aa:	6823      	ldr	r3, [r4, #0]
 80072ac:	4631      	mov	r1, r6
 80072ae:	4638      	mov	r0, r7
 80072b0:	eb04 0803 	add.w	r8, r4, r3
 80072b4:	f000 f91e 	bl	80074f4 <_sbrk_r>
 80072b8:	4580      	cmp	r8, r0
 80072ba:	d13a      	bne.n	8007332 <_malloc_r+0xd2>
 80072bc:	6821      	ldr	r1, [r4, #0]
 80072be:	3503      	adds	r5, #3
 80072c0:	1a6d      	subs	r5, r5, r1
 80072c2:	f025 0503 	bic.w	r5, r5, #3
 80072c6:	3508      	adds	r5, #8
 80072c8:	2d0c      	cmp	r5, #12
 80072ca:	bf38      	it	cc
 80072cc:	250c      	movcc	r5, #12
 80072ce:	4629      	mov	r1, r5
 80072d0:	4638      	mov	r0, r7
 80072d2:	f7ff ffa5 	bl	8007220 <sbrk_aligned>
 80072d6:	3001      	adds	r0, #1
 80072d8:	d02b      	beq.n	8007332 <_malloc_r+0xd2>
 80072da:	6823      	ldr	r3, [r4, #0]
 80072dc:	442b      	add	r3, r5
 80072de:	6023      	str	r3, [r4, #0]
 80072e0:	e00e      	b.n	8007300 <_malloc_r+0xa0>
 80072e2:	6822      	ldr	r2, [r4, #0]
 80072e4:	1b52      	subs	r2, r2, r5
 80072e6:	d41e      	bmi.n	8007326 <_malloc_r+0xc6>
 80072e8:	2a0b      	cmp	r2, #11
 80072ea:	d916      	bls.n	800731a <_malloc_r+0xba>
 80072ec:	1961      	adds	r1, r4, r5
 80072ee:	42a3      	cmp	r3, r4
 80072f0:	6025      	str	r5, [r4, #0]
 80072f2:	bf18      	it	ne
 80072f4:	6059      	strne	r1, [r3, #4]
 80072f6:	6863      	ldr	r3, [r4, #4]
 80072f8:	bf08      	it	eq
 80072fa:	6031      	streq	r1, [r6, #0]
 80072fc:	5162      	str	r2, [r4, r5]
 80072fe:	604b      	str	r3, [r1, #4]
 8007300:	4638      	mov	r0, r7
 8007302:	f104 060b 	add.w	r6, r4, #11
 8007306:	f000 faa9 	bl	800785c <__malloc_unlock>
 800730a:	f026 0607 	bic.w	r6, r6, #7
 800730e:	1d23      	adds	r3, r4, #4
 8007310:	1af2      	subs	r2, r6, r3
 8007312:	d0b6      	beq.n	8007282 <_malloc_r+0x22>
 8007314:	1b9b      	subs	r3, r3, r6
 8007316:	50a3      	str	r3, [r4, r2]
 8007318:	e7b3      	b.n	8007282 <_malloc_r+0x22>
 800731a:	6862      	ldr	r2, [r4, #4]
 800731c:	42a3      	cmp	r3, r4
 800731e:	bf0c      	ite	eq
 8007320:	6032      	streq	r2, [r6, #0]
 8007322:	605a      	strne	r2, [r3, #4]
 8007324:	e7ec      	b.n	8007300 <_malloc_r+0xa0>
 8007326:	4623      	mov	r3, r4
 8007328:	6864      	ldr	r4, [r4, #4]
 800732a:	e7b2      	b.n	8007292 <_malloc_r+0x32>
 800732c:	4634      	mov	r4, r6
 800732e:	6876      	ldr	r6, [r6, #4]
 8007330:	e7b9      	b.n	80072a6 <_malloc_r+0x46>
 8007332:	230c      	movs	r3, #12
 8007334:	603b      	str	r3, [r7, #0]
 8007336:	4638      	mov	r0, r7
 8007338:	f000 fa90 	bl	800785c <__malloc_unlock>
 800733c:	e7a1      	b.n	8007282 <_malloc_r+0x22>
 800733e:	6025      	str	r5, [r4, #0]
 8007340:	e7de      	b.n	8007300 <_malloc_r+0xa0>
 8007342:	bf00      	nop
 8007344:	20004ff4 	.word	0x20004ff4

08007348 <srand>:
 8007348:	b538      	push	{r3, r4, r5, lr}
 800734a:	4b10      	ldr	r3, [pc, #64]	; (800738c <srand+0x44>)
 800734c:	681d      	ldr	r5, [r3, #0]
 800734e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007350:	4604      	mov	r4, r0
 8007352:	b9b3      	cbnz	r3, 8007382 <srand+0x3a>
 8007354:	2018      	movs	r0, #24
 8007356:	f000 fa73 	bl	8007840 <malloc>
 800735a:	4602      	mov	r2, r0
 800735c:	63a8      	str	r0, [r5, #56]	; 0x38
 800735e:	b920      	cbnz	r0, 800736a <srand+0x22>
 8007360:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <srand+0x48>)
 8007362:	480c      	ldr	r0, [pc, #48]	; (8007394 <srand+0x4c>)
 8007364:	2142      	movs	r1, #66	; 0x42
 8007366:	f000 f945 	bl	80075f4 <__assert_func>
 800736a:	490b      	ldr	r1, [pc, #44]	; (8007398 <srand+0x50>)
 800736c:	4b0b      	ldr	r3, [pc, #44]	; (800739c <srand+0x54>)
 800736e:	e9c0 1300 	strd	r1, r3, [r0]
 8007372:	4b0b      	ldr	r3, [pc, #44]	; (80073a0 <srand+0x58>)
 8007374:	6083      	str	r3, [r0, #8]
 8007376:	230b      	movs	r3, #11
 8007378:	8183      	strh	r3, [r0, #12]
 800737a:	2100      	movs	r1, #0
 800737c:	2001      	movs	r0, #1
 800737e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007382:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007384:	2200      	movs	r2, #0
 8007386:	611c      	str	r4, [r3, #16]
 8007388:	615a      	str	r2, [r3, #20]
 800738a:	bd38      	pop	{r3, r4, r5, pc}
 800738c:	20000010 	.word	0x20000010
 8007390:	08008e84 	.word	0x08008e84
 8007394:	08008e9b 	.word	0x08008e9b
 8007398:	abcd330e 	.word	0xabcd330e
 800739c:	e66d1234 	.word	0xe66d1234
 80073a0:	0005deec 	.word	0x0005deec

080073a4 <rand>:
 80073a4:	4b16      	ldr	r3, [pc, #88]	; (8007400 <rand+0x5c>)
 80073a6:	b510      	push	{r4, lr}
 80073a8:	681c      	ldr	r4, [r3, #0]
 80073aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80073ac:	b9b3      	cbnz	r3, 80073dc <rand+0x38>
 80073ae:	2018      	movs	r0, #24
 80073b0:	f000 fa46 	bl	8007840 <malloc>
 80073b4:	63a0      	str	r0, [r4, #56]	; 0x38
 80073b6:	b928      	cbnz	r0, 80073c4 <rand+0x20>
 80073b8:	4602      	mov	r2, r0
 80073ba:	4b12      	ldr	r3, [pc, #72]	; (8007404 <rand+0x60>)
 80073bc:	4812      	ldr	r0, [pc, #72]	; (8007408 <rand+0x64>)
 80073be:	214e      	movs	r1, #78	; 0x4e
 80073c0:	f000 f918 	bl	80075f4 <__assert_func>
 80073c4:	4a11      	ldr	r2, [pc, #68]	; (800740c <rand+0x68>)
 80073c6:	4b12      	ldr	r3, [pc, #72]	; (8007410 <rand+0x6c>)
 80073c8:	e9c0 2300 	strd	r2, r3, [r0]
 80073cc:	4b11      	ldr	r3, [pc, #68]	; (8007414 <rand+0x70>)
 80073ce:	6083      	str	r3, [r0, #8]
 80073d0:	230b      	movs	r3, #11
 80073d2:	8183      	strh	r3, [r0, #12]
 80073d4:	2201      	movs	r2, #1
 80073d6:	2300      	movs	r3, #0
 80073d8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80073dc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80073de:	4a0e      	ldr	r2, [pc, #56]	; (8007418 <rand+0x74>)
 80073e0:	6920      	ldr	r0, [r4, #16]
 80073e2:	6963      	ldr	r3, [r4, #20]
 80073e4:	490d      	ldr	r1, [pc, #52]	; (800741c <rand+0x78>)
 80073e6:	4342      	muls	r2, r0
 80073e8:	fb01 2203 	mla	r2, r1, r3, r2
 80073ec:	fba0 0101 	umull	r0, r1, r0, r1
 80073f0:	1c43      	adds	r3, r0, #1
 80073f2:	eb42 0001 	adc.w	r0, r2, r1
 80073f6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80073fa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80073fe:	bd10      	pop	{r4, pc}
 8007400:	20000010 	.word	0x20000010
 8007404:	08008e84 	.word	0x08008e84
 8007408:	08008e9b 	.word	0x08008e9b
 800740c:	abcd330e 	.word	0xabcd330e
 8007410:	e66d1234 	.word	0xe66d1234
 8007414:	0005deec 	.word	0x0005deec
 8007418:	5851f42d 	.word	0x5851f42d
 800741c:	4c957f2d 	.word	0x4c957f2d

08007420 <cleanup_glue>:
 8007420:	b538      	push	{r3, r4, r5, lr}
 8007422:	460c      	mov	r4, r1
 8007424:	6809      	ldr	r1, [r1, #0]
 8007426:	4605      	mov	r5, r0
 8007428:	b109      	cbz	r1, 800742e <cleanup_glue+0xe>
 800742a:	f7ff fff9 	bl	8007420 <cleanup_glue>
 800742e:	4621      	mov	r1, r4
 8007430:	4628      	mov	r0, r5
 8007432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007436:	f000 ba17 	b.w	8007868 <_free_r>
	...

0800743c <_reclaim_reent>:
 800743c:	4b2c      	ldr	r3, [pc, #176]	; (80074f0 <_reclaim_reent+0xb4>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4283      	cmp	r3, r0
 8007442:	b570      	push	{r4, r5, r6, lr}
 8007444:	4604      	mov	r4, r0
 8007446:	d051      	beq.n	80074ec <_reclaim_reent+0xb0>
 8007448:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800744a:	b143      	cbz	r3, 800745e <_reclaim_reent+0x22>
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d14a      	bne.n	80074e8 <_reclaim_reent+0xac>
 8007452:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007454:	6819      	ldr	r1, [r3, #0]
 8007456:	b111      	cbz	r1, 800745e <_reclaim_reent+0x22>
 8007458:	4620      	mov	r0, r4
 800745a:	f000 fa05 	bl	8007868 <_free_r>
 800745e:	6961      	ldr	r1, [r4, #20]
 8007460:	b111      	cbz	r1, 8007468 <_reclaim_reent+0x2c>
 8007462:	4620      	mov	r0, r4
 8007464:	f000 fa00 	bl	8007868 <_free_r>
 8007468:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800746a:	b111      	cbz	r1, 8007472 <_reclaim_reent+0x36>
 800746c:	4620      	mov	r0, r4
 800746e:	f000 f9fb 	bl	8007868 <_free_r>
 8007472:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007474:	b111      	cbz	r1, 800747c <_reclaim_reent+0x40>
 8007476:	4620      	mov	r0, r4
 8007478:	f000 f9f6 	bl	8007868 <_free_r>
 800747c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800747e:	b111      	cbz	r1, 8007486 <_reclaim_reent+0x4a>
 8007480:	4620      	mov	r0, r4
 8007482:	f000 f9f1 	bl	8007868 <_free_r>
 8007486:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007488:	b111      	cbz	r1, 8007490 <_reclaim_reent+0x54>
 800748a:	4620      	mov	r0, r4
 800748c:	f000 f9ec 	bl	8007868 <_free_r>
 8007490:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007492:	b111      	cbz	r1, 800749a <_reclaim_reent+0x5e>
 8007494:	4620      	mov	r0, r4
 8007496:	f000 f9e7 	bl	8007868 <_free_r>
 800749a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800749c:	b111      	cbz	r1, 80074a4 <_reclaim_reent+0x68>
 800749e:	4620      	mov	r0, r4
 80074a0:	f000 f9e2 	bl	8007868 <_free_r>
 80074a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074a6:	b111      	cbz	r1, 80074ae <_reclaim_reent+0x72>
 80074a8:	4620      	mov	r0, r4
 80074aa:	f000 f9dd 	bl	8007868 <_free_r>
 80074ae:	69a3      	ldr	r3, [r4, #24]
 80074b0:	b1e3      	cbz	r3, 80074ec <_reclaim_reent+0xb0>
 80074b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80074b4:	4620      	mov	r0, r4
 80074b6:	4798      	blx	r3
 80074b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80074ba:	b1b9      	cbz	r1, 80074ec <_reclaim_reent+0xb0>
 80074bc:	4620      	mov	r0, r4
 80074be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80074c2:	f7ff bfad 	b.w	8007420 <cleanup_glue>
 80074c6:	5949      	ldr	r1, [r1, r5]
 80074c8:	b941      	cbnz	r1, 80074dc <_reclaim_reent+0xa0>
 80074ca:	3504      	adds	r5, #4
 80074cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074ce:	2d80      	cmp	r5, #128	; 0x80
 80074d0:	68d9      	ldr	r1, [r3, #12]
 80074d2:	d1f8      	bne.n	80074c6 <_reclaim_reent+0x8a>
 80074d4:	4620      	mov	r0, r4
 80074d6:	f000 f9c7 	bl	8007868 <_free_r>
 80074da:	e7ba      	b.n	8007452 <_reclaim_reent+0x16>
 80074dc:	680e      	ldr	r6, [r1, #0]
 80074de:	4620      	mov	r0, r4
 80074e0:	f000 f9c2 	bl	8007868 <_free_r>
 80074e4:	4631      	mov	r1, r6
 80074e6:	e7ef      	b.n	80074c8 <_reclaim_reent+0x8c>
 80074e8:	2500      	movs	r5, #0
 80074ea:	e7ef      	b.n	80074cc <_reclaim_reent+0x90>
 80074ec:	bd70      	pop	{r4, r5, r6, pc}
 80074ee:	bf00      	nop
 80074f0:	20000010 	.word	0x20000010

080074f4 <_sbrk_r>:
 80074f4:	b538      	push	{r3, r4, r5, lr}
 80074f6:	4d06      	ldr	r5, [pc, #24]	; (8007510 <_sbrk_r+0x1c>)
 80074f8:	2300      	movs	r3, #0
 80074fa:	4604      	mov	r4, r0
 80074fc:	4608      	mov	r0, r1
 80074fe:	602b      	str	r3, [r5, #0]
 8007500:	f7fa faf2 	bl	8001ae8 <_sbrk>
 8007504:	1c43      	adds	r3, r0, #1
 8007506:	d102      	bne.n	800750e <_sbrk_r+0x1a>
 8007508:	682b      	ldr	r3, [r5, #0]
 800750a:	b103      	cbz	r3, 800750e <_sbrk_r+0x1a>
 800750c:	6023      	str	r3, [r4, #0]
 800750e:	bd38      	pop	{r3, r4, r5, pc}
 8007510:	20004ffc 	.word	0x20004ffc

08007514 <__sread>:
 8007514:	b510      	push	{r4, lr}
 8007516:	460c      	mov	r4, r1
 8007518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800751c:	f000 fcde 	bl	8007edc <_read_r>
 8007520:	2800      	cmp	r0, #0
 8007522:	bfab      	itete	ge
 8007524:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007526:	89a3      	ldrhlt	r3, [r4, #12]
 8007528:	181b      	addge	r3, r3, r0
 800752a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800752e:	bfac      	ite	ge
 8007530:	6563      	strge	r3, [r4, #84]	; 0x54
 8007532:	81a3      	strhlt	r3, [r4, #12]
 8007534:	bd10      	pop	{r4, pc}

08007536 <__swrite>:
 8007536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800753a:	461f      	mov	r7, r3
 800753c:	898b      	ldrh	r3, [r1, #12]
 800753e:	05db      	lsls	r3, r3, #23
 8007540:	4605      	mov	r5, r0
 8007542:	460c      	mov	r4, r1
 8007544:	4616      	mov	r6, r2
 8007546:	d505      	bpl.n	8007554 <__swrite+0x1e>
 8007548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800754c:	2302      	movs	r3, #2
 800754e:	2200      	movs	r2, #0
 8007550:	f000 f964 	bl	800781c <_lseek_r>
 8007554:	89a3      	ldrh	r3, [r4, #12]
 8007556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800755a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800755e:	81a3      	strh	r3, [r4, #12]
 8007560:	4632      	mov	r2, r6
 8007562:	463b      	mov	r3, r7
 8007564:	4628      	mov	r0, r5
 8007566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800756a:	f000 b831 	b.w	80075d0 <_write_r>

0800756e <__sseek>:
 800756e:	b510      	push	{r4, lr}
 8007570:	460c      	mov	r4, r1
 8007572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007576:	f000 f951 	bl	800781c <_lseek_r>
 800757a:	1c43      	adds	r3, r0, #1
 800757c:	89a3      	ldrh	r3, [r4, #12]
 800757e:	bf15      	itete	ne
 8007580:	6560      	strne	r0, [r4, #84]	; 0x54
 8007582:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007586:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800758a:	81a3      	strheq	r3, [r4, #12]
 800758c:	bf18      	it	ne
 800758e:	81a3      	strhne	r3, [r4, #12]
 8007590:	bd10      	pop	{r4, pc}

08007592 <__sclose>:
 8007592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007596:	f000 b84b 	b.w	8007630 <_close_r>
	...

0800759c <time>:
 800759c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800759e:	4b0b      	ldr	r3, [pc, #44]	; (80075cc <time+0x30>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	4669      	mov	r1, sp
 80075a4:	4604      	mov	r4, r0
 80075a6:	6818      	ldr	r0, [r3, #0]
 80075a8:	f000 f926 	bl	80077f8 <_gettimeofday_r>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	bfbe      	ittt	lt
 80075b0:	f04f 32ff 	movlt.w	r2, #4294967295
 80075b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80075b8:	e9cd 2300 	strdlt	r2, r3, [sp]
 80075bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075c0:	b10c      	cbz	r4, 80075c6 <time+0x2a>
 80075c2:	e9c4 0100 	strd	r0, r1, [r4]
 80075c6:	b004      	add	sp, #16
 80075c8:	bd10      	pop	{r4, pc}
 80075ca:	bf00      	nop
 80075cc:	20000010 	.word	0x20000010

080075d0 <_write_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4d07      	ldr	r5, [pc, #28]	; (80075f0 <_write_r+0x20>)
 80075d4:	4604      	mov	r4, r0
 80075d6:	4608      	mov	r0, r1
 80075d8:	4611      	mov	r1, r2
 80075da:	2200      	movs	r2, #0
 80075dc:	602a      	str	r2, [r5, #0]
 80075de:	461a      	mov	r2, r3
 80075e0:	f7fa fa31 	bl	8001a46 <_write>
 80075e4:	1c43      	adds	r3, r0, #1
 80075e6:	d102      	bne.n	80075ee <_write_r+0x1e>
 80075e8:	682b      	ldr	r3, [r5, #0]
 80075ea:	b103      	cbz	r3, 80075ee <_write_r+0x1e>
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	bd38      	pop	{r3, r4, r5, pc}
 80075f0:	20004ffc 	.word	0x20004ffc

080075f4 <__assert_func>:
 80075f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075f6:	4614      	mov	r4, r2
 80075f8:	461a      	mov	r2, r3
 80075fa:	4b09      	ldr	r3, [pc, #36]	; (8007620 <__assert_func+0x2c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4605      	mov	r5, r0
 8007600:	68d8      	ldr	r0, [r3, #12]
 8007602:	b14c      	cbz	r4, 8007618 <__assert_func+0x24>
 8007604:	4b07      	ldr	r3, [pc, #28]	; (8007624 <__assert_func+0x30>)
 8007606:	9100      	str	r1, [sp, #0]
 8007608:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800760c:	4906      	ldr	r1, [pc, #24]	; (8007628 <__assert_func+0x34>)
 800760e:	462b      	mov	r3, r5
 8007610:	f000 f8e0 	bl	80077d4 <fiprintf>
 8007614:	f000 fd34 	bl	8008080 <abort>
 8007618:	4b04      	ldr	r3, [pc, #16]	; (800762c <__assert_func+0x38>)
 800761a:	461c      	mov	r4, r3
 800761c:	e7f3      	b.n	8007606 <__assert_func+0x12>
 800761e:	bf00      	nop
 8007620:	20000010 	.word	0x20000010
 8007624:	08008ef6 	.word	0x08008ef6
 8007628:	08008f03 	.word	0x08008f03
 800762c:	08008f31 	.word	0x08008f31

08007630 <_close_r>:
 8007630:	b538      	push	{r3, r4, r5, lr}
 8007632:	4d06      	ldr	r5, [pc, #24]	; (800764c <_close_r+0x1c>)
 8007634:	2300      	movs	r3, #0
 8007636:	4604      	mov	r4, r0
 8007638:	4608      	mov	r0, r1
 800763a:	602b      	str	r3, [r5, #0]
 800763c:	f7fa fa1f 	bl	8001a7e <_close>
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	d102      	bne.n	800764a <_close_r+0x1a>
 8007644:	682b      	ldr	r3, [r5, #0]
 8007646:	b103      	cbz	r3, 800764a <_close_r+0x1a>
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	bd38      	pop	{r3, r4, r5, pc}
 800764c:	20004ffc 	.word	0x20004ffc

08007650 <__sflush_r>:
 8007650:	898a      	ldrh	r2, [r1, #12]
 8007652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007656:	4605      	mov	r5, r0
 8007658:	0710      	lsls	r0, r2, #28
 800765a:	460c      	mov	r4, r1
 800765c:	d458      	bmi.n	8007710 <__sflush_r+0xc0>
 800765e:	684b      	ldr	r3, [r1, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	dc05      	bgt.n	8007670 <__sflush_r+0x20>
 8007664:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007666:	2b00      	cmp	r3, #0
 8007668:	dc02      	bgt.n	8007670 <__sflush_r+0x20>
 800766a:	2000      	movs	r0, #0
 800766c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007670:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007672:	2e00      	cmp	r6, #0
 8007674:	d0f9      	beq.n	800766a <__sflush_r+0x1a>
 8007676:	2300      	movs	r3, #0
 8007678:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800767c:	682f      	ldr	r7, [r5, #0]
 800767e:	602b      	str	r3, [r5, #0]
 8007680:	d032      	beq.n	80076e8 <__sflush_r+0x98>
 8007682:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007684:	89a3      	ldrh	r3, [r4, #12]
 8007686:	075a      	lsls	r2, r3, #29
 8007688:	d505      	bpl.n	8007696 <__sflush_r+0x46>
 800768a:	6863      	ldr	r3, [r4, #4]
 800768c:	1ac0      	subs	r0, r0, r3
 800768e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007690:	b10b      	cbz	r3, 8007696 <__sflush_r+0x46>
 8007692:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007694:	1ac0      	subs	r0, r0, r3
 8007696:	2300      	movs	r3, #0
 8007698:	4602      	mov	r2, r0
 800769a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800769c:	6a21      	ldr	r1, [r4, #32]
 800769e:	4628      	mov	r0, r5
 80076a0:	47b0      	blx	r6
 80076a2:	1c43      	adds	r3, r0, #1
 80076a4:	89a3      	ldrh	r3, [r4, #12]
 80076a6:	d106      	bne.n	80076b6 <__sflush_r+0x66>
 80076a8:	6829      	ldr	r1, [r5, #0]
 80076aa:	291d      	cmp	r1, #29
 80076ac:	d82c      	bhi.n	8007708 <__sflush_r+0xb8>
 80076ae:	4a2a      	ldr	r2, [pc, #168]	; (8007758 <__sflush_r+0x108>)
 80076b0:	40ca      	lsrs	r2, r1
 80076b2:	07d6      	lsls	r6, r2, #31
 80076b4:	d528      	bpl.n	8007708 <__sflush_r+0xb8>
 80076b6:	2200      	movs	r2, #0
 80076b8:	6062      	str	r2, [r4, #4]
 80076ba:	04d9      	lsls	r1, r3, #19
 80076bc:	6922      	ldr	r2, [r4, #16]
 80076be:	6022      	str	r2, [r4, #0]
 80076c0:	d504      	bpl.n	80076cc <__sflush_r+0x7c>
 80076c2:	1c42      	adds	r2, r0, #1
 80076c4:	d101      	bne.n	80076ca <__sflush_r+0x7a>
 80076c6:	682b      	ldr	r3, [r5, #0]
 80076c8:	b903      	cbnz	r3, 80076cc <__sflush_r+0x7c>
 80076ca:	6560      	str	r0, [r4, #84]	; 0x54
 80076cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076ce:	602f      	str	r7, [r5, #0]
 80076d0:	2900      	cmp	r1, #0
 80076d2:	d0ca      	beq.n	800766a <__sflush_r+0x1a>
 80076d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076d8:	4299      	cmp	r1, r3
 80076da:	d002      	beq.n	80076e2 <__sflush_r+0x92>
 80076dc:	4628      	mov	r0, r5
 80076de:	f000 f8c3 	bl	8007868 <_free_r>
 80076e2:	2000      	movs	r0, #0
 80076e4:	6360      	str	r0, [r4, #52]	; 0x34
 80076e6:	e7c1      	b.n	800766c <__sflush_r+0x1c>
 80076e8:	6a21      	ldr	r1, [r4, #32]
 80076ea:	2301      	movs	r3, #1
 80076ec:	4628      	mov	r0, r5
 80076ee:	47b0      	blx	r6
 80076f0:	1c41      	adds	r1, r0, #1
 80076f2:	d1c7      	bne.n	8007684 <__sflush_r+0x34>
 80076f4:	682b      	ldr	r3, [r5, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d0c4      	beq.n	8007684 <__sflush_r+0x34>
 80076fa:	2b1d      	cmp	r3, #29
 80076fc:	d001      	beq.n	8007702 <__sflush_r+0xb2>
 80076fe:	2b16      	cmp	r3, #22
 8007700:	d101      	bne.n	8007706 <__sflush_r+0xb6>
 8007702:	602f      	str	r7, [r5, #0]
 8007704:	e7b1      	b.n	800766a <__sflush_r+0x1a>
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800770c:	81a3      	strh	r3, [r4, #12]
 800770e:	e7ad      	b.n	800766c <__sflush_r+0x1c>
 8007710:	690f      	ldr	r7, [r1, #16]
 8007712:	2f00      	cmp	r7, #0
 8007714:	d0a9      	beq.n	800766a <__sflush_r+0x1a>
 8007716:	0793      	lsls	r3, r2, #30
 8007718:	680e      	ldr	r6, [r1, #0]
 800771a:	bf08      	it	eq
 800771c:	694b      	ldreq	r3, [r1, #20]
 800771e:	600f      	str	r7, [r1, #0]
 8007720:	bf18      	it	ne
 8007722:	2300      	movne	r3, #0
 8007724:	eba6 0807 	sub.w	r8, r6, r7
 8007728:	608b      	str	r3, [r1, #8]
 800772a:	f1b8 0f00 	cmp.w	r8, #0
 800772e:	dd9c      	ble.n	800766a <__sflush_r+0x1a>
 8007730:	6a21      	ldr	r1, [r4, #32]
 8007732:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007734:	4643      	mov	r3, r8
 8007736:	463a      	mov	r2, r7
 8007738:	4628      	mov	r0, r5
 800773a:	47b0      	blx	r6
 800773c:	2800      	cmp	r0, #0
 800773e:	dc06      	bgt.n	800774e <__sflush_r+0xfe>
 8007740:	89a3      	ldrh	r3, [r4, #12]
 8007742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007746:	81a3      	strh	r3, [r4, #12]
 8007748:	f04f 30ff 	mov.w	r0, #4294967295
 800774c:	e78e      	b.n	800766c <__sflush_r+0x1c>
 800774e:	4407      	add	r7, r0
 8007750:	eba8 0800 	sub.w	r8, r8, r0
 8007754:	e7e9      	b.n	800772a <__sflush_r+0xda>
 8007756:	bf00      	nop
 8007758:	20400001 	.word	0x20400001

0800775c <_fflush_r>:
 800775c:	b538      	push	{r3, r4, r5, lr}
 800775e:	690b      	ldr	r3, [r1, #16]
 8007760:	4605      	mov	r5, r0
 8007762:	460c      	mov	r4, r1
 8007764:	b913      	cbnz	r3, 800776c <_fflush_r+0x10>
 8007766:	2500      	movs	r5, #0
 8007768:	4628      	mov	r0, r5
 800776a:	bd38      	pop	{r3, r4, r5, pc}
 800776c:	b118      	cbz	r0, 8007776 <_fflush_r+0x1a>
 800776e:	6983      	ldr	r3, [r0, #24]
 8007770:	b90b      	cbnz	r3, 8007776 <_fflush_r+0x1a>
 8007772:	f7ff fc79 	bl	8007068 <__sinit>
 8007776:	4b14      	ldr	r3, [pc, #80]	; (80077c8 <_fflush_r+0x6c>)
 8007778:	429c      	cmp	r4, r3
 800777a:	d11b      	bne.n	80077b4 <_fflush_r+0x58>
 800777c:	686c      	ldr	r4, [r5, #4]
 800777e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d0ef      	beq.n	8007766 <_fflush_r+0xa>
 8007786:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007788:	07d0      	lsls	r0, r2, #31
 800778a:	d404      	bmi.n	8007796 <_fflush_r+0x3a>
 800778c:	0599      	lsls	r1, r3, #22
 800778e:	d402      	bmi.n	8007796 <_fflush_r+0x3a>
 8007790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007792:	f7ff fd2c 	bl	80071ee <__retarget_lock_acquire_recursive>
 8007796:	4628      	mov	r0, r5
 8007798:	4621      	mov	r1, r4
 800779a:	f7ff ff59 	bl	8007650 <__sflush_r>
 800779e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077a0:	07da      	lsls	r2, r3, #31
 80077a2:	4605      	mov	r5, r0
 80077a4:	d4e0      	bmi.n	8007768 <_fflush_r+0xc>
 80077a6:	89a3      	ldrh	r3, [r4, #12]
 80077a8:	059b      	lsls	r3, r3, #22
 80077aa:	d4dd      	bmi.n	8007768 <_fflush_r+0xc>
 80077ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077ae:	f7ff fd1f 	bl	80071f0 <__retarget_lock_release_recursive>
 80077b2:	e7d9      	b.n	8007768 <_fflush_r+0xc>
 80077b4:	4b05      	ldr	r3, [pc, #20]	; (80077cc <_fflush_r+0x70>)
 80077b6:	429c      	cmp	r4, r3
 80077b8:	d101      	bne.n	80077be <_fflush_r+0x62>
 80077ba:	68ac      	ldr	r4, [r5, #8]
 80077bc:	e7df      	b.n	800777e <_fflush_r+0x22>
 80077be:	4b04      	ldr	r3, [pc, #16]	; (80077d0 <_fflush_r+0x74>)
 80077c0:	429c      	cmp	r4, r3
 80077c2:	bf08      	it	eq
 80077c4:	68ec      	ldreq	r4, [r5, #12]
 80077c6:	e7da      	b.n	800777e <_fflush_r+0x22>
 80077c8:	08008e40 	.word	0x08008e40
 80077cc:	08008e60 	.word	0x08008e60
 80077d0:	08008e20 	.word	0x08008e20

080077d4 <fiprintf>:
 80077d4:	b40e      	push	{r1, r2, r3}
 80077d6:	b503      	push	{r0, r1, lr}
 80077d8:	4601      	mov	r1, r0
 80077da:	ab03      	add	r3, sp, #12
 80077dc:	4805      	ldr	r0, [pc, #20]	; (80077f4 <fiprintf+0x20>)
 80077de:	f853 2b04 	ldr.w	r2, [r3], #4
 80077e2:	6800      	ldr	r0, [r0, #0]
 80077e4:	9301      	str	r3, [sp, #4]
 80077e6:	f000 f8b5 	bl	8007954 <_vfiprintf_r>
 80077ea:	b002      	add	sp, #8
 80077ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80077f0:	b003      	add	sp, #12
 80077f2:	4770      	bx	lr
 80077f4:	20000010 	.word	0x20000010

080077f8 <_gettimeofday_r>:
 80077f8:	b538      	push	{r3, r4, r5, lr}
 80077fa:	4d07      	ldr	r5, [pc, #28]	; (8007818 <_gettimeofday_r+0x20>)
 80077fc:	2300      	movs	r3, #0
 80077fe:	4604      	mov	r4, r0
 8007800:	4608      	mov	r0, r1
 8007802:	4611      	mov	r1, r2
 8007804:	602b      	str	r3, [r5, #0]
 8007806:	f000 fd0d 	bl	8008224 <_gettimeofday>
 800780a:	1c43      	adds	r3, r0, #1
 800780c:	d102      	bne.n	8007814 <_gettimeofday_r+0x1c>
 800780e:	682b      	ldr	r3, [r5, #0]
 8007810:	b103      	cbz	r3, 8007814 <_gettimeofday_r+0x1c>
 8007812:	6023      	str	r3, [r4, #0]
 8007814:	bd38      	pop	{r3, r4, r5, pc}
 8007816:	bf00      	nop
 8007818:	20004ffc 	.word	0x20004ffc

0800781c <_lseek_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	4d07      	ldr	r5, [pc, #28]	; (800783c <_lseek_r+0x20>)
 8007820:	4604      	mov	r4, r0
 8007822:	4608      	mov	r0, r1
 8007824:	4611      	mov	r1, r2
 8007826:	2200      	movs	r2, #0
 8007828:	602a      	str	r2, [r5, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	f7fa f94e 	bl	8001acc <_lseek>
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	d102      	bne.n	800783a <_lseek_r+0x1e>
 8007834:	682b      	ldr	r3, [r5, #0]
 8007836:	b103      	cbz	r3, 800783a <_lseek_r+0x1e>
 8007838:	6023      	str	r3, [r4, #0]
 800783a:	bd38      	pop	{r3, r4, r5, pc}
 800783c:	20004ffc 	.word	0x20004ffc

08007840 <malloc>:
 8007840:	4b02      	ldr	r3, [pc, #8]	; (800784c <malloc+0xc>)
 8007842:	4601      	mov	r1, r0
 8007844:	6818      	ldr	r0, [r3, #0]
 8007846:	f7ff bd0b 	b.w	8007260 <_malloc_r>
 800784a:	bf00      	nop
 800784c:	20000010 	.word	0x20000010

08007850 <__malloc_lock>:
 8007850:	4801      	ldr	r0, [pc, #4]	; (8007858 <__malloc_lock+0x8>)
 8007852:	f7ff bccc 	b.w	80071ee <__retarget_lock_acquire_recursive>
 8007856:	bf00      	nop
 8007858:	20004ff0 	.word	0x20004ff0

0800785c <__malloc_unlock>:
 800785c:	4801      	ldr	r0, [pc, #4]	; (8007864 <__malloc_unlock+0x8>)
 800785e:	f7ff bcc7 	b.w	80071f0 <__retarget_lock_release_recursive>
 8007862:	bf00      	nop
 8007864:	20004ff0 	.word	0x20004ff0

08007868 <_free_r>:
 8007868:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800786a:	2900      	cmp	r1, #0
 800786c:	d044      	beq.n	80078f8 <_free_r+0x90>
 800786e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007872:	9001      	str	r0, [sp, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	f1a1 0404 	sub.w	r4, r1, #4
 800787a:	bfb8      	it	lt
 800787c:	18e4      	addlt	r4, r4, r3
 800787e:	f7ff ffe7 	bl	8007850 <__malloc_lock>
 8007882:	4a1e      	ldr	r2, [pc, #120]	; (80078fc <_free_r+0x94>)
 8007884:	9801      	ldr	r0, [sp, #4]
 8007886:	6813      	ldr	r3, [r2, #0]
 8007888:	b933      	cbnz	r3, 8007898 <_free_r+0x30>
 800788a:	6063      	str	r3, [r4, #4]
 800788c:	6014      	str	r4, [r2, #0]
 800788e:	b003      	add	sp, #12
 8007890:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007894:	f7ff bfe2 	b.w	800785c <__malloc_unlock>
 8007898:	42a3      	cmp	r3, r4
 800789a:	d908      	bls.n	80078ae <_free_r+0x46>
 800789c:	6825      	ldr	r5, [r4, #0]
 800789e:	1961      	adds	r1, r4, r5
 80078a0:	428b      	cmp	r3, r1
 80078a2:	bf01      	itttt	eq
 80078a4:	6819      	ldreq	r1, [r3, #0]
 80078a6:	685b      	ldreq	r3, [r3, #4]
 80078a8:	1949      	addeq	r1, r1, r5
 80078aa:	6021      	streq	r1, [r4, #0]
 80078ac:	e7ed      	b.n	800788a <_free_r+0x22>
 80078ae:	461a      	mov	r2, r3
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	b10b      	cbz	r3, 80078b8 <_free_r+0x50>
 80078b4:	42a3      	cmp	r3, r4
 80078b6:	d9fa      	bls.n	80078ae <_free_r+0x46>
 80078b8:	6811      	ldr	r1, [r2, #0]
 80078ba:	1855      	adds	r5, r2, r1
 80078bc:	42a5      	cmp	r5, r4
 80078be:	d10b      	bne.n	80078d8 <_free_r+0x70>
 80078c0:	6824      	ldr	r4, [r4, #0]
 80078c2:	4421      	add	r1, r4
 80078c4:	1854      	adds	r4, r2, r1
 80078c6:	42a3      	cmp	r3, r4
 80078c8:	6011      	str	r1, [r2, #0]
 80078ca:	d1e0      	bne.n	800788e <_free_r+0x26>
 80078cc:	681c      	ldr	r4, [r3, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	6053      	str	r3, [r2, #4]
 80078d2:	4421      	add	r1, r4
 80078d4:	6011      	str	r1, [r2, #0]
 80078d6:	e7da      	b.n	800788e <_free_r+0x26>
 80078d8:	d902      	bls.n	80078e0 <_free_r+0x78>
 80078da:	230c      	movs	r3, #12
 80078dc:	6003      	str	r3, [r0, #0]
 80078de:	e7d6      	b.n	800788e <_free_r+0x26>
 80078e0:	6825      	ldr	r5, [r4, #0]
 80078e2:	1961      	adds	r1, r4, r5
 80078e4:	428b      	cmp	r3, r1
 80078e6:	bf04      	itt	eq
 80078e8:	6819      	ldreq	r1, [r3, #0]
 80078ea:	685b      	ldreq	r3, [r3, #4]
 80078ec:	6063      	str	r3, [r4, #4]
 80078ee:	bf04      	itt	eq
 80078f0:	1949      	addeq	r1, r1, r5
 80078f2:	6021      	streq	r1, [r4, #0]
 80078f4:	6054      	str	r4, [r2, #4]
 80078f6:	e7ca      	b.n	800788e <_free_r+0x26>
 80078f8:	b003      	add	sp, #12
 80078fa:	bd30      	pop	{r4, r5, pc}
 80078fc:	20004ff4 	.word	0x20004ff4

08007900 <__sfputc_r>:
 8007900:	6893      	ldr	r3, [r2, #8]
 8007902:	3b01      	subs	r3, #1
 8007904:	2b00      	cmp	r3, #0
 8007906:	b410      	push	{r4}
 8007908:	6093      	str	r3, [r2, #8]
 800790a:	da08      	bge.n	800791e <__sfputc_r+0x1e>
 800790c:	6994      	ldr	r4, [r2, #24]
 800790e:	42a3      	cmp	r3, r4
 8007910:	db01      	blt.n	8007916 <__sfputc_r+0x16>
 8007912:	290a      	cmp	r1, #10
 8007914:	d103      	bne.n	800791e <__sfputc_r+0x1e>
 8007916:	f85d 4b04 	ldr.w	r4, [sp], #4
 800791a:	f000 baf1 	b.w	8007f00 <__swbuf_r>
 800791e:	6813      	ldr	r3, [r2, #0]
 8007920:	1c58      	adds	r0, r3, #1
 8007922:	6010      	str	r0, [r2, #0]
 8007924:	7019      	strb	r1, [r3, #0]
 8007926:	4608      	mov	r0, r1
 8007928:	f85d 4b04 	ldr.w	r4, [sp], #4
 800792c:	4770      	bx	lr

0800792e <__sfputs_r>:
 800792e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007930:	4606      	mov	r6, r0
 8007932:	460f      	mov	r7, r1
 8007934:	4614      	mov	r4, r2
 8007936:	18d5      	adds	r5, r2, r3
 8007938:	42ac      	cmp	r4, r5
 800793a:	d101      	bne.n	8007940 <__sfputs_r+0x12>
 800793c:	2000      	movs	r0, #0
 800793e:	e007      	b.n	8007950 <__sfputs_r+0x22>
 8007940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007944:	463a      	mov	r2, r7
 8007946:	4630      	mov	r0, r6
 8007948:	f7ff ffda 	bl	8007900 <__sfputc_r>
 800794c:	1c43      	adds	r3, r0, #1
 800794e:	d1f3      	bne.n	8007938 <__sfputs_r+0xa>
 8007950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007954 <_vfiprintf_r>:
 8007954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007958:	460d      	mov	r5, r1
 800795a:	b09d      	sub	sp, #116	; 0x74
 800795c:	4614      	mov	r4, r2
 800795e:	4698      	mov	r8, r3
 8007960:	4606      	mov	r6, r0
 8007962:	b118      	cbz	r0, 800796c <_vfiprintf_r+0x18>
 8007964:	6983      	ldr	r3, [r0, #24]
 8007966:	b90b      	cbnz	r3, 800796c <_vfiprintf_r+0x18>
 8007968:	f7ff fb7e 	bl	8007068 <__sinit>
 800796c:	4b89      	ldr	r3, [pc, #548]	; (8007b94 <_vfiprintf_r+0x240>)
 800796e:	429d      	cmp	r5, r3
 8007970:	d11b      	bne.n	80079aa <_vfiprintf_r+0x56>
 8007972:	6875      	ldr	r5, [r6, #4]
 8007974:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007976:	07d9      	lsls	r1, r3, #31
 8007978:	d405      	bmi.n	8007986 <_vfiprintf_r+0x32>
 800797a:	89ab      	ldrh	r3, [r5, #12]
 800797c:	059a      	lsls	r2, r3, #22
 800797e:	d402      	bmi.n	8007986 <_vfiprintf_r+0x32>
 8007980:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007982:	f7ff fc34 	bl	80071ee <__retarget_lock_acquire_recursive>
 8007986:	89ab      	ldrh	r3, [r5, #12]
 8007988:	071b      	lsls	r3, r3, #28
 800798a:	d501      	bpl.n	8007990 <_vfiprintf_r+0x3c>
 800798c:	692b      	ldr	r3, [r5, #16]
 800798e:	b9eb      	cbnz	r3, 80079cc <_vfiprintf_r+0x78>
 8007990:	4629      	mov	r1, r5
 8007992:	4630      	mov	r0, r6
 8007994:	f000 fb06 	bl	8007fa4 <__swsetup_r>
 8007998:	b1c0      	cbz	r0, 80079cc <_vfiprintf_r+0x78>
 800799a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800799c:	07dc      	lsls	r4, r3, #31
 800799e:	d50e      	bpl.n	80079be <_vfiprintf_r+0x6a>
 80079a0:	f04f 30ff 	mov.w	r0, #4294967295
 80079a4:	b01d      	add	sp, #116	; 0x74
 80079a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079aa:	4b7b      	ldr	r3, [pc, #492]	; (8007b98 <_vfiprintf_r+0x244>)
 80079ac:	429d      	cmp	r5, r3
 80079ae:	d101      	bne.n	80079b4 <_vfiprintf_r+0x60>
 80079b0:	68b5      	ldr	r5, [r6, #8]
 80079b2:	e7df      	b.n	8007974 <_vfiprintf_r+0x20>
 80079b4:	4b79      	ldr	r3, [pc, #484]	; (8007b9c <_vfiprintf_r+0x248>)
 80079b6:	429d      	cmp	r5, r3
 80079b8:	bf08      	it	eq
 80079ba:	68f5      	ldreq	r5, [r6, #12]
 80079bc:	e7da      	b.n	8007974 <_vfiprintf_r+0x20>
 80079be:	89ab      	ldrh	r3, [r5, #12]
 80079c0:	0598      	lsls	r0, r3, #22
 80079c2:	d4ed      	bmi.n	80079a0 <_vfiprintf_r+0x4c>
 80079c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079c6:	f7ff fc13 	bl	80071f0 <__retarget_lock_release_recursive>
 80079ca:	e7e9      	b.n	80079a0 <_vfiprintf_r+0x4c>
 80079cc:	2300      	movs	r3, #0
 80079ce:	9309      	str	r3, [sp, #36]	; 0x24
 80079d0:	2320      	movs	r3, #32
 80079d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80079da:	2330      	movs	r3, #48	; 0x30
 80079dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007ba0 <_vfiprintf_r+0x24c>
 80079e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079e4:	f04f 0901 	mov.w	r9, #1
 80079e8:	4623      	mov	r3, r4
 80079ea:	469a      	mov	sl, r3
 80079ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079f0:	b10a      	cbz	r2, 80079f6 <_vfiprintf_r+0xa2>
 80079f2:	2a25      	cmp	r2, #37	; 0x25
 80079f4:	d1f9      	bne.n	80079ea <_vfiprintf_r+0x96>
 80079f6:	ebba 0b04 	subs.w	fp, sl, r4
 80079fa:	d00b      	beq.n	8007a14 <_vfiprintf_r+0xc0>
 80079fc:	465b      	mov	r3, fp
 80079fe:	4622      	mov	r2, r4
 8007a00:	4629      	mov	r1, r5
 8007a02:	4630      	mov	r0, r6
 8007a04:	f7ff ff93 	bl	800792e <__sfputs_r>
 8007a08:	3001      	adds	r0, #1
 8007a0a:	f000 80aa 	beq.w	8007b62 <_vfiprintf_r+0x20e>
 8007a0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a10:	445a      	add	r2, fp
 8007a12:	9209      	str	r2, [sp, #36]	; 0x24
 8007a14:	f89a 3000 	ldrb.w	r3, [sl]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 80a2 	beq.w	8007b62 <_vfiprintf_r+0x20e>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f04f 32ff 	mov.w	r2, #4294967295
 8007a24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a28:	f10a 0a01 	add.w	sl, sl, #1
 8007a2c:	9304      	str	r3, [sp, #16]
 8007a2e:	9307      	str	r3, [sp, #28]
 8007a30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a34:	931a      	str	r3, [sp, #104]	; 0x68
 8007a36:	4654      	mov	r4, sl
 8007a38:	2205      	movs	r2, #5
 8007a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a3e:	4858      	ldr	r0, [pc, #352]	; (8007ba0 <_vfiprintf_r+0x24c>)
 8007a40:	f7f8 fbe6 	bl	8000210 <memchr>
 8007a44:	9a04      	ldr	r2, [sp, #16]
 8007a46:	b9d8      	cbnz	r0, 8007a80 <_vfiprintf_r+0x12c>
 8007a48:	06d1      	lsls	r1, r2, #27
 8007a4a:	bf44      	itt	mi
 8007a4c:	2320      	movmi	r3, #32
 8007a4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a52:	0713      	lsls	r3, r2, #28
 8007a54:	bf44      	itt	mi
 8007a56:	232b      	movmi	r3, #43	; 0x2b
 8007a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a5c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a60:	2b2a      	cmp	r3, #42	; 0x2a
 8007a62:	d015      	beq.n	8007a90 <_vfiprintf_r+0x13c>
 8007a64:	9a07      	ldr	r2, [sp, #28]
 8007a66:	4654      	mov	r4, sl
 8007a68:	2000      	movs	r0, #0
 8007a6a:	f04f 0c0a 	mov.w	ip, #10
 8007a6e:	4621      	mov	r1, r4
 8007a70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a74:	3b30      	subs	r3, #48	; 0x30
 8007a76:	2b09      	cmp	r3, #9
 8007a78:	d94e      	bls.n	8007b18 <_vfiprintf_r+0x1c4>
 8007a7a:	b1b0      	cbz	r0, 8007aaa <_vfiprintf_r+0x156>
 8007a7c:	9207      	str	r2, [sp, #28]
 8007a7e:	e014      	b.n	8007aaa <_vfiprintf_r+0x156>
 8007a80:	eba0 0308 	sub.w	r3, r0, r8
 8007a84:	fa09 f303 	lsl.w	r3, r9, r3
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	9304      	str	r3, [sp, #16]
 8007a8c:	46a2      	mov	sl, r4
 8007a8e:	e7d2      	b.n	8007a36 <_vfiprintf_r+0xe2>
 8007a90:	9b03      	ldr	r3, [sp, #12]
 8007a92:	1d19      	adds	r1, r3, #4
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	9103      	str	r1, [sp, #12]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	bfbb      	ittet	lt
 8007a9c:	425b      	neglt	r3, r3
 8007a9e:	f042 0202 	orrlt.w	r2, r2, #2
 8007aa2:	9307      	strge	r3, [sp, #28]
 8007aa4:	9307      	strlt	r3, [sp, #28]
 8007aa6:	bfb8      	it	lt
 8007aa8:	9204      	strlt	r2, [sp, #16]
 8007aaa:	7823      	ldrb	r3, [r4, #0]
 8007aac:	2b2e      	cmp	r3, #46	; 0x2e
 8007aae:	d10c      	bne.n	8007aca <_vfiprintf_r+0x176>
 8007ab0:	7863      	ldrb	r3, [r4, #1]
 8007ab2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ab4:	d135      	bne.n	8007b22 <_vfiprintf_r+0x1ce>
 8007ab6:	9b03      	ldr	r3, [sp, #12]
 8007ab8:	1d1a      	adds	r2, r3, #4
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	9203      	str	r2, [sp, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	bfb8      	it	lt
 8007ac2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ac6:	3402      	adds	r4, #2
 8007ac8:	9305      	str	r3, [sp, #20]
 8007aca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007bb0 <_vfiprintf_r+0x25c>
 8007ace:	7821      	ldrb	r1, [r4, #0]
 8007ad0:	2203      	movs	r2, #3
 8007ad2:	4650      	mov	r0, sl
 8007ad4:	f7f8 fb9c 	bl	8000210 <memchr>
 8007ad8:	b140      	cbz	r0, 8007aec <_vfiprintf_r+0x198>
 8007ada:	2340      	movs	r3, #64	; 0x40
 8007adc:	eba0 000a 	sub.w	r0, r0, sl
 8007ae0:	fa03 f000 	lsl.w	r0, r3, r0
 8007ae4:	9b04      	ldr	r3, [sp, #16]
 8007ae6:	4303      	orrs	r3, r0
 8007ae8:	3401      	adds	r4, #1
 8007aea:	9304      	str	r3, [sp, #16]
 8007aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007af0:	482c      	ldr	r0, [pc, #176]	; (8007ba4 <_vfiprintf_r+0x250>)
 8007af2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007af6:	2206      	movs	r2, #6
 8007af8:	f7f8 fb8a 	bl	8000210 <memchr>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d03f      	beq.n	8007b80 <_vfiprintf_r+0x22c>
 8007b00:	4b29      	ldr	r3, [pc, #164]	; (8007ba8 <_vfiprintf_r+0x254>)
 8007b02:	bb1b      	cbnz	r3, 8007b4c <_vfiprintf_r+0x1f8>
 8007b04:	9b03      	ldr	r3, [sp, #12]
 8007b06:	3307      	adds	r3, #7
 8007b08:	f023 0307 	bic.w	r3, r3, #7
 8007b0c:	3308      	adds	r3, #8
 8007b0e:	9303      	str	r3, [sp, #12]
 8007b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b12:	443b      	add	r3, r7
 8007b14:	9309      	str	r3, [sp, #36]	; 0x24
 8007b16:	e767      	b.n	80079e8 <_vfiprintf_r+0x94>
 8007b18:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b1c:	460c      	mov	r4, r1
 8007b1e:	2001      	movs	r0, #1
 8007b20:	e7a5      	b.n	8007a6e <_vfiprintf_r+0x11a>
 8007b22:	2300      	movs	r3, #0
 8007b24:	3401      	adds	r4, #1
 8007b26:	9305      	str	r3, [sp, #20]
 8007b28:	4619      	mov	r1, r3
 8007b2a:	f04f 0c0a 	mov.w	ip, #10
 8007b2e:	4620      	mov	r0, r4
 8007b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b34:	3a30      	subs	r2, #48	; 0x30
 8007b36:	2a09      	cmp	r2, #9
 8007b38:	d903      	bls.n	8007b42 <_vfiprintf_r+0x1ee>
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d0c5      	beq.n	8007aca <_vfiprintf_r+0x176>
 8007b3e:	9105      	str	r1, [sp, #20]
 8007b40:	e7c3      	b.n	8007aca <_vfiprintf_r+0x176>
 8007b42:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b46:	4604      	mov	r4, r0
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e7f0      	b.n	8007b2e <_vfiprintf_r+0x1da>
 8007b4c:	ab03      	add	r3, sp, #12
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	462a      	mov	r2, r5
 8007b52:	4b16      	ldr	r3, [pc, #88]	; (8007bac <_vfiprintf_r+0x258>)
 8007b54:	a904      	add	r1, sp, #16
 8007b56:	4630      	mov	r0, r6
 8007b58:	f3af 8000 	nop.w
 8007b5c:	4607      	mov	r7, r0
 8007b5e:	1c78      	adds	r0, r7, #1
 8007b60:	d1d6      	bne.n	8007b10 <_vfiprintf_r+0x1bc>
 8007b62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b64:	07d9      	lsls	r1, r3, #31
 8007b66:	d405      	bmi.n	8007b74 <_vfiprintf_r+0x220>
 8007b68:	89ab      	ldrh	r3, [r5, #12]
 8007b6a:	059a      	lsls	r2, r3, #22
 8007b6c:	d402      	bmi.n	8007b74 <_vfiprintf_r+0x220>
 8007b6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b70:	f7ff fb3e 	bl	80071f0 <__retarget_lock_release_recursive>
 8007b74:	89ab      	ldrh	r3, [r5, #12]
 8007b76:	065b      	lsls	r3, r3, #25
 8007b78:	f53f af12 	bmi.w	80079a0 <_vfiprintf_r+0x4c>
 8007b7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b7e:	e711      	b.n	80079a4 <_vfiprintf_r+0x50>
 8007b80:	ab03      	add	r3, sp, #12
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	462a      	mov	r2, r5
 8007b86:	4b09      	ldr	r3, [pc, #36]	; (8007bac <_vfiprintf_r+0x258>)
 8007b88:	a904      	add	r1, sp, #16
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	f000 f880 	bl	8007c90 <_printf_i>
 8007b90:	e7e4      	b.n	8007b5c <_vfiprintf_r+0x208>
 8007b92:	bf00      	nop
 8007b94:	08008e40 	.word	0x08008e40
 8007b98:	08008e60 	.word	0x08008e60
 8007b9c:	08008e20 	.word	0x08008e20
 8007ba0:	08008f32 	.word	0x08008f32
 8007ba4:	08008f3c 	.word	0x08008f3c
 8007ba8:	00000000 	.word	0x00000000
 8007bac:	0800792f 	.word	0x0800792f
 8007bb0:	08008f38 	.word	0x08008f38

08007bb4 <_printf_common>:
 8007bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb8:	4616      	mov	r6, r2
 8007bba:	4699      	mov	r9, r3
 8007bbc:	688a      	ldr	r2, [r1, #8]
 8007bbe:	690b      	ldr	r3, [r1, #16]
 8007bc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	bfb8      	it	lt
 8007bc8:	4613      	movlt	r3, r2
 8007bca:	6033      	str	r3, [r6, #0]
 8007bcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007bd0:	4607      	mov	r7, r0
 8007bd2:	460c      	mov	r4, r1
 8007bd4:	b10a      	cbz	r2, 8007bda <_printf_common+0x26>
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	6033      	str	r3, [r6, #0]
 8007bda:	6823      	ldr	r3, [r4, #0]
 8007bdc:	0699      	lsls	r1, r3, #26
 8007bde:	bf42      	ittt	mi
 8007be0:	6833      	ldrmi	r3, [r6, #0]
 8007be2:	3302      	addmi	r3, #2
 8007be4:	6033      	strmi	r3, [r6, #0]
 8007be6:	6825      	ldr	r5, [r4, #0]
 8007be8:	f015 0506 	ands.w	r5, r5, #6
 8007bec:	d106      	bne.n	8007bfc <_printf_common+0x48>
 8007bee:	f104 0a19 	add.w	sl, r4, #25
 8007bf2:	68e3      	ldr	r3, [r4, #12]
 8007bf4:	6832      	ldr	r2, [r6, #0]
 8007bf6:	1a9b      	subs	r3, r3, r2
 8007bf8:	42ab      	cmp	r3, r5
 8007bfa:	dc26      	bgt.n	8007c4a <_printf_common+0x96>
 8007bfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c00:	1e13      	subs	r3, r2, #0
 8007c02:	6822      	ldr	r2, [r4, #0]
 8007c04:	bf18      	it	ne
 8007c06:	2301      	movne	r3, #1
 8007c08:	0692      	lsls	r2, r2, #26
 8007c0a:	d42b      	bmi.n	8007c64 <_printf_common+0xb0>
 8007c0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c10:	4649      	mov	r1, r9
 8007c12:	4638      	mov	r0, r7
 8007c14:	47c0      	blx	r8
 8007c16:	3001      	adds	r0, #1
 8007c18:	d01e      	beq.n	8007c58 <_printf_common+0xa4>
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	68e5      	ldr	r5, [r4, #12]
 8007c1e:	6832      	ldr	r2, [r6, #0]
 8007c20:	f003 0306 	and.w	r3, r3, #6
 8007c24:	2b04      	cmp	r3, #4
 8007c26:	bf08      	it	eq
 8007c28:	1aad      	subeq	r5, r5, r2
 8007c2a:	68a3      	ldr	r3, [r4, #8]
 8007c2c:	6922      	ldr	r2, [r4, #16]
 8007c2e:	bf0c      	ite	eq
 8007c30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c34:	2500      	movne	r5, #0
 8007c36:	4293      	cmp	r3, r2
 8007c38:	bfc4      	itt	gt
 8007c3a:	1a9b      	subgt	r3, r3, r2
 8007c3c:	18ed      	addgt	r5, r5, r3
 8007c3e:	2600      	movs	r6, #0
 8007c40:	341a      	adds	r4, #26
 8007c42:	42b5      	cmp	r5, r6
 8007c44:	d11a      	bne.n	8007c7c <_printf_common+0xc8>
 8007c46:	2000      	movs	r0, #0
 8007c48:	e008      	b.n	8007c5c <_printf_common+0xa8>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	4652      	mov	r2, sl
 8007c4e:	4649      	mov	r1, r9
 8007c50:	4638      	mov	r0, r7
 8007c52:	47c0      	blx	r8
 8007c54:	3001      	adds	r0, #1
 8007c56:	d103      	bne.n	8007c60 <_printf_common+0xac>
 8007c58:	f04f 30ff 	mov.w	r0, #4294967295
 8007c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c60:	3501      	adds	r5, #1
 8007c62:	e7c6      	b.n	8007bf2 <_printf_common+0x3e>
 8007c64:	18e1      	adds	r1, r4, r3
 8007c66:	1c5a      	adds	r2, r3, #1
 8007c68:	2030      	movs	r0, #48	; 0x30
 8007c6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c6e:	4422      	add	r2, r4
 8007c70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c78:	3302      	adds	r3, #2
 8007c7a:	e7c7      	b.n	8007c0c <_printf_common+0x58>
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	4622      	mov	r2, r4
 8007c80:	4649      	mov	r1, r9
 8007c82:	4638      	mov	r0, r7
 8007c84:	47c0      	blx	r8
 8007c86:	3001      	adds	r0, #1
 8007c88:	d0e6      	beq.n	8007c58 <_printf_common+0xa4>
 8007c8a:	3601      	adds	r6, #1
 8007c8c:	e7d9      	b.n	8007c42 <_printf_common+0x8e>
	...

08007c90 <_printf_i>:
 8007c90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c94:	7e0f      	ldrb	r7, [r1, #24]
 8007c96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c98:	2f78      	cmp	r7, #120	; 0x78
 8007c9a:	4691      	mov	r9, r2
 8007c9c:	4680      	mov	r8, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	469a      	mov	sl, r3
 8007ca2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ca6:	d807      	bhi.n	8007cb8 <_printf_i+0x28>
 8007ca8:	2f62      	cmp	r7, #98	; 0x62
 8007caa:	d80a      	bhi.n	8007cc2 <_printf_i+0x32>
 8007cac:	2f00      	cmp	r7, #0
 8007cae:	f000 80d8 	beq.w	8007e62 <_printf_i+0x1d2>
 8007cb2:	2f58      	cmp	r7, #88	; 0x58
 8007cb4:	f000 80a3 	beq.w	8007dfe <_printf_i+0x16e>
 8007cb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007cc0:	e03a      	b.n	8007d38 <_printf_i+0xa8>
 8007cc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007cc6:	2b15      	cmp	r3, #21
 8007cc8:	d8f6      	bhi.n	8007cb8 <_printf_i+0x28>
 8007cca:	a101      	add	r1, pc, #4	; (adr r1, 8007cd0 <_printf_i+0x40>)
 8007ccc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cd0:	08007d29 	.word	0x08007d29
 8007cd4:	08007d3d 	.word	0x08007d3d
 8007cd8:	08007cb9 	.word	0x08007cb9
 8007cdc:	08007cb9 	.word	0x08007cb9
 8007ce0:	08007cb9 	.word	0x08007cb9
 8007ce4:	08007cb9 	.word	0x08007cb9
 8007ce8:	08007d3d 	.word	0x08007d3d
 8007cec:	08007cb9 	.word	0x08007cb9
 8007cf0:	08007cb9 	.word	0x08007cb9
 8007cf4:	08007cb9 	.word	0x08007cb9
 8007cf8:	08007cb9 	.word	0x08007cb9
 8007cfc:	08007e49 	.word	0x08007e49
 8007d00:	08007d6d 	.word	0x08007d6d
 8007d04:	08007e2b 	.word	0x08007e2b
 8007d08:	08007cb9 	.word	0x08007cb9
 8007d0c:	08007cb9 	.word	0x08007cb9
 8007d10:	08007e6b 	.word	0x08007e6b
 8007d14:	08007cb9 	.word	0x08007cb9
 8007d18:	08007d6d 	.word	0x08007d6d
 8007d1c:	08007cb9 	.word	0x08007cb9
 8007d20:	08007cb9 	.word	0x08007cb9
 8007d24:	08007e33 	.word	0x08007e33
 8007d28:	682b      	ldr	r3, [r5, #0]
 8007d2a:	1d1a      	adds	r2, r3, #4
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	602a      	str	r2, [r5, #0]
 8007d30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e0a3      	b.n	8007e84 <_printf_i+0x1f4>
 8007d3c:	6820      	ldr	r0, [r4, #0]
 8007d3e:	6829      	ldr	r1, [r5, #0]
 8007d40:	0606      	lsls	r6, r0, #24
 8007d42:	f101 0304 	add.w	r3, r1, #4
 8007d46:	d50a      	bpl.n	8007d5e <_printf_i+0xce>
 8007d48:	680e      	ldr	r6, [r1, #0]
 8007d4a:	602b      	str	r3, [r5, #0]
 8007d4c:	2e00      	cmp	r6, #0
 8007d4e:	da03      	bge.n	8007d58 <_printf_i+0xc8>
 8007d50:	232d      	movs	r3, #45	; 0x2d
 8007d52:	4276      	negs	r6, r6
 8007d54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d58:	485e      	ldr	r0, [pc, #376]	; (8007ed4 <_printf_i+0x244>)
 8007d5a:	230a      	movs	r3, #10
 8007d5c:	e019      	b.n	8007d92 <_printf_i+0x102>
 8007d5e:	680e      	ldr	r6, [r1, #0]
 8007d60:	602b      	str	r3, [r5, #0]
 8007d62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d66:	bf18      	it	ne
 8007d68:	b236      	sxthne	r6, r6
 8007d6a:	e7ef      	b.n	8007d4c <_printf_i+0xbc>
 8007d6c:	682b      	ldr	r3, [r5, #0]
 8007d6e:	6820      	ldr	r0, [r4, #0]
 8007d70:	1d19      	adds	r1, r3, #4
 8007d72:	6029      	str	r1, [r5, #0]
 8007d74:	0601      	lsls	r1, r0, #24
 8007d76:	d501      	bpl.n	8007d7c <_printf_i+0xec>
 8007d78:	681e      	ldr	r6, [r3, #0]
 8007d7a:	e002      	b.n	8007d82 <_printf_i+0xf2>
 8007d7c:	0646      	lsls	r6, r0, #25
 8007d7e:	d5fb      	bpl.n	8007d78 <_printf_i+0xe8>
 8007d80:	881e      	ldrh	r6, [r3, #0]
 8007d82:	4854      	ldr	r0, [pc, #336]	; (8007ed4 <_printf_i+0x244>)
 8007d84:	2f6f      	cmp	r7, #111	; 0x6f
 8007d86:	bf0c      	ite	eq
 8007d88:	2308      	moveq	r3, #8
 8007d8a:	230a      	movne	r3, #10
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d92:	6865      	ldr	r5, [r4, #4]
 8007d94:	60a5      	str	r5, [r4, #8]
 8007d96:	2d00      	cmp	r5, #0
 8007d98:	bfa2      	ittt	ge
 8007d9a:	6821      	ldrge	r1, [r4, #0]
 8007d9c:	f021 0104 	bicge.w	r1, r1, #4
 8007da0:	6021      	strge	r1, [r4, #0]
 8007da2:	b90e      	cbnz	r6, 8007da8 <_printf_i+0x118>
 8007da4:	2d00      	cmp	r5, #0
 8007da6:	d04d      	beq.n	8007e44 <_printf_i+0x1b4>
 8007da8:	4615      	mov	r5, r2
 8007daa:	fbb6 f1f3 	udiv	r1, r6, r3
 8007dae:	fb03 6711 	mls	r7, r3, r1, r6
 8007db2:	5dc7      	ldrb	r7, [r0, r7]
 8007db4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007db8:	4637      	mov	r7, r6
 8007dba:	42bb      	cmp	r3, r7
 8007dbc:	460e      	mov	r6, r1
 8007dbe:	d9f4      	bls.n	8007daa <_printf_i+0x11a>
 8007dc0:	2b08      	cmp	r3, #8
 8007dc2:	d10b      	bne.n	8007ddc <_printf_i+0x14c>
 8007dc4:	6823      	ldr	r3, [r4, #0]
 8007dc6:	07de      	lsls	r6, r3, #31
 8007dc8:	d508      	bpl.n	8007ddc <_printf_i+0x14c>
 8007dca:	6923      	ldr	r3, [r4, #16]
 8007dcc:	6861      	ldr	r1, [r4, #4]
 8007dce:	4299      	cmp	r1, r3
 8007dd0:	bfde      	ittt	le
 8007dd2:	2330      	movle	r3, #48	; 0x30
 8007dd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007dd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ddc:	1b52      	subs	r2, r2, r5
 8007dde:	6122      	str	r2, [r4, #16]
 8007de0:	f8cd a000 	str.w	sl, [sp]
 8007de4:	464b      	mov	r3, r9
 8007de6:	aa03      	add	r2, sp, #12
 8007de8:	4621      	mov	r1, r4
 8007dea:	4640      	mov	r0, r8
 8007dec:	f7ff fee2 	bl	8007bb4 <_printf_common>
 8007df0:	3001      	adds	r0, #1
 8007df2:	d14c      	bne.n	8007e8e <_printf_i+0x1fe>
 8007df4:	f04f 30ff 	mov.w	r0, #4294967295
 8007df8:	b004      	add	sp, #16
 8007dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dfe:	4835      	ldr	r0, [pc, #212]	; (8007ed4 <_printf_i+0x244>)
 8007e00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e04:	6829      	ldr	r1, [r5, #0]
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e0c:	6029      	str	r1, [r5, #0]
 8007e0e:	061d      	lsls	r5, r3, #24
 8007e10:	d514      	bpl.n	8007e3c <_printf_i+0x1ac>
 8007e12:	07df      	lsls	r7, r3, #31
 8007e14:	bf44      	itt	mi
 8007e16:	f043 0320 	orrmi.w	r3, r3, #32
 8007e1a:	6023      	strmi	r3, [r4, #0]
 8007e1c:	b91e      	cbnz	r6, 8007e26 <_printf_i+0x196>
 8007e1e:	6823      	ldr	r3, [r4, #0]
 8007e20:	f023 0320 	bic.w	r3, r3, #32
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	2310      	movs	r3, #16
 8007e28:	e7b0      	b.n	8007d8c <_printf_i+0xfc>
 8007e2a:	6823      	ldr	r3, [r4, #0]
 8007e2c:	f043 0320 	orr.w	r3, r3, #32
 8007e30:	6023      	str	r3, [r4, #0]
 8007e32:	2378      	movs	r3, #120	; 0x78
 8007e34:	4828      	ldr	r0, [pc, #160]	; (8007ed8 <_printf_i+0x248>)
 8007e36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e3a:	e7e3      	b.n	8007e04 <_printf_i+0x174>
 8007e3c:	0659      	lsls	r1, r3, #25
 8007e3e:	bf48      	it	mi
 8007e40:	b2b6      	uxthmi	r6, r6
 8007e42:	e7e6      	b.n	8007e12 <_printf_i+0x182>
 8007e44:	4615      	mov	r5, r2
 8007e46:	e7bb      	b.n	8007dc0 <_printf_i+0x130>
 8007e48:	682b      	ldr	r3, [r5, #0]
 8007e4a:	6826      	ldr	r6, [r4, #0]
 8007e4c:	6961      	ldr	r1, [r4, #20]
 8007e4e:	1d18      	adds	r0, r3, #4
 8007e50:	6028      	str	r0, [r5, #0]
 8007e52:	0635      	lsls	r5, r6, #24
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	d501      	bpl.n	8007e5c <_printf_i+0x1cc>
 8007e58:	6019      	str	r1, [r3, #0]
 8007e5a:	e002      	b.n	8007e62 <_printf_i+0x1d2>
 8007e5c:	0670      	lsls	r0, r6, #25
 8007e5e:	d5fb      	bpl.n	8007e58 <_printf_i+0x1c8>
 8007e60:	8019      	strh	r1, [r3, #0]
 8007e62:	2300      	movs	r3, #0
 8007e64:	6123      	str	r3, [r4, #16]
 8007e66:	4615      	mov	r5, r2
 8007e68:	e7ba      	b.n	8007de0 <_printf_i+0x150>
 8007e6a:	682b      	ldr	r3, [r5, #0]
 8007e6c:	1d1a      	adds	r2, r3, #4
 8007e6e:	602a      	str	r2, [r5, #0]
 8007e70:	681d      	ldr	r5, [r3, #0]
 8007e72:	6862      	ldr	r2, [r4, #4]
 8007e74:	2100      	movs	r1, #0
 8007e76:	4628      	mov	r0, r5
 8007e78:	f7f8 f9ca 	bl	8000210 <memchr>
 8007e7c:	b108      	cbz	r0, 8007e82 <_printf_i+0x1f2>
 8007e7e:	1b40      	subs	r0, r0, r5
 8007e80:	6060      	str	r0, [r4, #4]
 8007e82:	6863      	ldr	r3, [r4, #4]
 8007e84:	6123      	str	r3, [r4, #16]
 8007e86:	2300      	movs	r3, #0
 8007e88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e8c:	e7a8      	b.n	8007de0 <_printf_i+0x150>
 8007e8e:	6923      	ldr	r3, [r4, #16]
 8007e90:	462a      	mov	r2, r5
 8007e92:	4649      	mov	r1, r9
 8007e94:	4640      	mov	r0, r8
 8007e96:	47d0      	blx	sl
 8007e98:	3001      	adds	r0, #1
 8007e9a:	d0ab      	beq.n	8007df4 <_printf_i+0x164>
 8007e9c:	6823      	ldr	r3, [r4, #0]
 8007e9e:	079b      	lsls	r3, r3, #30
 8007ea0:	d413      	bmi.n	8007eca <_printf_i+0x23a>
 8007ea2:	68e0      	ldr	r0, [r4, #12]
 8007ea4:	9b03      	ldr	r3, [sp, #12]
 8007ea6:	4298      	cmp	r0, r3
 8007ea8:	bfb8      	it	lt
 8007eaa:	4618      	movlt	r0, r3
 8007eac:	e7a4      	b.n	8007df8 <_printf_i+0x168>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	4632      	mov	r2, r6
 8007eb2:	4649      	mov	r1, r9
 8007eb4:	4640      	mov	r0, r8
 8007eb6:	47d0      	blx	sl
 8007eb8:	3001      	adds	r0, #1
 8007eba:	d09b      	beq.n	8007df4 <_printf_i+0x164>
 8007ebc:	3501      	adds	r5, #1
 8007ebe:	68e3      	ldr	r3, [r4, #12]
 8007ec0:	9903      	ldr	r1, [sp, #12]
 8007ec2:	1a5b      	subs	r3, r3, r1
 8007ec4:	42ab      	cmp	r3, r5
 8007ec6:	dcf2      	bgt.n	8007eae <_printf_i+0x21e>
 8007ec8:	e7eb      	b.n	8007ea2 <_printf_i+0x212>
 8007eca:	2500      	movs	r5, #0
 8007ecc:	f104 0619 	add.w	r6, r4, #25
 8007ed0:	e7f5      	b.n	8007ebe <_printf_i+0x22e>
 8007ed2:	bf00      	nop
 8007ed4:	08008f43 	.word	0x08008f43
 8007ed8:	08008f54 	.word	0x08008f54

08007edc <_read_r>:
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	4d07      	ldr	r5, [pc, #28]	; (8007efc <_read_r+0x20>)
 8007ee0:	4604      	mov	r4, r0
 8007ee2:	4608      	mov	r0, r1
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	602a      	str	r2, [r5, #0]
 8007eea:	461a      	mov	r2, r3
 8007eec:	f7f9 fd8e 	bl	8001a0c <_read>
 8007ef0:	1c43      	adds	r3, r0, #1
 8007ef2:	d102      	bne.n	8007efa <_read_r+0x1e>
 8007ef4:	682b      	ldr	r3, [r5, #0]
 8007ef6:	b103      	cbz	r3, 8007efa <_read_r+0x1e>
 8007ef8:	6023      	str	r3, [r4, #0]
 8007efa:	bd38      	pop	{r3, r4, r5, pc}
 8007efc:	20004ffc 	.word	0x20004ffc

08007f00 <__swbuf_r>:
 8007f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f02:	460e      	mov	r6, r1
 8007f04:	4614      	mov	r4, r2
 8007f06:	4605      	mov	r5, r0
 8007f08:	b118      	cbz	r0, 8007f12 <__swbuf_r+0x12>
 8007f0a:	6983      	ldr	r3, [r0, #24]
 8007f0c:	b90b      	cbnz	r3, 8007f12 <__swbuf_r+0x12>
 8007f0e:	f7ff f8ab 	bl	8007068 <__sinit>
 8007f12:	4b21      	ldr	r3, [pc, #132]	; (8007f98 <__swbuf_r+0x98>)
 8007f14:	429c      	cmp	r4, r3
 8007f16:	d12b      	bne.n	8007f70 <__swbuf_r+0x70>
 8007f18:	686c      	ldr	r4, [r5, #4]
 8007f1a:	69a3      	ldr	r3, [r4, #24]
 8007f1c:	60a3      	str	r3, [r4, #8]
 8007f1e:	89a3      	ldrh	r3, [r4, #12]
 8007f20:	071a      	lsls	r2, r3, #28
 8007f22:	d52f      	bpl.n	8007f84 <__swbuf_r+0x84>
 8007f24:	6923      	ldr	r3, [r4, #16]
 8007f26:	b36b      	cbz	r3, 8007f84 <__swbuf_r+0x84>
 8007f28:	6923      	ldr	r3, [r4, #16]
 8007f2a:	6820      	ldr	r0, [r4, #0]
 8007f2c:	1ac0      	subs	r0, r0, r3
 8007f2e:	6963      	ldr	r3, [r4, #20]
 8007f30:	b2f6      	uxtb	r6, r6
 8007f32:	4283      	cmp	r3, r0
 8007f34:	4637      	mov	r7, r6
 8007f36:	dc04      	bgt.n	8007f42 <__swbuf_r+0x42>
 8007f38:	4621      	mov	r1, r4
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	f7ff fc0e 	bl	800775c <_fflush_r>
 8007f40:	bb30      	cbnz	r0, 8007f90 <__swbuf_r+0x90>
 8007f42:	68a3      	ldr	r3, [r4, #8]
 8007f44:	3b01      	subs	r3, #1
 8007f46:	60a3      	str	r3, [r4, #8]
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	1c5a      	adds	r2, r3, #1
 8007f4c:	6022      	str	r2, [r4, #0]
 8007f4e:	701e      	strb	r6, [r3, #0]
 8007f50:	6963      	ldr	r3, [r4, #20]
 8007f52:	3001      	adds	r0, #1
 8007f54:	4283      	cmp	r3, r0
 8007f56:	d004      	beq.n	8007f62 <__swbuf_r+0x62>
 8007f58:	89a3      	ldrh	r3, [r4, #12]
 8007f5a:	07db      	lsls	r3, r3, #31
 8007f5c:	d506      	bpl.n	8007f6c <__swbuf_r+0x6c>
 8007f5e:	2e0a      	cmp	r6, #10
 8007f60:	d104      	bne.n	8007f6c <__swbuf_r+0x6c>
 8007f62:	4621      	mov	r1, r4
 8007f64:	4628      	mov	r0, r5
 8007f66:	f7ff fbf9 	bl	800775c <_fflush_r>
 8007f6a:	b988      	cbnz	r0, 8007f90 <__swbuf_r+0x90>
 8007f6c:	4638      	mov	r0, r7
 8007f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f70:	4b0a      	ldr	r3, [pc, #40]	; (8007f9c <__swbuf_r+0x9c>)
 8007f72:	429c      	cmp	r4, r3
 8007f74:	d101      	bne.n	8007f7a <__swbuf_r+0x7a>
 8007f76:	68ac      	ldr	r4, [r5, #8]
 8007f78:	e7cf      	b.n	8007f1a <__swbuf_r+0x1a>
 8007f7a:	4b09      	ldr	r3, [pc, #36]	; (8007fa0 <__swbuf_r+0xa0>)
 8007f7c:	429c      	cmp	r4, r3
 8007f7e:	bf08      	it	eq
 8007f80:	68ec      	ldreq	r4, [r5, #12]
 8007f82:	e7ca      	b.n	8007f1a <__swbuf_r+0x1a>
 8007f84:	4621      	mov	r1, r4
 8007f86:	4628      	mov	r0, r5
 8007f88:	f000 f80c 	bl	8007fa4 <__swsetup_r>
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	d0cb      	beq.n	8007f28 <__swbuf_r+0x28>
 8007f90:	f04f 37ff 	mov.w	r7, #4294967295
 8007f94:	e7ea      	b.n	8007f6c <__swbuf_r+0x6c>
 8007f96:	bf00      	nop
 8007f98:	08008e40 	.word	0x08008e40
 8007f9c:	08008e60 	.word	0x08008e60
 8007fa0:	08008e20 	.word	0x08008e20

08007fa4 <__swsetup_r>:
 8007fa4:	4b32      	ldr	r3, [pc, #200]	; (8008070 <__swsetup_r+0xcc>)
 8007fa6:	b570      	push	{r4, r5, r6, lr}
 8007fa8:	681d      	ldr	r5, [r3, #0]
 8007faa:	4606      	mov	r6, r0
 8007fac:	460c      	mov	r4, r1
 8007fae:	b125      	cbz	r5, 8007fba <__swsetup_r+0x16>
 8007fb0:	69ab      	ldr	r3, [r5, #24]
 8007fb2:	b913      	cbnz	r3, 8007fba <__swsetup_r+0x16>
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	f7ff f857 	bl	8007068 <__sinit>
 8007fba:	4b2e      	ldr	r3, [pc, #184]	; (8008074 <__swsetup_r+0xd0>)
 8007fbc:	429c      	cmp	r4, r3
 8007fbe:	d10f      	bne.n	8007fe0 <__swsetup_r+0x3c>
 8007fc0:	686c      	ldr	r4, [r5, #4]
 8007fc2:	89a3      	ldrh	r3, [r4, #12]
 8007fc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fc8:	0719      	lsls	r1, r3, #28
 8007fca:	d42c      	bmi.n	8008026 <__swsetup_r+0x82>
 8007fcc:	06dd      	lsls	r5, r3, #27
 8007fce:	d411      	bmi.n	8007ff4 <__swsetup_r+0x50>
 8007fd0:	2309      	movs	r3, #9
 8007fd2:	6033      	str	r3, [r6, #0]
 8007fd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fd8:	81a3      	strh	r3, [r4, #12]
 8007fda:	f04f 30ff 	mov.w	r0, #4294967295
 8007fde:	e03e      	b.n	800805e <__swsetup_r+0xba>
 8007fe0:	4b25      	ldr	r3, [pc, #148]	; (8008078 <__swsetup_r+0xd4>)
 8007fe2:	429c      	cmp	r4, r3
 8007fe4:	d101      	bne.n	8007fea <__swsetup_r+0x46>
 8007fe6:	68ac      	ldr	r4, [r5, #8]
 8007fe8:	e7eb      	b.n	8007fc2 <__swsetup_r+0x1e>
 8007fea:	4b24      	ldr	r3, [pc, #144]	; (800807c <__swsetup_r+0xd8>)
 8007fec:	429c      	cmp	r4, r3
 8007fee:	bf08      	it	eq
 8007ff0:	68ec      	ldreq	r4, [r5, #12]
 8007ff2:	e7e6      	b.n	8007fc2 <__swsetup_r+0x1e>
 8007ff4:	0758      	lsls	r0, r3, #29
 8007ff6:	d512      	bpl.n	800801e <__swsetup_r+0x7a>
 8007ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ffa:	b141      	cbz	r1, 800800e <__swsetup_r+0x6a>
 8007ffc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008000:	4299      	cmp	r1, r3
 8008002:	d002      	beq.n	800800a <__swsetup_r+0x66>
 8008004:	4630      	mov	r0, r6
 8008006:	f7ff fc2f 	bl	8007868 <_free_r>
 800800a:	2300      	movs	r3, #0
 800800c:	6363      	str	r3, [r4, #52]	; 0x34
 800800e:	89a3      	ldrh	r3, [r4, #12]
 8008010:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008014:	81a3      	strh	r3, [r4, #12]
 8008016:	2300      	movs	r3, #0
 8008018:	6063      	str	r3, [r4, #4]
 800801a:	6923      	ldr	r3, [r4, #16]
 800801c:	6023      	str	r3, [r4, #0]
 800801e:	89a3      	ldrh	r3, [r4, #12]
 8008020:	f043 0308 	orr.w	r3, r3, #8
 8008024:	81a3      	strh	r3, [r4, #12]
 8008026:	6923      	ldr	r3, [r4, #16]
 8008028:	b94b      	cbnz	r3, 800803e <__swsetup_r+0x9a>
 800802a:	89a3      	ldrh	r3, [r4, #12]
 800802c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008034:	d003      	beq.n	800803e <__swsetup_r+0x9a>
 8008036:	4621      	mov	r1, r4
 8008038:	4630      	mov	r0, r6
 800803a:	f000 f84d 	bl	80080d8 <__smakebuf_r>
 800803e:	89a0      	ldrh	r0, [r4, #12]
 8008040:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008044:	f010 0301 	ands.w	r3, r0, #1
 8008048:	d00a      	beq.n	8008060 <__swsetup_r+0xbc>
 800804a:	2300      	movs	r3, #0
 800804c:	60a3      	str	r3, [r4, #8]
 800804e:	6963      	ldr	r3, [r4, #20]
 8008050:	425b      	negs	r3, r3
 8008052:	61a3      	str	r3, [r4, #24]
 8008054:	6923      	ldr	r3, [r4, #16]
 8008056:	b943      	cbnz	r3, 800806a <__swsetup_r+0xc6>
 8008058:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800805c:	d1ba      	bne.n	8007fd4 <__swsetup_r+0x30>
 800805e:	bd70      	pop	{r4, r5, r6, pc}
 8008060:	0781      	lsls	r1, r0, #30
 8008062:	bf58      	it	pl
 8008064:	6963      	ldrpl	r3, [r4, #20]
 8008066:	60a3      	str	r3, [r4, #8]
 8008068:	e7f4      	b.n	8008054 <__swsetup_r+0xb0>
 800806a:	2000      	movs	r0, #0
 800806c:	e7f7      	b.n	800805e <__swsetup_r+0xba>
 800806e:	bf00      	nop
 8008070:	20000010 	.word	0x20000010
 8008074:	08008e40 	.word	0x08008e40
 8008078:	08008e60 	.word	0x08008e60
 800807c:	08008e20 	.word	0x08008e20

08008080 <abort>:
 8008080:	b508      	push	{r3, lr}
 8008082:	2006      	movs	r0, #6
 8008084:	f000 f890 	bl	80081a8 <raise>
 8008088:	2001      	movs	r0, #1
 800808a:	f7f9 fcb5 	bl	80019f8 <_exit>

0800808e <__swhatbuf_r>:
 800808e:	b570      	push	{r4, r5, r6, lr}
 8008090:	460e      	mov	r6, r1
 8008092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008096:	2900      	cmp	r1, #0
 8008098:	b096      	sub	sp, #88	; 0x58
 800809a:	4614      	mov	r4, r2
 800809c:	461d      	mov	r5, r3
 800809e:	da08      	bge.n	80080b2 <__swhatbuf_r+0x24>
 80080a0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	602a      	str	r2, [r5, #0]
 80080a8:	061a      	lsls	r2, r3, #24
 80080aa:	d410      	bmi.n	80080ce <__swhatbuf_r+0x40>
 80080ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080b0:	e00e      	b.n	80080d0 <__swhatbuf_r+0x42>
 80080b2:	466a      	mov	r2, sp
 80080b4:	f000 f894 	bl	80081e0 <_fstat_r>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	dbf1      	blt.n	80080a0 <__swhatbuf_r+0x12>
 80080bc:	9a01      	ldr	r2, [sp, #4]
 80080be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80080c6:	425a      	negs	r2, r3
 80080c8:	415a      	adcs	r2, r3
 80080ca:	602a      	str	r2, [r5, #0]
 80080cc:	e7ee      	b.n	80080ac <__swhatbuf_r+0x1e>
 80080ce:	2340      	movs	r3, #64	; 0x40
 80080d0:	2000      	movs	r0, #0
 80080d2:	6023      	str	r3, [r4, #0]
 80080d4:	b016      	add	sp, #88	; 0x58
 80080d6:	bd70      	pop	{r4, r5, r6, pc}

080080d8 <__smakebuf_r>:
 80080d8:	898b      	ldrh	r3, [r1, #12]
 80080da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080dc:	079d      	lsls	r5, r3, #30
 80080de:	4606      	mov	r6, r0
 80080e0:	460c      	mov	r4, r1
 80080e2:	d507      	bpl.n	80080f4 <__smakebuf_r+0x1c>
 80080e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080e8:	6023      	str	r3, [r4, #0]
 80080ea:	6123      	str	r3, [r4, #16]
 80080ec:	2301      	movs	r3, #1
 80080ee:	6163      	str	r3, [r4, #20]
 80080f0:	b002      	add	sp, #8
 80080f2:	bd70      	pop	{r4, r5, r6, pc}
 80080f4:	ab01      	add	r3, sp, #4
 80080f6:	466a      	mov	r2, sp
 80080f8:	f7ff ffc9 	bl	800808e <__swhatbuf_r>
 80080fc:	9900      	ldr	r1, [sp, #0]
 80080fe:	4605      	mov	r5, r0
 8008100:	4630      	mov	r0, r6
 8008102:	f7ff f8ad 	bl	8007260 <_malloc_r>
 8008106:	b948      	cbnz	r0, 800811c <__smakebuf_r+0x44>
 8008108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800810c:	059a      	lsls	r2, r3, #22
 800810e:	d4ef      	bmi.n	80080f0 <__smakebuf_r+0x18>
 8008110:	f023 0303 	bic.w	r3, r3, #3
 8008114:	f043 0302 	orr.w	r3, r3, #2
 8008118:	81a3      	strh	r3, [r4, #12]
 800811a:	e7e3      	b.n	80080e4 <__smakebuf_r+0xc>
 800811c:	4b0d      	ldr	r3, [pc, #52]	; (8008154 <__smakebuf_r+0x7c>)
 800811e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008120:	89a3      	ldrh	r3, [r4, #12]
 8008122:	6020      	str	r0, [r4, #0]
 8008124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008128:	81a3      	strh	r3, [r4, #12]
 800812a:	9b00      	ldr	r3, [sp, #0]
 800812c:	6163      	str	r3, [r4, #20]
 800812e:	9b01      	ldr	r3, [sp, #4]
 8008130:	6120      	str	r0, [r4, #16]
 8008132:	b15b      	cbz	r3, 800814c <__smakebuf_r+0x74>
 8008134:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008138:	4630      	mov	r0, r6
 800813a:	f000 f863 	bl	8008204 <_isatty_r>
 800813e:	b128      	cbz	r0, 800814c <__smakebuf_r+0x74>
 8008140:	89a3      	ldrh	r3, [r4, #12]
 8008142:	f023 0303 	bic.w	r3, r3, #3
 8008146:	f043 0301 	orr.w	r3, r3, #1
 800814a:	81a3      	strh	r3, [r4, #12]
 800814c:	89a0      	ldrh	r0, [r4, #12]
 800814e:	4305      	orrs	r5, r0
 8008150:	81a5      	strh	r5, [r4, #12]
 8008152:	e7cd      	b.n	80080f0 <__smakebuf_r+0x18>
 8008154:	08007001 	.word	0x08007001

08008158 <_raise_r>:
 8008158:	291f      	cmp	r1, #31
 800815a:	b538      	push	{r3, r4, r5, lr}
 800815c:	4604      	mov	r4, r0
 800815e:	460d      	mov	r5, r1
 8008160:	d904      	bls.n	800816c <_raise_r+0x14>
 8008162:	2316      	movs	r3, #22
 8008164:	6003      	str	r3, [r0, #0]
 8008166:	f04f 30ff 	mov.w	r0, #4294967295
 800816a:	bd38      	pop	{r3, r4, r5, pc}
 800816c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800816e:	b112      	cbz	r2, 8008176 <_raise_r+0x1e>
 8008170:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008174:	b94b      	cbnz	r3, 800818a <_raise_r+0x32>
 8008176:	4620      	mov	r0, r4
 8008178:	f000 f830 	bl	80081dc <_getpid_r>
 800817c:	462a      	mov	r2, r5
 800817e:	4601      	mov	r1, r0
 8008180:	4620      	mov	r0, r4
 8008182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008186:	f000 b817 	b.w	80081b8 <_kill_r>
 800818a:	2b01      	cmp	r3, #1
 800818c:	d00a      	beq.n	80081a4 <_raise_r+0x4c>
 800818e:	1c59      	adds	r1, r3, #1
 8008190:	d103      	bne.n	800819a <_raise_r+0x42>
 8008192:	2316      	movs	r3, #22
 8008194:	6003      	str	r3, [r0, #0]
 8008196:	2001      	movs	r0, #1
 8008198:	e7e7      	b.n	800816a <_raise_r+0x12>
 800819a:	2400      	movs	r4, #0
 800819c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081a0:	4628      	mov	r0, r5
 80081a2:	4798      	blx	r3
 80081a4:	2000      	movs	r0, #0
 80081a6:	e7e0      	b.n	800816a <_raise_r+0x12>

080081a8 <raise>:
 80081a8:	4b02      	ldr	r3, [pc, #8]	; (80081b4 <raise+0xc>)
 80081aa:	4601      	mov	r1, r0
 80081ac:	6818      	ldr	r0, [r3, #0]
 80081ae:	f7ff bfd3 	b.w	8008158 <_raise_r>
 80081b2:	bf00      	nop
 80081b4:	20000010 	.word	0x20000010

080081b8 <_kill_r>:
 80081b8:	b538      	push	{r3, r4, r5, lr}
 80081ba:	4d07      	ldr	r5, [pc, #28]	; (80081d8 <_kill_r+0x20>)
 80081bc:	2300      	movs	r3, #0
 80081be:	4604      	mov	r4, r0
 80081c0:	4608      	mov	r0, r1
 80081c2:	4611      	mov	r1, r2
 80081c4:	602b      	str	r3, [r5, #0]
 80081c6:	f7f9 fc07 	bl	80019d8 <_kill>
 80081ca:	1c43      	adds	r3, r0, #1
 80081cc:	d102      	bne.n	80081d4 <_kill_r+0x1c>
 80081ce:	682b      	ldr	r3, [r5, #0]
 80081d0:	b103      	cbz	r3, 80081d4 <_kill_r+0x1c>
 80081d2:	6023      	str	r3, [r4, #0]
 80081d4:	bd38      	pop	{r3, r4, r5, pc}
 80081d6:	bf00      	nop
 80081d8:	20004ffc 	.word	0x20004ffc

080081dc <_getpid_r>:
 80081dc:	f7f9 bbf4 	b.w	80019c8 <_getpid>

080081e0 <_fstat_r>:
 80081e0:	b538      	push	{r3, r4, r5, lr}
 80081e2:	4d07      	ldr	r5, [pc, #28]	; (8008200 <_fstat_r+0x20>)
 80081e4:	2300      	movs	r3, #0
 80081e6:	4604      	mov	r4, r0
 80081e8:	4608      	mov	r0, r1
 80081ea:	4611      	mov	r1, r2
 80081ec:	602b      	str	r3, [r5, #0]
 80081ee:	f7f9 fc52 	bl	8001a96 <_fstat>
 80081f2:	1c43      	adds	r3, r0, #1
 80081f4:	d102      	bne.n	80081fc <_fstat_r+0x1c>
 80081f6:	682b      	ldr	r3, [r5, #0]
 80081f8:	b103      	cbz	r3, 80081fc <_fstat_r+0x1c>
 80081fa:	6023      	str	r3, [r4, #0]
 80081fc:	bd38      	pop	{r3, r4, r5, pc}
 80081fe:	bf00      	nop
 8008200:	20004ffc 	.word	0x20004ffc

08008204 <_isatty_r>:
 8008204:	b538      	push	{r3, r4, r5, lr}
 8008206:	4d06      	ldr	r5, [pc, #24]	; (8008220 <_isatty_r+0x1c>)
 8008208:	2300      	movs	r3, #0
 800820a:	4604      	mov	r4, r0
 800820c:	4608      	mov	r0, r1
 800820e:	602b      	str	r3, [r5, #0]
 8008210:	f7f9 fc51 	bl	8001ab6 <_isatty>
 8008214:	1c43      	adds	r3, r0, #1
 8008216:	d102      	bne.n	800821e <_isatty_r+0x1a>
 8008218:	682b      	ldr	r3, [r5, #0]
 800821a:	b103      	cbz	r3, 800821e <_isatty_r+0x1a>
 800821c:	6023      	str	r3, [r4, #0]
 800821e:	bd38      	pop	{r3, r4, r5, pc}
 8008220:	20004ffc 	.word	0x20004ffc

08008224 <_gettimeofday>:
 8008224:	4b02      	ldr	r3, [pc, #8]	; (8008230 <_gettimeofday+0xc>)
 8008226:	2258      	movs	r2, #88	; 0x58
 8008228:	601a      	str	r2, [r3, #0]
 800822a:	f04f 30ff 	mov.w	r0, #4294967295
 800822e:	4770      	bx	lr
 8008230:	20004ffc 	.word	0x20004ffc

08008234 <_init>:
 8008234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008236:	bf00      	nop
 8008238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800823a:	bc08      	pop	{r3}
 800823c:	469e      	mov	lr, r3
 800823e:	4770      	bx	lr

08008240 <_fini>:
 8008240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008242:	bf00      	nop
 8008244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008246:	bc08      	pop	{r3}
 8008248:	469e      	mov	lr, r3
 800824a:	4770      	bx	lr
