
nucleo-glcd-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dd4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d20  08007fa4  08007fa4  00017fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cc4  08008cc4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008cc4  08008cc4  00018cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ccc  08008ccc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ccc  08008ccc  00018ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cd0  08008cd0  00018cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008cd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f94  20000074  08008d48  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005008  08008d48  00025008  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025705  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000484d  00000000  00000000  000457a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  00049ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017f0  00000000  00000000  0004b930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f8f  00000000  00000000  0004d120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d8d5  00000000  00000000  000730af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df30a  00000000  00000000  00090984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016fc8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007354  00000000  00000000  0016fce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00177038  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0017705c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007f8c 	.word	0x08007f8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08007f8c 	.word	0x08007f8c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <glcd_command>:
#if defined(GLCD_CONTROLLER_ST7565R)

#include "../glcd.h"

void glcd_command(uint8_t c)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
	GLCD_A0_LOW();
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <glcd_command+0x28>)
 80005ba:	f002 f89d 	bl	80026f8 <HAL_GPIO_WritePin>
	glcd_spi_write(c);	
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f90b 	bl	80007dc <glcd_spi_write>
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40020400 	.word	0x40020400

080005d4 <glcd_data>:

void glcd_data(uint8_t c)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
	GLCD_A0_HIGH();
 80005de:	2201      	movs	r2, #1
 80005e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e4:	4805      	ldr	r0, [pc, #20]	; (80005fc <glcd_data+0x28>)
 80005e6:	f002 f887 	bl	80026f8 <HAL_GPIO_WritePin>
	glcd_spi_write(c);	
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f8f5 	bl	80007dc <glcd_spi_write>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40020400 	.word	0x40020400

08000600 <glcd_set_contrast>:

void glcd_set_contrast(uint8_t val) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
	/* Can set a 6-bit value (0 to 63)  */

	/* Must send this command byte before setting the contrast */
	glcd_command(0x81);
 800060a:	2081      	movs	r0, #129	; 0x81
 800060c:	f7ff ffcc 	bl	80005a8 <glcd_command>
	
	/* Set the contrat value ("electronic volumne register") */
	if (val > 63) {
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b3f      	cmp	r3, #63	; 0x3f
 8000614:	d903      	bls.n	800061e <glcd_set_contrast+0x1e>
		glcd_command(63);
 8000616:	203f      	movs	r0, #63	; 0x3f
 8000618:	f7ff ffc6 	bl	80005a8 <glcd_command>
	} else {
		glcd_command(val);
	}
	return;
 800061c:	e004      	b.n	8000628 <glcd_set_contrast+0x28>
		glcd_command(val);
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ffc1 	bl	80005a8 <glcd_command>
	return;
 8000626:	bf00      	nop
}
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <glcd_set_y_address>:

	return;
}

void glcd_set_y_address(uint8_t y)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	b082      	sub	sp, #8
 8000632:	af00      	add	r7, sp, #0
 8000634:	4603      	mov	r3, r0
 8000636:	71fb      	strb	r3, [r7, #7]
	glcd_command(ST7565R_PAGE_ADDRESS_SET | (0x0F & y)); /* 0x0F = 0b00001111 */
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	f003 030f 	and.w	r3, r3, #15
 800063e:	b2db      	uxtb	r3, r3
 8000640:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff ffae 	bl	80005a8 <glcd_command>
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <glcd_set_x_address>:

void glcd_set_x_address(uint8_t x)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
	glcd_set_column_upper(x);
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f808 	bl	8000676 <glcd_set_column_upper>
	glcd_set_column_lower(x);	
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	4618      	mov	r0, r3
 800066a:	f000 f816 	bl	800069a <glcd_set_column_lower>
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <glcd_set_column_upper>:
{
	glcd_command(ST7565R_DISPLAY_NORMAL);
}

void glcd_set_column_upper(uint8_t addr)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
 800067c:	4603      	mov	r3, r0
 800067e:	71fb      	strb	r3, [r7, #7]
	glcd_command(ST7565R_COLUMN_ADDRESS_SET_UPPER | (addr >> 4));
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	091b      	lsrs	r3, r3, #4
 8000684:	b2db      	uxtb	r3, r3
 8000686:	f043 0310 	orr.w	r3, r3, #16
 800068a:	b2db      	uxtb	r3, r3
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff8b 	bl	80005a8 <glcd_command>
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <glcd_set_column_lower>:

void glcd_set_column_lower(uint8_t addr)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	b082      	sub	sp, #8
 800069e:	af00      	add	r7, sp, #0
 80006a0:	4603      	mov	r3, r0
 80006a2:	71fb      	strb	r3, [r7, #7]
	glcd_command(ST7565R_COLUMN_ADDRESS_SET_LOWER | (0x0f & addr));
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	f003 030f 	and.w	r3, r3, #15
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff7b 	bl	80005a8 <glcd_command>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <glcd_write>:
		}			
	}
}

void glcd_write()
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

	uint8_t bank;

	for (bank = 0; bank < GLCD_NUMBER_OF_BANKS; bank++) {
 80006c2:	2300      	movs	r3, #0
 80006c4:	71fb      	strb	r3, [r7, #7]
 80006c6:	e038      	b.n	800073a <glcd_write+0x7e>
		/* Each bank is a single row 8 bits tall */
		uint8_t column;		
		
		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
 80006c8:	4b21      	ldr	r3, [pc, #132]	; (8000750 <glcd_write+0x94>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	785b      	ldrb	r3, [r3, #1]
 80006ce:	461a      	mov	r2, r3
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	3301      	adds	r3, #1
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	429a      	cmp	r2, r3
 80006d8:	da2b      	bge.n	8000732 <glcd_write+0x76>
			continue; /* Skip the entire bank */
		}
		
		if (glcd_bbox_selected->y_max < bank*8) {
 80006da:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <glcd_write+0x94>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	78db      	ldrb	r3, [r3, #3]
 80006e0:	461a      	mov	r2, r3
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	00db      	lsls	r3, r3, #3
 80006e6:	429a      	cmp	r2, r3
 80006e8:	db2b      	blt.n	8000742 <glcd_write+0x86>
			break;    /* No more banks need updating */
		}
		
		glcd_set_y_address(bank);
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ff9e 	bl	800062e <glcd_set_y_address>
		glcd_set_x_address(glcd_bbox_selected->x_min);
 80006f2:	4b17      	ldr	r3, [pc, #92]	; (8000750 <glcd_write+0x94>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ffab 	bl	8000654 <glcd_set_x_address>

		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <glcd_write+0x94>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	71bb      	strb	r3, [r7, #6]
 8000706:	e00d      	b.n	8000724 <glcd_write+0x68>
		{
			glcd_data( glcd_buffer_selected[GLCD_NUMBER_OF_COLS * bank + column] );
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <glcd_write+0x98>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	79fa      	ldrb	r2, [r7, #7]
 800070e:	01d1      	lsls	r1, r2, #7
 8000710:	79ba      	ldrb	r2, [r7, #6]
 8000712:	440a      	add	r2, r1
 8000714:	4413      	add	r3, r2
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff5b 	bl	80005d4 <glcd_data>
		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
 800071e:	79bb      	ldrb	r3, [r7, #6]
 8000720:	3301      	adds	r3, #1
 8000722:	71bb      	strb	r3, [r7, #6]
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <glcd_write+0x94>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	789b      	ldrb	r3, [r3, #2]
 800072a:	79ba      	ldrb	r2, [r7, #6]
 800072c:	429a      	cmp	r2, r3
 800072e:	d9eb      	bls.n	8000708 <glcd_write+0x4c>
 8000730:	e000      	b.n	8000734 <glcd_write+0x78>
			continue; /* Skip the entire bank */
 8000732:	bf00      	nop
	for (bank = 0; bank < GLCD_NUMBER_OF_BANKS; bank++) {
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	3301      	adds	r3, #1
 8000738:	71fb      	strb	r3, [r7, #7]
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b07      	cmp	r3, #7
 800073e:	d9c3      	bls.n	80006c8 <glcd_write+0xc>
 8000740:	e000      	b.n	8000744 <glcd_write+0x88>
			break;    /* No more banks need updating */
 8000742:	bf00      	nop
		}
	}

	glcd_reset_bbox();
 8000744:	f000 f8ea 	bl	800091c <glcd_reset_bbox>

}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20004e74 	.word	0x20004e74
 8000754:	20004e70 	.word	0x20004e70

08000758 <glcd_ST7565R_init>:

void glcd_ST7565R_init(void) {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

	/* Init sequence based on datasheet example code for NHD-C12864A1Z-FSW-FBW-HTT */
	/* Datasheet says max SCK frequency 2.5MHz for this LCD */
	/* We use "reverse direction" for common output mode, as opposed to datasheet specifying "normal direction" */

	glcd_command(0xa0); /* ADC select in normal mode */
 800075c:	20a0      	movs	r0, #160	; 0xa0
 800075e:	f7ff ff23 	bl	80005a8 <glcd_command>
	glcd_command(0xae); /* Display OFF */
 8000762:	20ae      	movs	r0, #174	; 0xae
 8000764:	f7ff ff20 	bl	80005a8 <glcd_command>
	glcd_command(0xc8); /* Common output mode select: reverse direction (last 3 bits are ignored) */
 8000768:	20c8      	movs	r0, #200	; 0xc8
 800076a:	f7ff ff1d 	bl	80005a8 <glcd_command>
	glcd_command(0xa2); /* LCD bias set at 1/9 */
 800076e:	20a2      	movs	r0, #162	; 0xa2
 8000770:	f7ff ff1a 	bl	80005a8 <glcd_command>
	glcd_command(0x2f); /* Power control set to operating mode: 7 */
 8000774:	202f      	movs	r0, #47	; 0x2f
 8000776:	f7ff ff17 	bl	80005a8 <glcd_command>
	glcd_command(0x26); /* Internal resistor ratio, set to: 6 */
 800077a:	2026      	movs	r0, #38	; 0x26
 800077c:	f7ff ff14 	bl	80005a8 <glcd_command>
	glcd_set_contrast(20); /* Set contrast, value experimentally determined */
 8000780:	2014      	movs	r0, #20
 8000782:	f7ff ff3d 	bl	8000600 <glcd_set_contrast>
	glcd_command(0xaf); /* Display on */
 8000786:	20af      	movs	r0, #175	; 0xaf
 8000788:	f7ff ff0e 	bl	80005a8 <glcd_command>
	glcd_set_contrast(20); /* Set contrast, value experimentally determined, value 0 to 63 */
	glcd_command(0xaf); /* Display on */

#endif

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <glcd_init>:
void delay_ms(uint32_t ms);

//#define BACKLIGHT_INVERT	// Uncomment if LED backlight turn on with low value

void glcd_init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
//	/* RST pin */
//	GPIO_InitStructure.GPIO_Pin = CONTROLLER_SPI_RST_PIN;
//	GPIO_Init(CONTROLLER_SPI_RST_PORT, &GPIO_InitStructure);

	/* Make sure chip is de-selected by default */
	GLCD_DESELECT();
 8000794:	2201      	movs	r2, #1
 8000796:	2180      	movs	r1, #128	; 0x80
 8000798:	4807      	ldr	r0, [pc, #28]	; (80007b8 <glcd_init+0x28>)
 800079a:	f001 ffad 	bl	80026f8 <HAL_GPIO_WritePin>
//	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
//	SPI_Init(SPIx, &SPI_InitStructure);
//	/* Enable the SPI peripheral */
//	SPI_Cmd(SPIx, ENABLE);

	glcd_select_screen((uint8_t *)&glcd_buffer,&glcd_bbox);
 800079e:	4907      	ldr	r1, [pc, #28]	; (80007bc <glcd_init+0x2c>)
 80007a0:	4807      	ldr	r0, [pc, #28]	; (80007c0 <glcd_init+0x30>)
 80007a2:	f000 f8ff 	bl	80009a4 <glcd_select_screen>

	glcd_PCD8544_init();
	glcd_clear();

#elif defined(GLCD_CONTROLLER_ST7565R)
	glcd_reset();
 80007a6:	f000 f837 	bl	8000818 <glcd_reset>
	glcd_enable_backlight(ENABLE);
 80007aa:	2001      	movs	r0, #1
 80007ac:	f000 f80a 	bl	80007c4 <glcd_enable_backlight>
	glcd_ST7565R_init();
 80007b0:	f7ff ffd2 	bl	8000758 <glcd_ST7565R_init>

#else
	#error "Controller not supported by STM32F0xx"
#endif

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40020400 	.word	0x40020400
 80007bc:	20004a6c 	.word	0x20004a6c
 80007c0:	20004a70 	.word	0x20004a70

080007c4 <glcd_enable_backlight>:

/* Change backlight led state ENABLE or DISABLE*/
void glcd_enable_backlight(FunctionalState state)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
	#else
		//GPIO_ResetBits(LCD_LED_PORT,LCD_LED_PIN); TODO
	#endif
	}
#endif
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
	...

080007dc <glcd_spi_write>:
	LCD_TIM_SetCompare(LCD_TIM,value);
}
#endif

void glcd_spi_write(uint8_t c)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
	//uint8_t temp;

	GLCD_SELECT();
 80007e6:	2200      	movs	r2, #0
 80007e8:	2180      	movs	r1, #128	; 0x80
 80007ea:	4809      	ldr	r0, [pc, #36]	; (8000810 <glcd_spi_write+0x34>)
 80007ec:	f001 ff84 	bl	80026f8 <HAL_GPIO_WritePin>
	/*!< Loop while DR register in not emplty */
	//OLD while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET);

	//OLD SPI_I2S_SendData(SPIx, (uint16_t) c);
	HAL_SPI_Transmit(&hspi3, &c, 1, MAX_SPI_TRANSMIT_TIMEOUT);
 80007f0:	1df9      	adds	r1, r7, #7
 80007f2:	2332      	movs	r3, #50	; 0x32
 80007f4:	2201      	movs	r2, #1
 80007f6:	4807      	ldr	r0, [pc, #28]	; (8000814 <glcd_spi_write+0x38>)
 80007f8:	f002 fdbd 	bl	8003376 <HAL_SPI_Transmit>
	/* Wait until entire byte has been read (which we discard anyway) */
	//OLD while(SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_BSY) != RESET);

	//temp = SPI_I2S_ReceiveData(SPIx);

	GLCD_DESELECT();
 80007fc:	2201      	movs	r2, #1
 80007fe:	2180      	movs	r1, #128	; 0x80
 8000800:	4803      	ldr	r0, [pc, #12]	; (8000810 <glcd_spi_write+0x34>)
 8000802:	f001 ff79 	bl	80026f8 <HAL_GPIO_WritePin>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40020400 	.word	0x40020400
 8000814:	20004e7c 	.word	0x20004e7c

08000818 <glcd_reset>:

void glcd_reset(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	/* Toggle RST low to reset. Minimum pulse 100ns on datasheet. */
	GLCD_SELECT();
 800081c:	2200      	movs	r2, #0
 800081e:	2180      	movs	r1, #128	; 0x80
 8000820:	480c      	ldr	r0, [pc, #48]	; (8000854 <glcd_reset+0x3c>)
 8000822:	f001 ff69 	bl	80026f8 <HAL_GPIO_WritePin>
	GLCD_RESET_LOW();
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 7100 	mov.w	r1, #512	; 0x200
 800082c:	480a      	ldr	r0, [pc, #40]	; (8000858 <glcd_reset+0x40>)
 800082e:	f001 ff63 	bl	80026f8 <HAL_GPIO_WritePin>


	delay_ms(GLCD_RESET_TIME);
 8000832:	2001      	movs	r0, #1
 8000834:	f000 f812 	bl	800085c <delay_ms>
	//DelayTask(GLCD_RESET_TIME);
	GLCD_RESET_HIGH();
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800083e:	4806      	ldr	r0, [pc, #24]	; (8000858 <glcd_reset+0x40>)
 8000840:	f001 ff5a 	bl	80026f8 <HAL_GPIO_WritePin>
	GLCD_DESELECT();
 8000844:	2201      	movs	r2, #1
 8000846:	2180      	movs	r1, #128	; 0x80
 8000848:	4802      	ldr	r0, [pc, #8]	; (8000854 <glcd_reset+0x3c>)
 800084a:	f001 ff55 	bl	80026f8 <HAL_GPIO_WritePin>
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40020400 	.word	0x40020400
 8000858:	40020800 	.word	0x40020800

0800085c <delay_ms>:

void delay_ms(uint32_t ms){
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
		}
		while (count < utime);
		ms_counter++;
	}while(ms_counter < ms);
#else
	GLCD_RTOS_DELAY_FCN // Call the delay function defined in the header file.
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f003 fde3 	bl	8004430 <osDelay>
#endif
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <glcd_update_bbox>:
glcd_BoundingBox_t *glcd_bbox_selected;

/** @} */

void glcd_update_bbox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax)
{
 8000874:	b490      	push	{r4, r7}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	4604      	mov	r4, r0
 800087c:	4608      	mov	r0, r1
 800087e:	4611      	mov	r1, r2
 8000880:	461a      	mov	r2, r3
 8000882:	4623      	mov	r3, r4
 8000884:	71fb      	strb	r3, [r7, #7]
 8000886:	4603      	mov	r3, r0
 8000888:	71bb      	strb	r3, [r7, #6]
 800088a:	460b      	mov	r3, r1
 800088c:	717b      	strb	r3, [r7, #5]
 800088e:	4613      	mov	r3, r2
 8000890:	713b      	strb	r3, [r7, #4]
	/* Keep and check bounding box within limits of LCD screen dimensions */
	if (xmin > (GLCD_LCD_WIDTH-1)) {
 8000892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000896:	2b00      	cmp	r3, #0
 8000898:	da01      	bge.n	800089e <glcd_update_bbox+0x2a>
		xmin = GLCD_LCD_WIDTH-1;
 800089a:	237f      	movs	r3, #127	; 0x7f
 800089c:	71fb      	strb	r3, [r7, #7]
	}
	if (xmax > (GLCD_LCD_WIDTH-1)) {
 800089e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	da01      	bge.n	80008aa <glcd_update_bbox+0x36>
		xmax = GLCD_LCD_WIDTH-1;
 80008a6:	237f      	movs	r3, #127	; 0x7f
 80008a8:	717b      	strb	r3, [r7, #5]
	}

	if (ymin > (GLCD_LCD_HEIGHT-1)) {
 80008aa:	79bb      	ldrb	r3, [r7, #6]
 80008ac:	2b3f      	cmp	r3, #63	; 0x3f
 80008ae:	d901      	bls.n	80008b4 <glcd_update_bbox+0x40>
		ymin = GLCD_LCD_HEIGHT-1;
 80008b0:	233f      	movs	r3, #63	; 0x3f
 80008b2:	71bb      	strb	r3, [r7, #6]
	}
	if (ymax > (GLCD_LCD_HEIGHT-1)) {
 80008b4:	793b      	ldrb	r3, [r7, #4]
 80008b6:	2b3f      	cmp	r3, #63	; 0x3f
 80008b8:	d901      	bls.n	80008be <glcd_update_bbox+0x4a>
		ymax = GLCD_LCD_HEIGHT-1;
 80008ba:	233f      	movs	r3, #63	; 0x3f
 80008bc:	713b      	strb	r3, [r7, #4]
	}

	/* Update the bounding box size */
	if (xmin < glcd_bbox_selected->x_min) {
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <glcd_update_bbox+0xa4>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	79fa      	ldrb	r2, [r7, #7]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d203      	bcs.n	80008d2 <glcd_update_bbox+0x5e>
		glcd_bbox_selected->x_min = xmin;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <glcd_update_bbox+0xa4>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	79fa      	ldrb	r2, [r7, #7]
 80008d0:	701a      	strb	r2, [r3, #0]
	}		
	if (xmax > glcd_bbox_selected->x_max) {
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <glcd_update_bbox+0xa4>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	789b      	ldrb	r3, [r3, #2]
 80008d8:	797a      	ldrb	r2, [r7, #5]
 80008da:	429a      	cmp	r2, r3
 80008dc:	d903      	bls.n	80008e6 <glcd_update_bbox+0x72>
		glcd_bbox_selected->x_max = xmax;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <glcd_update_bbox+0xa4>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	797a      	ldrb	r2, [r7, #5]
 80008e4:	709a      	strb	r2, [r3, #2]
	}
	if (ymin < glcd_bbox_selected->y_min) {
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <glcd_update_bbox+0xa4>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	785b      	ldrb	r3, [r3, #1]
 80008ec:	79ba      	ldrb	r2, [r7, #6]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d203      	bcs.n	80008fa <glcd_update_bbox+0x86>
		glcd_bbox_selected->y_min = ymin;
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <glcd_update_bbox+0xa4>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	79ba      	ldrb	r2, [r7, #6]
 80008f8:	705a      	strb	r2, [r3, #1]
	}		
	if (ymax > glcd_bbox_selected->y_max) {
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <glcd_update_bbox+0xa4>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	78db      	ldrb	r3, [r3, #3]
 8000900:	793a      	ldrb	r2, [r7, #4]
 8000902:	429a      	cmp	r2, r3
 8000904:	d903      	bls.n	800090e <glcd_update_bbox+0x9a>
		glcd_bbox_selected->y_max = ymax;
 8000906:	4b04      	ldr	r3, [pc, #16]	; (8000918 <glcd_update_bbox+0xa4>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	793a      	ldrb	r2, [r7, #4]
 800090c:	70da      	strb	r2, [r3, #3]
	}			
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bc90      	pop	{r4, r7}
 8000916:	4770      	bx	lr
 8000918:	20004e74 	.word	0x20004e74

0800091c <glcd_reset_bbox>:

void glcd_reset_bbox()
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
	/* Used after physically writing to the LCD */
	glcd_bbox_selected->x_min = GLCD_LCD_WIDTH - 1;
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <glcd_reset_bbox+0x30>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	227f      	movs	r2, #127	; 0x7f
 8000926:	701a      	strb	r2, [r3, #0]
	glcd_bbox_selected->x_max = 0;
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <glcd_reset_bbox+0x30>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2200      	movs	r2, #0
 800092e:	709a      	strb	r2, [r3, #2]
	glcd_bbox_selected->y_min = GLCD_LCD_HEIGHT -1;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <glcd_reset_bbox+0x30>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	223f      	movs	r2, #63	; 0x3f
 8000936:	705a      	strb	r2, [r3, #1]
	glcd_bbox_selected->y_max = 0;	
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <glcd_reset_bbox+0x30>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2200      	movs	r2, #0
 800093e:	70da      	strb	r2, [r3, #3]
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20004e74 	.word	0x20004e74

08000950 <glcd_clear>:
	glcd_bbox_selected->x_max = GLCD_LCD_WIDTH - 1;
	glcd_bbox_selected->y_min = 0;
	glcd_bbox_selected->y_max = GLCD_LCD_HEIGHT -1;		
}

void glcd_clear(void) {
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <glcd_clear+0x28>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f006 fb35 	bl	8006fce <memset>
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
 8000964:	233f      	movs	r3, #63	; 0x3f
 8000966:	227f      	movs	r2, #127	; 0x7f
 8000968:	2100      	movs	r1, #0
 800096a:	2000      	movs	r0, #0
 800096c:	f7ff ff82 	bl	8000874 <glcd_update_bbox>
	glcd_write();
 8000970:	f7ff fea4 	bl	80006bc <glcd_write>
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20004e70 	.word	0x20004e70

0800097c <glcd_clear_buffer>:

void glcd_clear_buffer(void) {
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <glcd_clear_buffer+0x24>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f006 fb1f 	bl	8006fce <memset>
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
 8000990:	233f      	movs	r3, #63	; 0x3f
 8000992:	227f      	movs	r2, #127	; 0x7f
 8000994:	2100      	movs	r1, #0
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff ff6c 	bl	8000874 <glcd_update_bbox>
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20004e70 	.word	0x20004e70

080009a4 <glcd_select_screen>:

void glcd_select_screen(uint8_t *buffer, glcd_BoundingBox_t *bbox)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
	glcd_buffer_selected = buffer;
 80009ae:	4a06      	ldr	r2, [pc, #24]	; (80009c8 <glcd_select_screen+0x24>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6013      	str	r3, [r2, #0]
	glcd_bbox_selected = bbox;
 80009b4:	4a05      	ldr	r2, [pc, #20]	; (80009cc <glcd_select_screen+0x28>)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	6013      	str	r3, [r2, #0]
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20004e70 	.word	0x20004e70
 80009cc:	20004e74 	.word	0x20004e74

080009d0 <glcd_set_pixel>:
#include <stdlib.h>
#include <string.h>
#include "glcd.h"

/* Based on PCD8544 library by Limor Fried */
void glcd_set_pixel(uint8_t x, uint8_t y, uint8_t color) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
 80009da:	460b      	mov	r3, r1
 80009dc:	71bb      	strb	r3, [r7, #6]
 80009de:	4613      	mov	r3, r2
 80009e0:	717b      	strb	r3, [r7, #5]
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	db4d      	blt.n	8000a86 <glcd_set_pixel+0xb6>
 80009ea:	79bb      	ldrb	r3, [r7, #6]
 80009ec:	2b3f      	cmp	r3, #63	; 0x3f
 80009ee:	d84a      	bhi.n	8000a86 <glcd_set_pixel+0xb6>
		/* don't do anything if x/y is outside bounds of display size */
		return;
	}

	y = (y+16)%GLCD_LCD_HEIGHT;	// bandage sol for y=0 not starting at top
 80009f0:	79bb      	ldrb	r3, [r7, #6]
 80009f2:	3310      	adds	r3, #16
 80009f4:	425a      	negs	r2, r3
 80009f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80009fa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80009fe:	bf58      	it	pl
 8000a00:	4253      	negpl	r3, r2
 8000a02:	71bb      	strb	r3, [r7, #6]


	if (color) {
 8000a04:	797b      	ldrb	r3, [r7, #5]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d01a      	beq.n	8000a40 <glcd_set_pixel+0x70>
		/* Set black */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
 8000a0a:	79fa      	ldrb	r2, [r7, #7]
 8000a0c:	79bb      	ldrb	r3, [r7, #6]
 8000a0e:	08db      	lsrs	r3, r3, #3
 8000a10:	b2d8      	uxtb	r0, r3
 8000a12:	4603      	mov	r3, r0
 8000a14:	01db      	lsls	r3, r3, #7
 8000a16:	4413      	add	r3, r2
 8000a18:	4a1d      	ldr	r2, [pc, #116]	; (8000a90 <glcd_set_pixel+0xc0>)
 8000a1a:	5cd3      	ldrb	r3, [r2, r3]
 8000a1c:	b25a      	sxtb	r2, r3
 8000a1e:	79bb      	ldrb	r3, [r7, #6]
 8000a20:	f003 0307 	and.w	r3, r3, #7
 8000a24:	2101      	movs	r1, #1
 8000a26:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2a:	b25b      	sxtb	r3, r3
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	b259      	sxtb	r1, r3
 8000a30:	79fa      	ldrb	r2, [r7, #7]
 8000a32:	4603      	mov	r3, r0
 8000a34:	01db      	lsls	r3, r3, #7
 8000a36:	4413      	add	r3, r2
 8000a38:	b2c9      	uxtb	r1, r1
 8000a3a:	4a15      	ldr	r2, [pc, #84]	; (8000a90 <glcd_set_pixel+0xc0>)
 8000a3c:	54d1      	strb	r1, [r2, r3]
 8000a3e:	e01b      	b.n	8000a78 <glcd_set_pixel+0xa8>
	} else {
		/* Set white */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
 8000a40:	79fa      	ldrb	r2, [r7, #7]
 8000a42:	79bb      	ldrb	r3, [r7, #6]
 8000a44:	08db      	lsrs	r3, r3, #3
 8000a46:	b2d8      	uxtb	r0, r3
 8000a48:	4603      	mov	r3, r0
 8000a4a:	01db      	lsls	r3, r3, #7
 8000a4c:	4413      	add	r3, r2
 8000a4e:	4a10      	ldr	r2, [pc, #64]	; (8000a90 <glcd_set_pixel+0xc0>)
 8000a50:	5cd3      	ldrb	r3, [r2, r3]
 8000a52:	b25a      	sxtb	r2, r3
 8000a54:	79bb      	ldrb	r3, [r7, #6]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a60:	b25b      	sxtb	r3, r3
 8000a62:	43db      	mvns	r3, r3
 8000a64:	b25b      	sxtb	r3, r3
 8000a66:	4013      	ands	r3, r2
 8000a68:	b259      	sxtb	r1, r3
 8000a6a:	79fa      	ldrb	r2, [r7, #7]
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	01db      	lsls	r3, r3, #7
 8000a70:	4413      	add	r3, r2
 8000a72:	b2c9      	uxtb	r1, r1
 8000a74:	4a06      	ldr	r2, [pc, #24]	; (8000a90 <glcd_set_pixel+0xc0>)
 8000a76:	54d1      	strb	r1, [r2, r3]
	}

	glcd_update_bbox(x,y,x,y);
 8000a78:	79bb      	ldrb	r3, [r7, #6]
 8000a7a:	79fa      	ldrb	r2, [r7, #7]
 8000a7c:	79b9      	ldrb	r1, [r7, #6]
 8000a7e:	79f8      	ldrb	r0, [r7, #7]
 8000a80:	f7ff fef8 	bl	8000874 <glcd_update_bbox>
 8000a84:	e000      	b.n	8000a88 <glcd_set_pixel+0xb8>
		return;
 8000a86:	bf00      	nop
}
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20004a70 	.word	0x20004a70

08000a94 <glcd_draw_line>:
	glcd_update_bbox(x,y,x,y);
	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
}

/* Bresenham's algorithm - based on PCD8544 library Limor Fried */
void glcd_draw_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	4608      	mov	r0, r1
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4623      	mov	r3, r4
 8000aa4:	71fb      	strb	r3, [r7, #7]
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71bb      	strb	r3, [r7, #6]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	717b      	strb	r3, [r7, #5]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	713b      	strb	r3, [r7, #4]
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000ab2:	793a      	ldrb	r2, [r7, #4]
 8000ab4:	79bb      	ldrb	r3, [r7, #6]
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000abc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000ac0:	7979      	ldrb	r1, [r7, #5]
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	1acb      	subs	r3, r1, r3
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	bfb8      	it	lt
 8000aca:	425b      	neglt	r3, r3
 8000acc:	429a      	cmp	r2, r3
 8000ace:	bfcc      	ite	gt
 8000ad0:	2301      	movgt	r3, #1
 8000ad2:	2300      	movle	r3, #0
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	757b      	strb	r3, [r7, #21]
	uint8_t dx, dy;
	int8_t err;
	int8_t ystep;
	
	if (steep) {
 8000ad8:	7d7b      	ldrb	r3, [r7, #21]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d00b      	beq.n	8000af6 <glcd_draw_line+0x62>
		swap(x0, y0);
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	753b      	strb	r3, [r7, #20]
 8000ae2:	79bb      	ldrb	r3, [r7, #6]
 8000ae4:	71fb      	strb	r3, [r7, #7]
 8000ae6:	7d3b      	ldrb	r3, [r7, #20]
 8000ae8:	71bb      	strb	r3, [r7, #6]
		swap(x1, y1);
 8000aea:	797b      	ldrb	r3, [r7, #5]
 8000aec:	74fb      	strb	r3, [r7, #19]
 8000aee:	793b      	ldrb	r3, [r7, #4]
 8000af0:	717b      	strb	r3, [r7, #5]
 8000af2:	7cfb      	ldrb	r3, [r7, #19]
 8000af4:	713b      	strb	r3, [r7, #4]
	}
	
	if (x0 > x1) {
 8000af6:	79fa      	ldrb	r2, [r7, #7]
 8000af8:	797b      	ldrb	r3, [r7, #5]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d90b      	bls.n	8000b16 <glcd_draw_line+0x82>
		swap(x0, x1);
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	74bb      	strb	r3, [r7, #18]
 8000b02:	797b      	ldrb	r3, [r7, #5]
 8000b04:	71fb      	strb	r3, [r7, #7]
 8000b06:	7cbb      	ldrb	r3, [r7, #18]
 8000b08:	717b      	strb	r3, [r7, #5]
		swap(y0, y1);
 8000b0a:	79bb      	ldrb	r3, [r7, #6]
 8000b0c:	747b      	strb	r3, [r7, #17]
 8000b0e:	793b      	ldrb	r3, [r7, #4]
 8000b10:	71bb      	strb	r3, [r7, #6]
 8000b12:	7c7b      	ldrb	r3, [r7, #17]
 8000b14:	713b      	strb	r3, [r7, #4]
	}
	
	glcd_update_bbox( x0, y0, x1, y1 );
 8000b16:	793b      	ldrb	r3, [r7, #4]
 8000b18:	797a      	ldrb	r2, [r7, #5]
 8000b1a:	79b9      	ldrb	r1, [r7, #6]
 8000b1c:	79f8      	ldrb	r0, [r7, #7]
 8000b1e:	f7ff fea9 	bl	8000874 <glcd_update_bbox>

	dx = x1 - x0;
 8000b22:	797a      	ldrb	r2, [r7, #5]
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	743b      	strb	r3, [r7, #16]
	dy = abs(y1 - y0);
 8000b2a:	793a      	ldrb	r2, [r7, #4]
 8000b2c:	79bb      	ldrb	r3, [r7, #6]
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	bfb8      	it	lt
 8000b34:	425b      	neglt	r3, r3
 8000b36:	73fb      	strb	r3, [r7, #15]
	
	err = dx / 2;
 8000b38:	7c3b      	ldrb	r3, [r7, #16]
 8000b3a:	085b      	lsrs	r3, r3, #1
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	75fb      	strb	r3, [r7, #23]
	
	if (y0 < y1) {
 8000b40:	79ba      	ldrb	r2, [r7, #6]
 8000b42:	793b      	ldrb	r3, [r7, #4]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d202      	bcs.n	8000b4e <glcd_draw_line+0xba>
		ystep = 1;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	75bb      	strb	r3, [r7, #22]
 8000b4c:	e029      	b.n	8000ba2 <glcd_draw_line+0x10e>
	} else {
		ystep = -1;
 8000b4e:	23ff      	movs	r3, #255	; 0xff
 8000b50:	75bb      	strb	r3, [r7, #22]
	}
	
	for (; x0<=x1; x0++) {
 8000b52:	e026      	b.n	8000ba2 <glcd_draw_line+0x10e>
		if (steep) {
 8000b54:	7d7b      	ldrb	r3, [r7, #21]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d007      	beq.n	8000b6a <glcd_draw_line+0xd6>
			glcd_set_pixel(y0, x0, color);
 8000b5a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000b5e:	79f9      	ldrb	r1, [r7, #7]
 8000b60:	79bb      	ldrb	r3, [r7, #6]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ff34 	bl	80009d0 <glcd_set_pixel>
 8000b68:	e006      	b.n	8000b78 <glcd_draw_line+0xe4>
		} else {
			glcd_set_pixel(x0, y0, color);
 8000b6a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000b6e:	79b9      	ldrb	r1, [r7, #6]
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff ff2c 	bl	80009d0 <glcd_set_pixel>
		}
		err -= dy;
 8000b78:	7dfa      	ldrb	r2, [r7, #23]
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	75fb      	strb	r3, [r7, #23]
		if (err < 0) {
 8000b82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	da08      	bge.n	8000b9c <glcd_draw_line+0x108>
			y0 += ystep;
 8000b8a:	7dba      	ldrb	r2, [r7, #22]
 8000b8c:	79bb      	ldrb	r3, [r7, #6]
 8000b8e:	4413      	add	r3, r2
 8000b90:	71bb      	strb	r3, [r7, #6]
			err += dx;
 8000b92:	7dfa      	ldrb	r2, [r7, #23]
 8000b94:	7c3b      	ldrb	r3, [r7, #16]
 8000b96:	4413      	add	r3, r2
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	75fb      	strb	r3, [r7, #23]
	for (; x0<=x1; x0++) {
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	71fb      	strb	r3, [r7, #7]
 8000ba2:	79fa      	ldrb	r2, [r7, #7]
 8000ba4:	797b      	ldrb	r3, [r7, #5]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d9d4      	bls.n	8000b54 <glcd_draw_line+0xc0>
		}
	}
}
 8000baa:	bf00      	nop
 8000bac:	bf00      	nop
 8000bae:	371c      	adds	r7, #28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd90      	pop	{r4, r7, pc}

08000bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb8:	f001 fae6 	bl	8002188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bbc:	f000 f81c 	bl	8000bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc0:	f000 f91e 	bl	8000e00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bc4:	f000 f8f2 	bl	8000dac <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8000bc8:	f000 f8ba 	bl	8000d40 <MX_TIM7_Init>
  MX_SPI3_Init();
 8000bcc:	f000 f882 	bl	8000cd4 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bd0:	f003 fb52 	bl	8004278 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(startDefaultTask, NULL, &defaultTask_attributes);
 8000bd4:	4a05      	ldr	r2, [pc, #20]	; (8000bec <main+0x38>)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <main+0x3c>)
 8000bda:	f003 fb97 	bl	800430c <osThreadNew>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <main+0x40>)
 8000be2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000be4:	f003 fb6c 	bl	80042c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <main+0x34>
 8000bea:	bf00      	nop
 8000bec:	08008b3c 	.word	0x08008b3c
 8000bf0:	0800152d 	.word	0x0800152d
 8000bf4:	20004e78 	.word	0x20004e78

08000bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b094      	sub	sp, #80	; 0x50
 8000bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	2234      	movs	r2, #52	; 0x34
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f006 f9e1 	bl	8006fce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	4b2a      	ldr	r3, [pc, #168]	; (8000ccc <SystemClock_Config+0xd4>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c24:	4a29      	ldr	r2, [pc, #164]	; (8000ccc <SystemClock_Config+0xd4>)
 8000c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2c:	4b27      	ldr	r3, [pc, #156]	; (8000ccc <SystemClock_Config+0xd4>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c38:	2300      	movs	r3, #0
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <SystemClock_Config+0xd8>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c44:	4a22      	ldr	r2, [pc, #136]	; (8000cd0 <SystemClock_Config+0xd8>)
 8000c46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <SystemClock_Config+0xd8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c54:	603b      	str	r3, [r7, #0]
 8000c56:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c60:	2310      	movs	r3, #16
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c64:	2302      	movs	r3, #2
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c6c:	2310      	movs	r3, #16
 8000c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c70:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c74:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c76:	2304      	movs	r3, #4
 8000c78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4618      	mov	r0, r3
 8000c88:	f002 f84e 	bl	8002d28 <HAL_RCC_OscConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c92:	f000 fd25 	bl	80016e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c96:	230f      	movs	r3, #15
 8000c98:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cac:	f107 0308 	add.w	r3, r7, #8
 8000cb0:	2102      	movs	r1, #2
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f001 fd3a 	bl	800272c <HAL_RCC_ClockConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000cbe:	f000 fd0f 	bl	80016e0 <Error_Handler>
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	3750      	adds	r7, #80	; 0x50
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40007000 	.word	0x40007000

08000cd4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_SPI3_Init+0x64>)
 8000cda:	4a18      	ldr	r2, [pc, #96]	; (8000d3c <MX_SPI3_Init+0x68>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <MX_SPI3_Init+0x64>)
 8000ce0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ce4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_SPI3_Init+0x64>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_SPI3_Init+0x64>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_SPI3_Init+0x64>)
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_SPI3_Init+0x64>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_SPI3_Init+0x64>)
 8000d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d04:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_SPI3_Init+0x64>)
 8000d08:	2238      	movs	r2, #56	; 0x38
 8000d0a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <MX_SPI3_Init+0x64>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_SPI3_Init+0x64>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <MX_SPI3_Init+0x64>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_SPI3_Init+0x64>)
 8000d20:	220a      	movs	r2, #10
 8000d22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <MX_SPI3_Init+0x64>)
 8000d26:	f002 fa9d 	bl	8003264 <HAL_SPI_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000d30:	f000 fcd6 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20004e7c 	.word	0x20004e7c
 8000d3c:	40003c00 	.word	0x40003c00

08000d40 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d46:	463b      	mov	r3, r7
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <MX_TIM7_Init+0x64>)
 8000d50:	4a15      	ldr	r2, [pc, #84]	; (8000da8 <MX_TIM7_Init+0x68>)
 8000d52:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <MX_TIM7_Init+0x64>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <MX_TIM7_Init+0x64>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000d60:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <MX_TIM7_Init+0x64>)
 8000d62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d66:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d68:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <MX_TIM7_Init+0x64>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d6e:	480d      	ldr	r0, [pc, #52]	; (8000da4 <MX_TIM7_Init+0x64>)
 8000d70:	f002 fd08 	bl	8003784 <HAL_TIM_Base_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000d7a:	f000 fcb1 	bl	80016e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d86:	463b      	mov	r3, r7
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4806      	ldr	r0, [pc, #24]	; (8000da4 <MX_TIM7_Init+0x64>)
 8000d8c:	f002 ff8a 	bl	8003ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000d96:	f000 fca3 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20004f18 	.word	0x20004f18
 8000da8:	40001400 	.word	0x40001400

08000dac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <MX_USART2_UART_Init+0x50>)
 8000db4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000db8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000de4:	f002 ffee 	bl	8003dc4 <HAL_UART_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dee:	f000 fc77 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20004ed4 	.word	0x20004ed4
 8000dfc:	40004400 	.word	0x40004400

08000e00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	4b42      	ldr	r3, [pc, #264]	; (8000f24 <MX_GPIO_Init+0x124>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a41      	ldr	r2, [pc, #260]	; (8000f24 <MX_GPIO_Init+0x124>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b3f      	ldr	r3, [pc, #252]	; (8000f24 <MX_GPIO_Init+0x124>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b3b      	ldr	r3, [pc, #236]	; (8000f24 <MX_GPIO_Init+0x124>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a3a      	ldr	r2, [pc, #232]	; (8000f24 <MX_GPIO_Init+0x124>)
 8000e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b38      	ldr	r3, [pc, #224]	; (8000f24 <MX_GPIO_Init+0x124>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	4b34      	ldr	r3, [pc, #208]	; (8000f24 <MX_GPIO_Init+0x124>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a33      	ldr	r2, [pc, #204]	; (8000f24 <MX_GPIO_Init+0x124>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b31      	ldr	r3, [pc, #196]	; (8000f24 <MX_GPIO_Init+0x124>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	4b2d      	ldr	r3, [pc, #180]	; (8000f24 <MX_GPIO_Init+0x124>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a2c      	ldr	r2, [pc, #176]	; (8000f24 <MX_GPIO_Init+0x124>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <MX_GPIO_Init+0x124>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS1_Pin|CS2_Pin|GPIO_PIN_6|GPIO_PIN_8
 8000e86:	2200      	movs	r2, #0
 8000e88:	f44f 7153 	mov.w	r1, #844	; 0x34c
 8000e8c:	4826      	ldr	r0, [pc, #152]	; (8000f28 <MX_GPIO_Init+0x128>)
 8000e8e:	f001 fc33 	bl	80026f8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2120      	movs	r1, #32
 8000e96:	4825      	ldr	r0, [pc, #148]	; (8000f2c <MX_GPIO_Init+0x12c>)
 8000e98:	f001 fc2e 	bl	80026f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000ea2:	4823      	ldr	r0, [pc, #140]	; (8000f30 <MX_GPIO_Init+0x130>)
 8000ea4:	f001 fc28 	bl	80026f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ea8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	481a      	ldr	r0, [pc, #104]	; (8000f28 <MX_GPIO_Init+0x128>)
 8000ec0:	f001 fa86 	bl	80023d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS1_Pin CS2_Pin PC6 PC8
                           PC9 */
  GPIO_InitStruct.Pin = CS1_Pin|CS2_Pin|GPIO_PIN_6|GPIO_PIN_8
 8000ec4:	f44f 7353 	mov.w	r3, #844	; 0x34c
 8000ec8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	4812      	ldr	r0, [pc, #72]	; (8000f28 <MX_GPIO_Init+0x128>)
 8000ede:	f001 fa77 	bl	80023d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ee2:	2320      	movs	r3, #32
 8000ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <MX_GPIO_Init+0x12c>)
 8000efa:	f001 fa69 	bl	80023d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000efe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	4806      	ldr	r0, [pc, #24]	; (8000f30 <MX_GPIO_Init+0x130>)
 8000f18:	f001 fa5a 	bl	80023d0 <HAL_GPIO_Init>

}
 8000f1c:	bf00      	nop
 8000f1e:	3728      	adds	r7, #40	; 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	40020400 	.word	0x40020400

08000f34 <correct_Y>:

uint8_t correct_Y(uint8_t y){
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	return ((y+48)%64);
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	3330      	adds	r3, #48	; 0x30
 8000f42:	425a      	negs	r2, r3
 8000f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f48:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f4c:	bf58      	it	pl
 8000f4e:	4253      	negpl	r3, r2
 8000f50:	b2db      	uxtb	r3, r3
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <drawP1>:

/* USER CODE BEGIN 4 */
// draw p1 labels
void drawP1(){
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b08d      	sub	sp, #52	; 0x34
 8000f64:	af02      	add	r7, sp, #8
	char* labelsP1[] = {"Solar:", "Motor:", "Battery:"};
 8000f66:	4a4a      	ldr	r2, [pc, #296]	; (8001090 <drawP1+0x130>)
 8000f68:	463b      	mov	r3, r7
 8000f6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int labelsP1L = 3;
 8000f70:	2303      	movs	r3, #3
 8000f72:	617b      	str	r3, [r7, #20]
	char* labelspeed = "km/h";
 8000f74:	4b47      	ldr	r3, [pc, #284]	; (8001094 <drawP1+0x134>)
 8000f76:	613b      	str	r3, [r7, #16]

	glcd_tiny_set_font(Font5x7,5,7,32,127);
 8000f78:	237f      	movs	r3, #127	; 0x7f
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	2320      	movs	r3, #32
 8000f7e:	2207      	movs	r2, #7
 8000f80:	2105      	movs	r1, #5
 8000f82:	4845      	ldr	r0, [pc, #276]	; (8001098 <drawP1+0x138>)
 8000f84:	f001 f836 	bl	8001ff4 <glcd_tiny_set_font>
	glcd_clear_buffer();
 8000f88:	f7ff fcf8 	bl	800097c <glcd_clear_buffer>

	// start drawing at y = 5
	uint8_t y = 5;
 8000f8c:	2305      	movs	r3, #5
 8000f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// draw the labels
	for(int i = 0; i < labelsP1L; i++){
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
 8000f96:	e03c      	b.n	8001012 <drawP1+0xb2>
		char* label = labelsP1[i];
 8000f98:	6a3b      	ldr	r3, [r7, #32]
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fa0:	4413      	add	r3, r2
 8000fa2:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000fa6:	60fb      	str	r3, [r7, #12]
		int j = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
		// char by char cuz draw xy only with char
		while(label[j] != 0){
 8000fac:	e018      	b.n	8000fe0 <drawP1+0x80>
			glcd_tiny_draw_char_xy(j*6, correct_Y(y), label[j]);
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	0052      	lsls	r2, r2, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	b2dc      	uxtb	r4, r3
 8000fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ffb7 	bl	8000f34 <correct_Y>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4619      	mov	r1, r3
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	4413      	add	r3, r2
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	f001 f835 	bl	8002044 <glcd_tiny_draw_char_xy>
			j++;
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	61fb      	str	r3, [r7, #28]
		while(label[j] != 0){
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1e0      	bne.n	8000fae <drawP1+0x4e>
		}
		glcd_tiny_draw_char_xy(72, correct_Y(y), 'w');
 8000fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff9f 	bl	8000f34 <correct_Y>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2277      	movs	r2, #119	; 0x77
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	2048      	movs	r0, #72	; 0x48
 8000ffe:	f001 f821 	bl	8002044 <glcd_tiny_draw_char_xy>
		// go next rows, these value are just what I think will look good
		y+=23;
 8001002:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001006:	3317      	adds	r3, #23
 8001008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(int i = 0; i < labelsP1L; i++){
 800100c:	6a3b      	ldr	r3, [r7, #32]
 800100e:	3301      	adds	r3, #1
 8001010:	623b      	str	r3, [r7, #32]
 8001012:	6a3a      	ldr	r2, [r7, #32]
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	429a      	cmp	r2, r3
 8001018:	dbbe      	blt.n	8000f98 <drawP1+0x38>
	}

	// draw divider line
	glcd_draw_line(81, 0,  81, 63, BLACK);
 800101a:	2301      	movs	r3, #1
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	233f      	movs	r3, #63	; 0x3f
 8001020:	2251      	movs	r2, #81	; 0x51
 8001022:	2100      	movs	r1, #0
 8001024:	2051      	movs	r0, #81	; 0x51
 8001026:	f7ff fd35 	bl	8000a94 <glcd_draw_line>
	int x = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
	// draw km/h
	while(labelspeed[x] != 0){
 800102e:	e018      	b.n	8001062 <drawP1+0x102>
		glcd_tiny_draw_char_xy(94+(x*6), correct_Y(52), labelspeed[x]);
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	461a      	mov	r2, r3
 8001036:	0052      	lsls	r2, r2, #1
 8001038:	4413      	add	r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	b2db      	uxtb	r3, r3
 800103e:	335e      	adds	r3, #94	; 0x5e
 8001040:	b2dc      	uxtb	r4, r3
 8001042:	2034      	movs	r0, #52	; 0x34
 8001044:	f7ff ff76 	bl	8000f34 <correct_Y>
 8001048:	4603      	mov	r3, r0
 800104a:	4619      	mov	r1, r3
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4413      	add	r3, r2
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4620      	mov	r0, r4
 8001058:	f000 fff4 	bl	8002044 <glcd_tiny_draw_char_xy>
		x++;
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	3301      	adds	r3, #1
 8001060:	61bb      	str	r3, [r7, #24]
	while(labelspeed[x] != 0){
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4413      	add	r3, r2
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1e0      	bne.n	8001030 <drawP1+0xd0>
	}

	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2104      	movs	r1, #4
 8001072:	480a      	ldr	r0, [pc, #40]	; (800109c <drawP1+0x13c>)
 8001074:	f001 fb40 	bl	80026f8 <HAL_GPIO_WritePin>
	glcd_write();
 8001078:	f7ff fb20 	bl	80006bc <glcd_write>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	2104      	movs	r1, #4
 8001080:	4806      	ldr	r0, [pc, #24]	; (800109c <drawP1+0x13c>)
 8001082:	f001 fb39 	bl	80026f8 <HAL_GPIO_WritePin>
}
 8001086:	bf00      	nop
 8001088:	372c      	adds	r7, #44	; 0x2c
 800108a:	46bd      	mov	sp, r7
 800108c:	bd90      	pop	{r4, r7, pc}
 800108e:	bf00      	nop
 8001090:	08007fe4 	.word	0x08007fe4
 8001094:	08007fdc 	.word	0x08007fdc
 8001098:	08008048 	.word	0x08008048
 800109c:	40020800 	.word	0x40020800

080010a0 <updateP1>:

// pass in array of values in order of solar, motor, battery, and speed
void updateP1(int value[4]){
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b08f      	sub	sp, #60	; 0x3c
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	6078      	str	r0, [r7, #4]

	char valueS[4][4];

	glcd_tiny_set_font(Font5x7,5,7,32,127);
 80010a8:	237f      	movs	r3, #127	; 0x7f
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2320      	movs	r3, #32
 80010ae:	2207      	movs	r2, #7
 80010b0:	2105      	movs	r1, #5
 80010b2:	487c      	ldr	r0, [pc, #496]	; (80012a4 <updateP1+0x204>)
 80010b4:	f000 ff9e 	bl	8001ff4 <glcd_tiny_set_font>

	// get it in strings
	for(int i = 0; i < 4; i++){
 80010b8:	2300      	movs	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010bc:	e095      	b.n	80011ea <updateP1+0x14a>
		// sign
		int v = value[i];
 80010be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	62bb      	str	r3, [r7, #40]	; 0x28
		if(v<0){
 80010ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	da0b      	bge.n	80010e8 <updateP1+0x48>
			valueS[i][0] = '-';
 80010d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80010d8:	4413      	add	r3, r2
 80010da:	222d      	movs	r2, #45	; 0x2d
 80010dc:	f803 2c24 	strb.w	r2, [r3, #-36]
			v *= -1;
 80010e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e2:	425b      	negs	r3, r3
 80010e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80010e6:	e007      	b.n	80010f8 <updateP1+0x58>
		}
		else{
			valueS[i][0] = '+';
 80010e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80010f0:	4413      	add	r3, r2
 80010f2:	222b      	movs	r2, #43	; 0x2b
 80010f4:	f803 2c24 	strb.w	r2, [r3, #-36]
		}
		// hundred
		if(v/100 != 0){
 80010f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fa:	3363      	adds	r3, #99	; 0x63
 80010fc:	2bc6      	cmp	r3, #198	; 0xc6
 80010fe:	d911      	bls.n	8001124 <updateP1+0x84>
			valueS[i][1] = '0' + v/100;
 8001100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001102:	4a69      	ldr	r2, [pc, #420]	; (80012a8 <updateP1+0x208>)
 8001104:	fb82 1203 	smull	r1, r2, r2, r3
 8001108:	1152      	asrs	r2, r2, #5
 800110a:	17db      	asrs	r3, r3, #31
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	b2db      	uxtb	r3, r3
 8001110:	3330      	adds	r3, #48	; 0x30
 8001112:	b2da      	uxtb	r2, r3
 8001114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800111c:	440b      	add	r3, r1
 800111e:	f803 2c23 	strb.w	r2, [r3, #-35]
 8001122:	e007      	b.n	8001134 <updateP1+0x94>
		}
		else{
			valueS[i][1] = ' ';
 8001124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800112c:	4413      	add	r3, r2
 800112e:	2220      	movs	r2, #32
 8001130:	f803 2c23 	strb.w	r2, [r3, #-35]
		}
		// tenth
		if((v/10)%10 != 0 || valueS[i][1] != ' '){
 8001134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001136:	4a5d      	ldr	r2, [pc, #372]	; (80012ac <updateP1+0x20c>)
 8001138:	fb82 1203 	smull	r1, r2, r2, r3
 800113c:	1092      	asrs	r2, r2, #2
 800113e:	17db      	asrs	r3, r3, #31
 8001140:	1ad1      	subs	r1, r2, r3
 8001142:	4b5a      	ldr	r3, [pc, #360]	; (80012ac <updateP1+0x20c>)
 8001144:	fb83 2301 	smull	r2, r3, r3, r1
 8001148:	109a      	asrs	r2, r3, #2
 800114a:	17cb      	asrs	r3, r1, #31
 800114c:	1ad2      	subs	r2, r2, r3
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	1aca      	subs	r2, r1, r3
 8001158:	2a00      	cmp	r2, #0
 800115a:	d108      	bne.n	800116e <updateP1+0xce>
 800115c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001164:	4413      	add	r3, r2
 8001166:	f813 3c23 	ldrb.w	r3, [r3, #-35]
 800116a:	2b20      	cmp	r3, #32
 800116c:	d01c      	beq.n	80011a8 <updateP1+0x108>
			valueS[i][2] = '0' + (v/10)%10;
 800116e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001170:	4a4e      	ldr	r2, [pc, #312]	; (80012ac <updateP1+0x20c>)
 8001172:	fb82 1203 	smull	r1, r2, r2, r3
 8001176:	1092      	asrs	r2, r2, #2
 8001178:	17db      	asrs	r3, r3, #31
 800117a:	1ad2      	subs	r2, r2, r3
 800117c:	4b4b      	ldr	r3, [pc, #300]	; (80012ac <updateP1+0x20c>)
 800117e:	fb83 1302 	smull	r1, r3, r3, r2
 8001182:	1099      	asrs	r1, r3, #2
 8001184:	17d3      	asrs	r3, r2, #31
 8001186:	1ac9      	subs	r1, r1, r3
 8001188:	460b      	mov	r3, r1
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	1ad1      	subs	r1, r2, r3
 8001192:	b2cb      	uxtb	r3, r1
 8001194:	3330      	adds	r3, #48	; 0x30
 8001196:	b2da      	uxtb	r2, r3
 8001198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80011a0:	440b      	add	r3, r1
 80011a2:	f803 2c22 	strb.w	r2, [r3, #-34]
 80011a6:	e007      	b.n	80011b8 <updateP1+0x118>
		}
		else{
			valueS[i][2] = ' ';
 80011a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80011b0:	4413      	add	r3, r2
 80011b2:	2220      	movs	r2, #32
 80011b4:	f803 2c22 	strb.w	r2, [r3, #-34]
		}
		// ones
		valueS[i][3] = '0' + v%10;
 80011b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011ba:	4b3c      	ldr	r3, [pc, #240]	; (80012ac <updateP1+0x20c>)
 80011bc:	fb83 1302 	smull	r1, r3, r3, r2
 80011c0:	1099      	asrs	r1, r3, #2
 80011c2:	17d3      	asrs	r3, r2, #31
 80011c4:	1ac9      	subs	r1, r1, r3
 80011c6:	460b      	mov	r3, r1
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	440b      	add	r3, r1
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	1ad1      	subs	r1, r2, r3
 80011d0:	b2cb      	uxtb	r3, r1
 80011d2:	3330      	adds	r3, #48	; 0x30
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80011de:	440b      	add	r3, r1
 80011e0:	f803 2c21 	strb.w	r2, [r3, #-33]
	for(int i = 0; i < 4; i++){
 80011e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e6:	3301      	adds	r3, #1
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	f77f af66 	ble.w	80010be <updateP1+0x1e>
	}

	// write the 3 small values
	int y = 5;
 80011f2:	2305      	movs	r3, #5
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < 3; i++){
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
 80011fa:	e02b      	b.n	8001254 <updateP1+0x1b4>
		for(int j = 0; j < 4; j++){
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	e01f      	b.n	8001242 <updateP1+0x1a2>
			glcd_tiny_draw_char_xy(48+(j*6), correct_Y(y), valueS[i][j]);
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	461a      	mov	r2, r3
 8001208:	0052      	lsls	r2, r2, #1
 800120a:	4413      	add	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	b2db      	uxtb	r3, r3
 8001210:	3330      	adds	r3, #48	; 0x30
 8001212:	b2dc      	uxtb	r4, r3
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	b2db      	uxtb	r3, r3
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fe8b 	bl	8000f34 <correct_Y>
 800121e:	4603      	mov	r3, r0
 8001220:	4619      	mov	r1, r3
 8001222:	6a3b      	ldr	r3, [r7, #32]
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800122a:	441a      	add	r2, r3
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	4413      	add	r3, r2
 8001230:	3b24      	subs	r3, #36	; 0x24
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	4620      	mov	r0, r4
 8001238:	f000 ff04 	bl	8002044 <glcd_tiny_draw_char_xy>
		for(int j = 0; j < 4; j++){
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	3301      	adds	r3, #1
 8001240:	61fb      	str	r3, [r7, #28]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	2b03      	cmp	r3, #3
 8001246:	dddc      	ble.n	8001202 <updateP1+0x162>
		}
		y+=23;
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	3317      	adds	r3, #23
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < 3; i++){
 800124e:	6a3b      	ldr	r3, [r7, #32]
 8001250:	3301      	adds	r3, #1
 8001252:	623b      	str	r3, [r7, #32]
 8001254:	6a3b      	ldr	r3, [r7, #32]
 8001256:	2b02      	cmp	r3, #2
 8001258:	ddd0      	ble.n	80011fc <updateP1+0x15c>
	}

	// now write the big speed
	glcd_set_font(Liberation_Sans20x28_Numbers, 20, 28, '.', '9');
 800125a:	2339      	movs	r3, #57	; 0x39
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	232e      	movs	r3, #46	; 0x2e
 8001260:	221c      	movs	r2, #28
 8001262:	2114      	movs	r1, #20
 8001264:	4812      	ldr	r0, [pc, #72]	; (80012b0 <updateP1+0x210>)
 8001266:	f000 fc91 	bl	8001b8c <glcd_set_font>
	glcd_draw_char_xy(85, 0, valueS[3][2]);
 800126a:	7ebb      	ldrb	r3, [r7, #26]
 800126c:	461a      	mov	r2, r3
 800126e:	2100      	movs	r1, #0
 8001270:	2055      	movs	r0, #85	; 0x55
 8001272:	f000 fcb3 	bl	8001bdc <glcd_draw_char_xy>
	glcd_draw_char_xy(105, 0, valueS[3][3]);
 8001276:	7efb      	ldrb	r3, [r7, #27]
 8001278:	461a      	mov	r2, r3
 800127a:	2100      	movs	r1, #0
 800127c:	2069      	movs	r0, #105	; 0x69
 800127e:	f000 fcad 	bl	8001bdc <glcd_draw_char_xy>

	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	2104      	movs	r1, #4
 8001286:	480b      	ldr	r0, [pc, #44]	; (80012b4 <updateP1+0x214>)
 8001288:	f001 fa36 	bl	80026f8 <HAL_GPIO_WritePin>
	glcd_write();
 800128c:	f7ff fa16 	bl	80006bc <glcd_write>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8001290:	2201      	movs	r2, #1
 8001292:	2104      	movs	r1, #4
 8001294:	4807      	ldr	r0, [pc, #28]	; (80012b4 <updateP1+0x214>)
 8001296:	f001 fa2f 	bl	80026f8 <HAL_GPIO_WritePin>
}
 800129a:	bf00      	nop
 800129c:	3734      	adds	r7, #52	; 0x34
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd90      	pop	{r4, r7, pc}
 80012a2:	bf00      	nop
 80012a4:	08008048 	.word	0x08008048
 80012a8:	51eb851f 	.word	0x51eb851f
 80012ac:	66666667 	.word	0x66666667
 80012b0:	08008228 	.word	0x08008228
 80012b4:	40020800 	.word	0x40020800

080012b8 <drawP2>:

// draw p2 labels
void drawP2(){
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b08b      	sub	sp, #44	; 0x2c
 80012bc:	af02      	add	r7, sp, #8
	char* labelsP2[] = {"Cruise:", "Light:"};
 80012be:	4a37      	ldr	r2, [pc, #220]	; (800139c <drawP2+0xe4>)
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012c6:	e883 0003 	stmia.w	r3, {r0, r1}
	int labelsP2L = 2;
 80012ca:	2302      	movs	r3, #2
 80012cc:	613b      	str	r3, [r7, #16]

	glcd_tiny_set_font(Font5x7,5,7,32,127);
 80012ce:	237f      	movs	r3, #127	; 0x7f
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2320      	movs	r3, #32
 80012d4:	2207      	movs	r2, #7
 80012d6:	2105      	movs	r1, #5
 80012d8:	4831      	ldr	r0, [pc, #196]	; (80013a0 <drawP2+0xe8>)
 80012da:	f000 fe8b 	bl	8001ff4 <glcd_tiny_set_font>
	glcd_clear_buffer();
 80012de:	f7ff fb4d 	bl	800097c <glcd_clear_buffer>

	int y = 5;
 80012e2:	2305      	movs	r3, #5
 80012e4:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < labelsP2L; i++){
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
 80012ea:	e031      	b.n	8001350 <drawP2+0x98>
		char* label = labelsP2[i];
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	f107 0220 	add.w	r2, r7, #32
 80012f4:	4413      	add	r3, r2
 80012f6:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80012fa:	60fb      	str	r3, [r7, #12]
		int j = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
		while(label[j] != 0){
 8001300:	e01a      	b.n	8001338 <drawP2+0x80>
			glcd_tiny_draw_char_xy(50+j*6, correct_Y(y), label[j]);
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	461a      	mov	r2, r3
 8001308:	0052      	lsls	r2, r2, #1
 800130a:	4413      	add	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	b2db      	uxtb	r3, r3
 8001310:	3332      	adds	r3, #50	; 0x32
 8001312:	b2dc      	uxtb	r4, r3
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fe0b 	bl	8000f34 <correct_Y>
 800131e:	4603      	mov	r3, r0
 8001320:	4619      	mov	r1, r3
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	4620      	mov	r0, r4
 800132e:	f000 fe89 	bl	8002044 <glcd_tiny_draw_char_xy>
			j++;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	3301      	adds	r3, #1
 8001336:	617b      	str	r3, [r7, #20]
		while(label[j] != 0){
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	4413      	add	r3, r2
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1de      	bne.n	8001302 <drawP2+0x4a>
		}
		y+=23;
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	3317      	adds	r3, #23
 8001348:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < labelsP2L; i++){
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	3301      	adds	r3, #1
 800134e:	61bb      	str	r3, [r7, #24]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	429a      	cmp	r2, r3
 8001356:	dbc9      	blt.n	80012ec <drawP2+0x34>
	}

	glcd_draw_line(44, 0,  44, 63, BLACK);
 8001358:	2301      	movs	r3, #1
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	233f      	movs	r3, #63	; 0x3f
 800135e:	222c      	movs	r2, #44	; 0x2c
 8001360:	2100      	movs	r1, #0
 8001362:	202c      	movs	r0, #44	; 0x2c
 8001364:	f7ff fb96 	bl	8000a94 <glcd_draw_line>
	glcd_tiny_draw_char_xy(19, correct_Y(52), '%');
 8001368:	2034      	movs	r0, #52	; 0x34
 800136a:	f7ff fde3 	bl	8000f34 <correct_Y>
 800136e:	4603      	mov	r3, r0
 8001370:	2225      	movs	r2, #37	; 0x25
 8001372:	4619      	mov	r1, r3
 8001374:	2013      	movs	r0, #19
 8001376:	f000 fe65 	bl	8002044 <glcd_tiny_draw_char_xy>

	HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	2108      	movs	r1, #8
 800137e:	4809      	ldr	r0, [pc, #36]	; (80013a4 <drawP2+0xec>)
 8001380:	f001 f9ba 	bl	80026f8 <HAL_GPIO_WritePin>
	glcd_write();
 8001384:	f7ff f99a 	bl	80006bc <glcd_write>
	HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_SET);
 8001388:	2201      	movs	r2, #1
 800138a:	2108      	movs	r1, #8
 800138c:	4805      	ldr	r0, [pc, #20]	; (80013a4 <drawP2+0xec>)
 800138e:	f001 f9b3 	bl	80026f8 <HAL_GPIO_WritePin>
}
 8001392:	bf00      	nop
 8001394:	3724      	adds	r7, #36	; 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd90      	pop	{r4, r7, pc}
 800139a:	bf00      	nop
 800139c:	08007ff0 	.word	0x08007ff0
 80013a0:	08008048 	.word	0x08008048
 80013a4:	40020800 	.word	0x40020800

080013a8 <updateP2>:

// pass in array of values in order of cruise, light, regen, battery
void updateP2(int value[4]){
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b08b      	sub	sp, #44	; 0x2c
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	6078      	str	r0, [r7, #4]
	glcd_tiny_set_font(Font5x7,5,7,32,127);
 80013b0:	237f      	movs	r3, #127	; 0x7f
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2320      	movs	r3, #32
 80013b6:	2207      	movs	r2, #7
 80013b8:	2105      	movs	r1, #5
 80013ba:	4853      	ldr	r0, [pc, #332]	; (8001508 <updateP2+0x160>)
 80013bc:	f000 fe1a 	bl	8001ff4 <glcd_tiny_set_font>

	// write the 2 on off
	int y = 5;
 80013c0:	2305      	movs	r3, #5
 80013c2:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < 2; i++){
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]
 80013c8:	e031      	b.n	800142e <updateP2+0x86>
		char* status = "OFF";
 80013ca:	4b50      	ldr	r3, [pc, #320]	; (800150c <updateP2+0x164>)
 80013cc:	617b      	str	r3, [r7, #20]
		if(value[i]) status = " ON";
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <updateP2+0x38>
 80013dc:	4b4c      	ldr	r3, [pc, #304]	; (8001510 <updateP2+0x168>)
 80013de:	617b      	str	r3, [r7, #20]
		for(int j = 0; j < 3; j++){
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	e01a      	b.n	800141c <updateP2+0x74>
			glcd_tiny_draw_char_xy(95+(j*6), correct_Y(y), status[j]);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	461a      	mov	r2, r3
 80013ec:	0052      	lsls	r2, r2, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	335f      	adds	r3, #95	; 0x5f
 80013f6:	b2dc      	uxtb	r4, r3
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fd99 	bl	8000f34 <correct_Y>
 8001402:	4603      	mov	r3, r0
 8001404:	4619      	mov	r1, r3
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	4413      	add	r3, r2
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	4620      	mov	r0, r4
 8001412:	f000 fe17 	bl	8002044 <glcd_tiny_draw_char_xy>
		for(int j = 0; j < 3; j++){
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	3301      	adds	r3, #1
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	2b02      	cmp	r3, #2
 8001420:	dde1      	ble.n	80013e6 <updateP2+0x3e>
		}
		y+=23;
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3317      	adds	r3, #23
 8001426:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < 2; i++){
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	3301      	adds	r3, #1
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	2b01      	cmp	r3, #1
 8001432:	ddca      	ble.n	80013ca <updateP2+0x22>
	}

	char* regen = "     ";
 8001434:	4b37      	ldr	r3, [pc, #220]	; (8001514 <updateP2+0x16c>)
 8001436:	60fb      	str	r3, [r7, #12]
	if(value[2]) regen = "REGEN";
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3308      	adds	r3, #8
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <updateP2+0x9e>
 8001442:	4b35      	ldr	r3, [pc, #212]	; (8001518 <updateP2+0x170>)
 8001444:	60fb      	str	r3, [r7, #12]

	glcd_set_font(Liberation_Sans17x17_Alpha, 17, 17, 'A', 'Z');
 8001446:	235a      	movs	r3, #90	; 0x5a
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2341      	movs	r3, #65	; 0x41
 800144c:	2211      	movs	r2, #17
 800144e:	2111      	movs	r1, #17
 8001450:	4832      	ldr	r0, [pc, #200]	; (800151c <updateP2+0x174>)
 8001452:	f000 fb9b 	bl	8001b8c <glcd_set_font>
	for(int i = 0; i < 5; i++){
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	e012      	b.n	8001482 <updateP2+0xda>
		glcd_draw_char_xy(49+i*15, 30, regen[i]);
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	b2db      	uxtb	r3, r3
 8001460:	461a      	mov	r2, r3
 8001462:	0112      	lsls	r2, r2, #4
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	b2db      	uxtb	r3, r3
 8001468:	3331      	adds	r3, #49	; 0x31
 800146a:	b2d8      	uxtb	r0, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	4413      	add	r3, r2
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	211e      	movs	r1, #30
 8001478:	f000 fbb0 	bl	8001bdc <glcd_draw_char_xy>
	for(int i = 0; i < 5; i++){
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	3301      	adds	r3, #1
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	2b04      	cmp	r3, #4
 8001486:	dde9      	ble.n	800145c <updateP2+0xb4>
	}

	// now write the big battery
	glcd_set_font(Liberation_Sans20x28_Numbers, 20, 28, '.', '9');
 8001488:	2339      	movs	r3, #57	; 0x39
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	232e      	movs	r3, #46	; 0x2e
 800148e:	221c      	movs	r2, #28
 8001490:	2114      	movs	r1, #20
 8001492:	4823      	ldr	r0, [pc, #140]	; (8001520 <updateP2+0x178>)
 8001494:	f000 fb7a 	bl	8001b8c <glcd_set_font>
	glcd_draw_char_xy(0, 0, '0' + value[3]/10);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	330c      	adds	r3, #12
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a21      	ldr	r2, [pc, #132]	; (8001524 <updateP2+0x17c>)
 80014a0:	fb82 1203 	smull	r1, r2, r2, r3
 80014a4:	1092      	asrs	r2, r2, #2
 80014a6:	17db      	asrs	r3, r3, #31
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	3330      	adds	r3, #48	; 0x30
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	2100      	movs	r1, #0
 80014b4:	2000      	movs	r0, #0
 80014b6:	f000 fb91 	bl	8001bdc <glcd_draw_char_xy>
	glcd_draw_char_xy(21, 0, '0' + value[3]%10);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	330c      	adds	r3, #12
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b18      	ldr	r3, [pc, #96]	; (8001524 <updateP2+0x17c>)
 80014c2:	fb83 1302 	smull	r1, r3, r3, r2
 80014c6:	1099      	asrs	r1, r3, #2
 80014c8:	17d3      	asrs	r3, r2, #31
 80014ca:	1ac9      	subs	r1, r1, r3
 80014cc:	460b      	mov	r3, r1
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	1ad1      	subs	r1, r2, r3
 80014d6:	b2cb      	uxtb	r3, r1
 80014d8:	3330      	adds	r3, #48	; 0x30
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	2100      	movs	r1, #0
 80014e0:	2015      	movs	r0, #21
 80014e2:	f000 fb7b 	bl	8001bdc <glcd_draw_char_xy>

	HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2108      	movs	r1, #8
 80014ea:	480f      	ldr	r0, [pc, #60]	; (8001528 <updateP2+0x180>)
 80014ec:	f001 f904 	bl	80026f8 <HAL_GPIO_WritePin>
	glcd_write();
 80014f0:	f7ff f8e4 	bl	80006bc <glcd_write>
	HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	2108      	movs	r1, #8
 80014f8:	480b      	ldr	r0, [pc, #44]	; (8001528 <updateP2+0x180>)
 80014fa:	f001 f8fd 	bl	80026f8 <HAL_GPIO_WritePin>
}
 80014fe:	bf00      	nop
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd90      	pop	{r4, r7, pc}
 8001506:	bf00      	nop
 8001508:	08008048 	.word	0x08008048
 800150c:	08007ff8 	.word	0x08007ff8
 8001510:	08007ffc 	.word	0x08007ffc
 8001514:	08008000 	.word	0x08008000
 8001518:	08008008 	.word	0x08008008
 800151c:	080085f4 	.word	0x080085f4
 8001520:	08008228 	.word	0x08008228
 8001524:	66666667 	.word	0x66666667
 8001528:	40020800 	.word	0x40020800

0800152c <startDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startDefaultTask */
void startDefaultTask(void *argument)
{
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b093      	sub	sp, #76	; 0x4c
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	glcd_init();
 8001534:	f7ff f92c 	bl	8000790 <glcd_init>
	//glcd_test_hello_world();
	//glcd_test_rectangles();

	// my stuff
	glcd_clear();
 8001538:	f7ff fa0a 	bl	8000950 <glcd_clear>
	srand(time(NULL));   // Initialization, should only be called once.
 800153c:	2000      	movs	r0, #0
 800153e:	f005 fed5 	bl	80072ec <time>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4613      	mov	r3, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f005 fda3 	bl	8007094 <srand>

	int t = 500;
 800154e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001552:	633b      	str	r3, [r7, #48]	; 0x30
	int p1values[4] = {420, 805, -404, 69};
 8001554:	4b56      	ldr	r3, [pc, #344]	; (80016b0 <startDefaultTask+0x184>)
 8001556:	f107 041c 	add.w	r4, r7, #28
 800155a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800155c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int p2values[4] = {1, 1, 1, 87};
 8001560:	4b54      	ldr	r3, [pc, #336]	; (80016b4 <startDefaultTask+0x188>)
 8001562:	f107 040c 	add.w	r4, r7, #12
 8001566:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001568:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	drawP2();
 800156c:	f7ff fea4 	bl	80012b8 <drawP2>
	updateP2(p2values);
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff17 	bl	80013a8 <updateP2>

	drawP1();
 800157a:	f7ff fcf1 	bl	8000f60 <drawP1>
	updateP1(p1values);
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fd8c 	bl	80010a0 <updateP1>
	delay_ms(t);
 8001588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff f966 	bl	800085c <delay_ms>
//	glcd_test_hello_world();
//	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
//
//
	while(1){
		for(int i = 0; i < 3; i++){
 8001590:	2300      	movs	r3, #0
 8001592:	647b      	str	r3, [r7, #68]	; 0x44
 8001594:	e02a      	b.n	80015ec <startDefaultTask+0xc0>
			int r = rand()%5;
 8001596:	f005 fdab 	bl	80070f0 <rand>
 800159a:	4602      	mov	r2, r0
 800159c:	4b46      	ldr	r3, [pc, #280]	; (80016b8 <startDefaultTask+0x18c>)
 800159e:	fb83 1302 	smull	r1, r3, r3, r2
 80015a2:	1059      	asrs	r1, r3, #1
 80015a4:	17d3      	asrs	r3, r2, #31
 80015a6:	1ac9      	subs	r1, r1, r3
 80015a8:	460b      	mov	r3, r1
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	643b      	str	r3, [r7, #64]	; 0x40
			if(rand()%2 == 0){
 80015b2:	f005 fd9d 	bl	80070f0 <rand>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <startDefaultTask+0x9a>
				r*= -1;
 80015c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015c2:	425b      	negs	r3, r3
 80015c4:	643b      	str	r3, [r7, #64]	; 0x40
			}
			p1values[i] += r;
 80015c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80015ce:	4413      	add	r3, r2
 80015d0:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 80015d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015d6:	441a      	add	r2, r3
 80015d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80015e0:	440b      	add	r3, r1
 80015e2:	f843 2c2c 	str.w	r2, [r3, #-44]
		for(int i = 0; i < 3; i++){
 80015e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015e8:	3301      	adds	r3, #1
 80015ea:	647b      	str	r3, [r7, #68]	; 0x44
 80015ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	ddd1      	ble.n	8001596 <startDefaultTask+0x6a>
		}
		int r = rand()%2;
 80015f2:	f005 fd7d 	bl	80070f0 <rand>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	bfb8      	it	lt
 8001600:	425b      	neglt	r3, r3
 8001602:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(rand()%2 == 0){
 8001604:	f005 fd74 	bl	80070f0 <rand>
 8001608:	4603      	mov	r3, r0
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d102      	bne.n	8001618 <startDefaultTask+0xec>
			r*= -1;
 8001612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001614:	425b      	negs	r3, r3
 8001616:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
		p1values[3] += r;
 8001618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800161a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800161c:	4413      	add	r3, r2
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
		drawP1();
 8001620:	f7ff fc9e 	bl	8000f60 <drawP1>
		updateP1(p1values);
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fd39 	bl	80010a0 <updateP1>
		delay_ms(t);
 800162e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff f913 	bl	800085c <delay_ms>

		for(int i = 0; i < 3; i++){
 8001636:	2300      	movs	r3, #0
 8001638:	63bb      	str	r3, [r7, #56]	; 0x38
 800163a:	e013      	b.n	8001664 <startDefaultTask+0x138>
			int s = rand()%2;
 800163c:	f005 fd58 	bl	80070f0 <rand>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	bfb8      	it	lt
 800164a:	425b      	neglt	r3, r3
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
			p2values[i] = s;
 800164e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001656:	4413      	add	r3, r2
 8001658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800165a:	f843 2c3c 	str.w	r2, [r3, #-60]
		for(int i = 0; i < 3; i++){
 800165e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001660:	3301      	adds	r3, #1
 8001662:	63bb      	str	r3, [r7, #56]	; 0x38
 8001664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001666:	2b02      	cmp	r3, #2
 8001668:	dde8      	ble.n	800163c <startDefaultTask+0x110>
		}
		int s = rand()%2;
 800166a:	f005 fd41 	bl	80070f0 <rand>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	bfb8      	it	lt
 8001678:	425b      	neglt	r3, r3
 800167a:	637b      	str	r3, [r7, #52]	; 0x34
		if(rand()%2 == 0){
 800167c:	f005 fd38 	bl	80070f0 <rand>
 8001680:	4603      	mov	r3, r0
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d102      	bne.n	8001690 <startDefaultTask+0x164>
			s*= -1;
 800168a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800168c:	425b      	negs	r3, r3
 800168e:	637b      	str	r3, [r7, #52]	; 0x34
		}
		p2values[3] += s;
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001694:	4413      	add	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
		drawP2();
 8001698:	f7ff fe0e 	bl	80012b8 <drawP2>
		updateP2(p2values);
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fe81 	bl	80013a8 <updateP2>
		delay_ms(t);
 80016a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff f8d7 	bl	800085c <delay_ms>
	while(1){
 80016ae:	e76f      	b.n	8001590 <startDefaultTask+0x64>
 80016b0:	08008010 	.word	0x08008010
 80016b4:	08008020 	.word	0x08008020
 80016b8:	66666667 	.word	0x66666667

080016bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a04      	ldr	r2, [pc, #16]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d101      	bne.n	80016d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016ce:	f000 fd7d 	bl	80021cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40001000 	.word	0x40001000

080016e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e4:	b672      	cpsid	i
}
 80016e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <Error_Handler+0x8>
	...

080016ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_MspInit+0x54>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	4a11      	ldr	r2, [pc, #68]	; (8001740 <HAL_MspInit+0x54>)
 80016fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001700:	6453      	str	r3, [r2, #68]	; 0x44
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_MspInit+0x54>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_MspInit+0x54>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <HAL_MspInit+0x54>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800171c:	6413      	str	r3, [r2, #64]	; 0x40
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <HAL_MspInit+0x54>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	210f      	movs	r1, #15
 800172e:	f06f 0001 	mvn.w	r0, #1
 8001732:	f000 fe23 	bl	800237c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800

08001744 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	; 0x28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a28      	ldr	r2, [pc, #160]	; (8001804 <HAL_SPI_MspInit+0xc0>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d14a      	bne.n	80017fc <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	4b27      	ldr	r3, [pc, #156]	; (8001808 <HAL_SPI_MspInit+0xc4>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	4a26      	ldr	r2, [pc, #152]	; (8001808 <HAL_SPI_MspInit+0xc4>)
 8001770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001774:	6413      	str	r3, [r2, #64]	; 0x40
 8001776:	4b24      	ldr	r3, [pc, #144]	; (8001808 <HAL_SPI_MspInit+0xc4>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	4b20      	ldr	r3, [pc, #128]	; (8001808 <HAL_SPI_MspInit+0xc4>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a1f      	ldr	r2, [pc, #124]	; (8001808 <HAL_SPI_MspInit+0xc4>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <HAL_SPI_MspInit+0xc4>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	4b19      	ldr	r3, [pc, #100]	; (8001808 <HAL_SPI_MspInit+0xc4>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a18      	ldr	r2, [pc, #96]	; (8001808 <HAL_SPI_MspInit+0xc4>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b16      	ldr	r3, [pc, #88]	; (8001808 <HAL_SPI_MspInit+0xc4>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB0     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017ba:	2301      	movs	r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	2303      	movs	r3, #3
 80017c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80017ca:	2307      	movs	r3, #7
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	480d      	ldr	r0, [pc, #52]	; (800180c <HAL_SPI_MspInit+0xc8>)
 80017d6:	f000 fdfb 	bl	80023d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e8:	2303      	movs	r3, #3
 80017ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017ec:	2306      	movs	r3, #6
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4619      	mov	r1, r3
 80017f6:	4806      	ldr	r0, [pc, #24]	; (8001810 <HAL_SPI_MspInit+0xcc>)
 80017f8:	f000 fdea 	bl	80023d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40003c00 	.word	0x40003c00
 8001808:	40023800 	.word	0x40023800
 800180c:	40020400 	.word	0x40020400
 8001810:	40020800 	.word	0x40020800

08001814 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <HAL_TIM_Base_MspInit+0x3c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d10d      	bne.n	8001842 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <HAL_TIM_Base_MspInit+0x40>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	4a09      	ldr	r2, [pc, #36]	; (8001854 <HAL_TIM_Base_MspInit+0x40>)
 8001830:	f043 0320 	orr.w	r3, r3, #32
 8001834:	6413      	str	r3, [r2, #64]	; 0x40
 8001836:	4b07      	ldr	r3, [pc, #28]	; (8001854 <HAL_TIM_Base_MspInit+0x40>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f003 0320 	and.w	r3, r3, #32
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001842:	bf00      	nop
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40001400 	.word	0x40001400
 8001854:	40023800 	.word	0x40023800

08001858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	; 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a19      	ldr	r2, [pc, #100]	; (80018dc <HAL_UART_MspInit+0x84>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d12b      	bne.n	80018d2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <HAL_UART_MspInit+0x88>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	4a17      	ldr	r2, [pc, #92]	; (80018e0 <HAL_UART_MspInit+0x88>)
 8001884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001888:	6413      	str	r3, [r2, #64]	; 0x40
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_UART_MspInit+0x88>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <HAL_UART_MspInit+0x88>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a10      	ldr	r2, [pc, #64]	; (80018e0 <HAL_UART_MspInit+0x88>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <HAL_UART_MspInit+0x88>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018b2:	230c      	movs	r3, #12
 80018b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018be:	2303      	movs	r3, #3
 80018c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018c2:	2307      	movs	r3, #7
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c6:	f107 0314 	add.w	r3, r7, #20
 80018ca:	4619      	mov	r1, r3
 80018cc:	4805      	ldr	r0, [pc, #20]	; (80018e4 <HAL_UART_MspInit+0x8c>)
 80018ce:	f000 fd7f 	bl	80023d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018d2:	bf00      	nop
 80018d4:	3728      	adds	r7, #40	; 0x28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40004400 	.word	0x40004400
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40020000 	.word	0x40020000

080018e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08c      	sub	sp, #48	; 0x30
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80018f8:	2200      	movs	r2, #0
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	2036      	movs	r0, #54	; 0x36
 80018fe:	f000 fd3d 	bl	800237c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001902:	2036      	movs	r0, #54	; 0x36
 8001904:	f000 fd56 	bl	80023b4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	4b1f      	ldr	r3, [pc, #124]	; (800198c <HAL_InitTick+0xa4>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	4a1e      	ldr	r2, [pc, #120]	; (800198c <HAL_InitTick+0xa4>)
 8001912:	f043 0310 	orr.w	r3, r3, #16
 8001916:	6413      	str	r3, [r2, #64]	; 0x40
 8001918:	4b1c      	ldr	r3, [pc, #112]	; (800198c <HAL_InitTick+0xa4>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	f003 0310 	and.w	r3, r3, #16
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001924:	f107 0210 	add.w	r2, r7, #16
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4611      	mov	r1, r2
 800192e:	4618      	mov	r0, r3
 8001930:	f001 f816 	bl	8002960 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001934:	f000 ffec 	bl	8002910 <HAL_RCC_GetPCLK1Freq>
 8001938:	4603      	mov	r3, r0
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800193e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001940:	4a13      	ldr	r2, [pc, #76]	; (8001990 <HAL_InitTick+0xa8>)
 8001942:	fba2 2303 	umull	r2, r3, r2, r3
 8001946:	0c9b      	lsrs	r3, r3, #18
 8001948:	3b01      	subs	r3, #1
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <HAL_InitTick+0xac>)
 800194e:	4a12      	ldr	r2, [pc, #72]	; (8001998 <HAL_InitTick+0xb0>)
 8001950:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_InitTick+0xac>)
 8001954:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001958:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800195a:	4a0e      	ldr	r2, [pc, #56]	; (8001994 <HAL_InitTick+0xac>)
 800195c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <HAL_InitTick+0xac>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_InitTick+0xac>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800196c:	4809      	ldr	r0, [pc, #36]	; (8001994 <HAL_InitTick+0xac>)
 800196e:	f001 ff09 	bl	8003784 <HAL_TIM_Base_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d104      	bne.n	8001982 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001978:	4806      	ldr	r0, [pc, #24]	; (8001994 <HAL_InitTick+0xac>)
 800197a:	f001 ff53 	bl	8003824 <HAL_TIM_Base_Start_IT>
 800197e:	4603      	mov	r3, r0
 8001980:	e000      	b.n	8001984 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
}
 8001984:	4618      	mov	r0, r3
 8001986:	3730      	adds	r7, #48	; 0x30
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40023800 	.word	0x40023800
 8001990:	431bde83 	.word	0x431bde83
 8001994:	20004f60 	.word	0x20004f60
 8001998:	40001000 	.word	0x40001000

0800199c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <NMI_Handler+0x4>

080019a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a6:	e7fe      	b.n	80019a6 <HardFault_Handler+0x4>

080019a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <MemManage_Handler+0x4>

080019ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b2:	e7fe      	b.n	80019b2 <BusFault_Handler+0x4>

080019b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <UsageFault_Handler+0x4>

080019ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <TIM6_DAC_IRQHandler+0x10>)
 80019ce:	f001 ff99 	bl	8003904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20004f60 	.word	0x20004f60

080019dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
	return 1;
 80019e0:	2301      	movs	r3, #1
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <_kill>:

int _kill(int pid, int sig)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019f6:	f005 f9b9 	bl	8006d6c <__errno>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2216      	movs	r2, #22
 80019fe:	601a      	str	r2, [r3, #0]
	return -1;
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_exit>:

void _exit (int status)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a14:	f04f 31ff 	mov.w	r1, #4294967295
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ffe7 	bl	80019ec <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a1e:	e7fe      	b.n	8001a1e <_exit+0x12>

08001a20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	e00a      	b.n	8001a48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a32:	f3af 8000 	nop.w
 8001a36:	4601      	mov	r1, r0
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	60ba      	str	r2, [r7, #8]
 8001a3e:	b2ca      	uxtb	r2, r1
 8001a40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	3301      	adds	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	dbf0      	blt.n	8001a32 <_read+0x12>
	}

return len;
 8001a50:	687b      	ldr	r3, [r7, #4]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b086      	sub	sp, #24
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	60f8      	str	r0, [r7, #12]
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	e009      	b.n	8001a80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	60ba      	str	r2, [r7, #8]
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	dbf1      	blt.n	8001a6c <_write+0x12>
	}
	return len;
 8001a88:	687b      	ldr	r3, [r7, #4]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <_close>:

int _close(int file)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
	return -1;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aba:	605a      	str	r2, [r3, #4]
	return 0;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <_isatty>:

int _isatty(int file)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
	return 1;
 8001ad2:	2301      	movs	r3, #1
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
	return 0;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b04:	4a14      	ldr	r2, [pc, #80]	; (8001b58 <_sbrk+0x5c>)
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <_sbrk+0x60>)
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <_sbrk+0x64>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d102      	bne.n	8001b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <_sbrk+0x64>)
 8001b1a:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <_sbrk+0x68>)
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d207      	bcs.n	8001b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b2c:	f005 f91e 	bl	8006d6c <__errno>
 8001b30:	4603      	mov	r3, r0
 8001b32:	220c      	movs	r2, #12
 8001b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b36:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3a:	e009      	b.n	8001b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <_sbrk+0x64>)
 8001b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20020000 	.word	0x20020000
 8001b5c:	00000400 	.word	0x00000400
 8001b60:	20000090 	.word	0x20000090
 8001b64:	20005008 	.word	0x20005008

08001b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <SystemInit+0x20>)
 8001b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b72:	4a05      	ldr	r2, [pc, #20]	; (8001b88 <SystemInit+0x20>)
 8001b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <glcd_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	4608      	mov	r0, r1
 8001b96:	4611      	mov	r1, r2
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	70fb      	strb	r3, [r7, #3]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	70bb      	strb	r3, [r7, #2]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	707b      	strb	r3, [r7, #1]
	/* Supports variable width fonts */
	font_current.font_table = font_table;
 8001ba6:	4a0c      	ldr	r2, [pc, #48]	; (8001bd8 <glcd_set_font+0x4c>)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6013      	str	r3, [r2, #0]
	font_current.width = width;
 8001bac:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <glcd_set_font+0x4c>)
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	7113      	strb	r3, [r2, #4]
	font_current.height = height;
 8001bb2:	4a09      	ldr	r2, [pc, #36]	; (8001bd8 <glcd_set_font+0x4c>)
 8001bb4:	78bb      	ldrb	r3, [r7, #2]
 8001bb6:	7153      	strb	r3, [r2, #5]
	font_current.start_char = start_char;
 8001bb8:	4a07      	ldr	r2, [pc, #28]	; (8001bd8 <glcd_set_font+0x4c>)
 8001bba:	787b      	ldrb	r3, [r7, #1]
 8001bbc:	7193      	strb	r3, [r2, #6]
	font_current.end_char = end_char;
 8001bbe:	4a06      	ldr	r2, [pc, #24]	; (8001bd8 <glcd_set_font+0x4c>)
 8001bc0:	7c3b      	ldrb	r3, [r7, #16]
 8001bc2:	71d3      	strb	r3, [r2, #7]
	font_current.table_type = MIKRO; /* Only supports MikroElektronika generated format at the moment */
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <glcd_set_font+0x4c>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	721a      	strb	r2, [r3, #8]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20004fa8 	.word	0x20004fa8

08001bdc <glcd_draw_char_xy>:
	font_current.end_char = end_char;
	font_current.table_type = type; /* Only supports MikroElektronika generated format at the moment */
}

uint8_t glcd_draw_char_xy(uint8_t x, uint8_t y, char c)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08a      	sub	sp, #40	; 0x28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	71fb      	strb	r3, [r7, #7]
 8001be6:	460b      	mov	r3, r1
 8001be8:	71bb      	strb	r3, [r7, #6]
 8001bea:	4613      	mov	r3, r2
 8001bec:	717b      	strb	r3, [r7, #5]
	if (c < font_current.start_char || c > font_current.end_char) {
 8001bee:	4bae      	ldr	r3, [pc, #696]	; (8001ea8 <glcd_draw_char_xy+0x2cc>)
 8001bf0:	799b      	ldrb	r3, [r3, #6]
 8001bf2:	797a      	ldrb	r2, [r7, #5]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d304      	bcc.n	8001c02 <glcd_draw_char_xy+0x26>
 8001bf8:	4bab      	ldr	r3, [pc, #684]	; (8001ea8 <glcd_draw_char_xy+0x2cc>)
 8001bfa:	79db      	ldrb	r3, [r3, #7]
 8001bfc:	797a      	ldrb	r2, [r7, #5]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d901      	bls.n	8001c06 <glcd_draw_char_xy+0x2a>
		c = '.';
 8001c02:	232e      	movs	r3, #46	; 0x2e
 8001c04:	717b      	strb	r3, [r7, #5]
	}
	
	if (font_current.table_type == STANG) {
 8001c06:	4ba8      	ldr	r3, [pc, #672]	; (8001ea8 <glcd_draw_char_xy+0x2cc>)
 8001c08:	7a1b      	ldrb	r3, [r3, #8]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d163      	bne.n	8001cd6 <glcd_draw_char_xy+0xfa>
		/* Font table in Pascal Stang format (single byte height with with no width specifier) */
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c14:	e056      	b.n	8001cc4 <glcd_draw_char_xy+0xe8>
#if defined(GLCD_DEVICE_AVR8)			
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
 8001c16:	4ba4      	ldr	r3, [pc, #656]	; (8001ea8 <glcd_draw_char_xy+0x2cc>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	797b      	ldrb	r3, [r7, #5]
 8001c1c:	49a2      	ldr	r1, [pc, #648]	; (8001ea8 <glcd_draw_char_xy+0x2cc>)
 8001c1e:	7989      	ldrb	r1, [r1, #6]
 8001c20:	1a5b      	subs	r3, r3, r1
 8001c22:	49a1      	ldr	r1, [pc, #644]	; (8001ea8 <glcd_draw_char_xy+0x2cc>)
 8001c24:	7909      	ldrb	r1, [r1, #4]
 8001c26:	fb01 f303 	mul.w	r3, r1, r3
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c30:	440b      	add	r3, r1
 8001c32:	4413      	add	r3, r2
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	727b      	strb	r3, [r7, #9]
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c3e:	e038      	b.n	8001cb2 <glcd_draw_char_xy+0xd6>
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
 8001c40:	79fa      	ldrb	r2, [r7, #7]
 8001c42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c46:	4413      	add	r3, r2
 8001c48:	2b7f      	cmp	r3, #127	; 0x7f
 8001c4a:	dc05      	bgt.n	8001c58 <glcd_draw_char_xy+0x7c>
 8001c4c:	79ba      	ldrb	r2, [r7, #6]
 8001c4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c52:	4413      	add	r3, r2
 8001c54:	2b3f      	cmp	r3, #63	; 0x3f
 8001c56:	dd01      	ble.n	8001c5c <glcd_draw_char_xy+0x80>
					/* Don't try and write past the dimensions of the LCD */
					return 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	e1c5      	b.n	8001fe8 <glcd_draw_char_xy+0x40c>
				}
				if (dat & (1<<j)) {
 8001c5c:	7a7a      	ldrb	r2, [r7, #9]
 8001c5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c62:	fa42 f303 	asr.w	r3, r2, r3
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00e      	beq.n	8001c8c <glcd_draw_char_xy+0xb0>
					glcd_set_pixel(x+i,y+j,BLACK);
 8001c6e:	79fa      	ldrb	r2, [r7, #7]
 8001c70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c74:	4413      	add	r3, r2
 8001c76:	b2d8      	uxtb	r0, r3
 8001c78:	79ba      	ldrb	r2, [r7, #6]
 8001c7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c7e:	4413      	add	r3, r2
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2201      	movs	r2, #1
 8001c84:	4619      	mov	r1, r3
 8001c86:	f7fe fea3 	bl	80009d0 <glcd_set_pixel>
 8001c8a:	e00d      	b.n	8001ca8 <glcd_draw_char_xy+0xcc>
				} else {
					glcd_set_pixel(x+i,y+j,WHITE);
 8001c8c:	79fa      	ldrb	r2, [r7, #7]
 8001c8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c92:	4413      	add	r3, r2
 8001c94:	b2d8      	uxtb	r0, r3
 8001c96:	79ba      	ldrb	r2, [r7, #6]
 8001c98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c9c:	4413      	add	r3, r2
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f7fe fe94 	bl	80009d0 <glcd_set_pixel>
			for (j = 0; j < 8; j++) {
 8001ca8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001cac:	3301      	adds	r3, #1
 8001cae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001cb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001cb6:	2b07      	cmp	r3, #7
 8001cb8:	d9c2      	bls.n	8001c40 <glcd_draw_char_xy+0x64>
		for ( i = 0; i < font_current.width; i++ ) {
 8001cba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001cc4:	4b78      	ldr	r3, [pc, #480]	; (8001ea8 <glcd_draw_char_xy+0x2cc>)
 8001cc6:	791b      	ldrb	r3, [r3, #4]
 8001cc8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d3a2      	bcc.n	8001c16 <glcd_draw_char_xy+0x3a>
			}
		}
		
		/* always return how many pixels of width were written */
		/* here for "stang" format fonts, it is always fixed */
		return font_current.width;
 8001cd0:	4b75      	ldr	r3, [pc, #468]	; (8001ea8 <glcd_draw_char_xy+0x2cc>)
 8001cd2:	791b      	ldrb	r3, [r3, #4]
 8001cd4:	e188      	b.n	8001fe8 <glcd_draw_char_xy+0x40c>
		
	} else if (font_current.table_type == MIKRO) {
 8001cd6:	4b74      	ldr	r3, [pc, #464]	; (8001ea8 <glcd_draw_char_xy+0x2cc>)
 8001cd8:	7a1b      	ldrb	r3, [r3, #8]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	f040 80b9 	bne.w	8001e52 <glcd_draw_char_xy+0x276>
		uint8_t var_width;
		uint8_t bytes_high;
		uint8_t bytes_per_char;
		const char *p;
		
		if ((font_current.height % 8) > 0){
 8001ce0:	4b71      	ldr	r3, [pc, #452]	; (8001ea8 <glcd_draw_char_xy+0x2cc>)
 8001ce2:	795b      	ldrb	r3, [r3, #5]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d007      	beq.n	8001cfe <glcd_draw_char_xy+0x122>
			bytes_high = (font_current.height / 8) + 1;
 8001cee:	4b6e      	ldr	r3, [pc, #440]	; (8001ea8 <glcd_draw_char_xy+0x2cc>)
 8001cf0:	795b      	ldrb	r3, [r3, #5]
 8001cf2:	08db      	lsrs	r3, r3, #3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001cfc:	e004      	b.n	8001d08 <glcd_draw_char_xy+0x12c>
		}
		else{
			bytes_high = (font_current.height / 8);
 8001cfe:	4b6a      	ldr	r3, [pc, #424]	; (8001ea8 <glcd_draw_char_xy+0x2cc>)
 8001d00:	795b      	ldrb	r3, [r3, #5]
 8001d02:	08db      	lsrs	r3, r3, #3
 8001d04:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}
		bytes_per_char = font_current.width * bytes_high + 1; /* The +1 is the width byte at the start */
 8001d08:	4b67      	ldr	r3, [pc, #412]	; (8001ea8 <glcd_draw_char_xy+0x2cc>)
 8001d0a:	791b      	ldrb	r3, [r3, #4]
 8001d0c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001d10:	fb12 f303 	smulbb	r3, r2, r3
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	3301      	adds	r3, #1
 8001d18:	747b      	strb	r3, [r7, #17]
				
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
 8001d1a:	4b63      	ldr	r3, [pc, #396]	; (8001ea8 <glcd_draw_char_xy+0x2cc>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	797a      	ldrb	r2, [r7, #5]
 8001d20:	4961      	ldr	r1, [pc, #388]	; (8001ea8 <glcd_draw_char_xy+0x2cc>)
 8001d22:	7989      	ldrb	r1, [r1, #6]
 8001d24:	1a52      	subs	r2, r2, r1
 8001d26:	7c79      	ldrb	r1, [r7, #17]
 8001d28:	fb01 f202 	mul.w	r2, r1, r2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]

		/* The first byte per character is always the width of the character */
#if defined(GLCD_DEVICE_AVR8)		
		var_width = pgm_read_byte(p);
#else
		var_width = *p;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	72fb      	strb	r3, [r7, #11]
#endif
		p++; /* Step over the variable width field */
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
		if (x+var_width >= GLCD_LCD_WIDTH || y+font_current.height >= GLCD_LCD_HEIGHT) {
			return;
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001d42:	e07e      	b.n	8001e42 <glcd_draw_char_xy+0x266>
			uint8_t j;
			for ( j = 0; j < bytes_high; j++ ) {
 8001d44:	2300      	movs	r3, #0
 8001d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001d4a:	e06f      	b.n	8001e2c <glcd_draw_char_xy+0x250>
#if defined(GLCD_DEVICE_AVR8)				
				uint8_t dat = pgm_read_byte( p + i*bytes_high + j );
#else
				uint8_t dat = *( p + i*bytes_high + j );
 8001d4c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001d50:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001d54:	fb02 f303 	mul.w	r3, r2, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d5e:	4413      	add	r3, r2
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	72bb      	strb	r3, [r7, #10]
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001d6e:	e054      	b.n	8001e1a <glcd_draw_char_xy+0x23e>
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
 8001d70:	79fa      	ldrb	r2, [r7, #7]
 8001d72:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001d76:	4413      	add	r3, r2
 8001d78:	2b7f      	cmp	r3, #127	; 0x7f
 8001d7a:	dc09      	bgt.n	8001d90 <glcd_draw_char_xy+0x1b4>
 8001d7c:	79ba      	ldrb	r2, [r7, #6]
 8001d7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	441a      	add	r2, r3
 8001d86:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d8a:	4413      	add	r3, r2
 8001d8c:	2b3f      	cmp	r3, #63	; 0x3f
 8001d8e:	dd01      	ble.n	8001d94 <glcd_draw_char_xy+0x1b8>
						/* Don't write past the dimensions of the LCD, skip the entire char */
						return 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	e129      	b.n	8001fe8 <glcd_draw_char_xy+0x40c>
					}
					
					/* We should not write if the y bit exceeds font height */
					if ((j*8 + bit) >= font_current.height) {
 8001d94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d98:	00da      	lsls	r2, r3, #3
 8001d9a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d9e:	4413      	add	r3, r2
 8001da0:	4a41      	ldr	r2, [pc, #260]	; (8001ea8 <glcd_draw_char_xy+0x2cc>)
 8001da2:	7952      	ldrb	r2, [r2, #5]
 8001da4:	4293      	cmp	r3, r2
 8001da6:	da32      	bge.n	8001e0e <glcd_draw_char_xy+0x232>
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
 8001da8:	7aba      	ldrb	r2, [r7, #10]
 8001daa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001dae:	fa42 f303 	asr.w	r3, r2, r3
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d014      	beq.n	8001de4 <glcd_draw_char_xy+0x208>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
 8001dba:	79fa      	ldrb	r2, [r7, #7]
 8001dbc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001dc0:	4413      	add	r3, r2
 8001dc2:	b2d8      	uxtb	r0, r3
 8001dc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	79bb      	ldrb	r3, [r7, #6]
 8001dce:	4413      	add	r3, r2
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001dd6:	4413      	add	r3, r2
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2201      	movs	r2, #1
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f7fe fdf7 	bl	80009d0 <glcd_set_pixel>
 8001de2:	e015      	b.n	8001e10 <glcd_draw_char_xy+0x234>
					} else {
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
 8001de4:	79fa      	ldrb	r2, [r7, #7]
 8001de6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001dea:	4413      	add	r3, r2
 8001dec:	b2d8      	uxtb	r0, r3
 8001dee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	79bb      	ldrb	r3, [r7, #6]
 8001df8:	4413      	add	r3, r2
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001e00:	4413      	add	r3, r2
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2200      	movs	r2, #0
 8001e06:	4619      	mov	r1, r3
 8001e08:	f7fe fde2 	bl	80009d0 <glcd_set_pixel>
 8001e0c:	e000      	b.n	8001e10 <glcd_draw_char_xy+0x234>
						continue;
 8001e0e:	bf00      	nop
				for (bit = 0; bit < 8; bit++) {
 8001e10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001e14:	3301      	adds	r3, #1
 8001e16:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001e1a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001e1e:	2b07      	cmp	r3, #7
 8001e20:	d9a6      	bls.n	8001d70 <glcd_draw_char_xy+0x194>
			for ( j = 0; j < bytes_high; j++ ) {
 8001e22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e26:	3301      	adds	r3, #1
 8001e28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001e2c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d389      	bcc.n	8001d4c <glcd_draw_char_xy+0x170>
		for ( i = 0; i < var_width; i++ ) {
 8001e38:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001e42:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001e46:	7afb      	ldrb	r3, [r7, #11]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	f4ff af7b 	bcc.w	8001d44 <glcd_draw_char_xy+0x168>
					}
				}									
			}				
		}
		return var_width;	
 8001e4e:	7afb      	ldrb	r3, [r7, #11]
 8001e50:	e0ca      	b.n	8001fe8 <glcd_draw_char_xy+0x40c>
	
	} else if (font_current.table_type == GLCD_UTILS) {
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <glcd_draw_char_xy+0x2cc>)
 8001e54:	7a1b      	ldrb	r3, [r3, #8]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	f040 80c5 	bne.w	8001fe6 <glcd_draw_char_xy+0x40a>
		uint8_t var_width, n;
		uint8_t bytes_high, bytes_per_char;
		const char *p;
		uint8_t j;
		
		bytes_high = font_current.height / 8 + 1;
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <glcd_draw_char_xy+0x2cc>)
 8001e5e:	795b      	ldrb	r3, [r3, #5]
 8001e60:	08db      	lsrs	r3, r3, #3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	3301      	adds	r3, #1
 8001e66:	76bb      	strb	r3, [r7, #26]
		bytes_per_char = font_current.width * bytes_high;
 8001e68:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <glcd_draw_char_xy+0x2cc>)
 8001e6a:	791b      	ldrb	r3, [r3, #4]
 8001e6c:	7eba      	ldrb	r2, [r7, #26]
 8001e6e:	fb12 f303 	smulbb	r3, r2, r3
 8001e72:	767b      	strb	r3, [r7, #25]
		
		/* Point to chars first byte */
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <glcd_draw_char_xy+0x2cc>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	797a      	ldrb	r2, [r7, #5]
 8001e7a:	490b      	ldr	r1, [pc, #44]	; (8001ea8 <glcd_draw_char_xy+0x2cc>)
 8001e7c:	7989      	ldrb	r1, [r1, #6]
 8001e7e:	1a52      	subs	r2, r2, r1
 8001e80:	7e79      	ldrb	r1, [r7, #25]
 8001e82:	fb01 f202 	mul.w	r2, r1, r2
 8001e86:	4413      	add	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]

		/* Determine the width of the character */
		var_width = font_current.width;
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <glcd_draw_char_xy+0x2cc>)
 8001e8c:	791b      	ldrb	r3, [r3, #4]
 8001e8e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		
		n = 0; /* How many columns back from the end */
 8001e92:	2300      	movs	r3, #0
 8001e94:	f887 3020 	strb.w	r3, [r7, #32]
		
		while (1) {
			uint8_t max_byte = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	77bb      	strb	r3, [r7, #30]
			uint8_t row = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	777b      	strb	r3, [r7, #29]
			
			for (row = 0; row < bytes_high; row++) {
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	777b      	strb	r3, [r7, #29]
 8001ea4:	e015      	b.n	8001ed2 <glcd_draw_char_xy+0x2f6>
 8001ea6:	bf00      	nop
 8001ea8:	20004fa8 	.word	0x20004fa8
				uint8_t offset;
				offset = (font_current.width - 1 - n) * row;
 8001eac:	4b50      	ldr	r3, [pc, #320]	; (8001ff0 <glcd_draw_char_xy+0x414>)
 8001eae:	791b      	ldrb	r3, [r3, #4]
 8001eb0:	1e5a      	subs	r2, r3, #1
 8001eb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	7f7a      	ldrb	r2, [r7, #29]
 8001ebc:	fb12 f303 	smulbb	r3, r2, r3
 8001ec0:	74bb      	strb	r3, [r7, #18]
				max_byte = *(p + offset);
 8001ec2:	7cbb      	ldrb	r3, [r7, #18]
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	77bb      	strb	r3, [r7, #30]
			for (row = 0; row < bytes_high; row++) {
 8001ecc:	7f7b      	ldrb	r3, [r7, #29]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	777b      	strb	r3, [r7, #29]
 8001ed2:	7f7a      	ldrb	r2, [r7, #29]
 8001ed4:	7ebb      	ldrb	r3, [r7, #26]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d3e8      	bcc.n	8001eac <glcd_draw_char_xy+0x2d0>
			}
			if (max_byte == 0) {
 8001eda:	7fbb      	ldrb	r3, [r7, #30]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10e      	bne.n	8001efe <glcd_draw_char_xy+0x322>
				/* column is empty for all rows, go left and test again */
				/* reduce variable width by 1 */
				var_width--;
 8001ee0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				if (var_width == 0) {
 8001eea:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d007      	beq.n	8001f02 <glcd_draw_char_xy+0x326>
					break;
				}
			} else {
				break; /* Part of a character was found */
			}
			n++;
 8001ef2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	f887 3020 	strb.w	r3, [r7, #32]
		while (1) {
 8001efc:	e7cc      	b.n	8001e98 <glcd_draw_char_xy+0x2bc>
				break; /* Part of a character was found */
 8001efe:	bf00      	nop
 8001f00:	e000      	b.n	8001f04 <glcd_draw_char_xy+0x328>
					break;
 8001f02:	bf00      	nop
		/* Uncomment line below, to force fixed width, for debugging only */
		//var_width = font_current.width; // bypass auto width detection, treat as fixed width
				
		/* For glcd-utils format, we write one complete row at a time */
		 /* loop as rows, 1st row, j=0 */
		for ( j = 0; j < bytes_high; j++ ) {
 8001f04:	2300      	movs	r3, #0
 8001f06:	77fb      	strb	r3, [r7, #31]
 8001f08:	e066      	b.n	8001fd8 <glcd_draw_char_xy+0x3fc>
			/* Loop one row at a time */
		
			uint8_t i;
			for ( i = 0; i < var_width; i++ ) {
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	773b      	strb	r3, [r7, #28]
 8001f0e:	e05b      	b.n	8001fc8 <glcd_draw_char_xy+0x3ec>
				uint8_t dat, bit;
				
#if defined(GLCD_DEVICE_AVR8)
				dat = pgm_read_byte( p + j*font_current.width + i );
#else
				dat = *( p + j*font_current.width + i );
 8001f10:	7ffb      	ldrb	r3, [r7, #31]
 8001f12:	4a37      	ldr	r2, [pc, #220]	; (8001ff0 <glcd_draw_char_xy+0x414>)
 8001f14:	7912      	ldrb	r2, [r2, #4]
 8001f16:	fb02 f303 	mul.w	r3, r2, r3
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	7f3b      	ldrb	r3, [r7, #28]
 8001f1e:	4413      	add	r3, r2
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	4413      	add	r3, r2
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	74fb      	strb	r3, [r7, #19]
#endif
				
				for (bit = 0; bit < 8; bit++) {
 8001f28:	2300      	movs	r3, #0
 8001f2a:	76fb      	strb	r3, [r7, #27]
 8001f2c:	e046      	b.n	8001fbc <glcd_draw_char_xy+0x3e0>
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
 8001f2e:	79fa      	ldrb	r2, [r7, #7]
 8001f30:	7f3b      	ldrb	r3, [r7, #28]
 8001f32:	4413      	add	r3, r2
 8001f34:	2b7f      	cmp	r3, #127	; 0x7f
 8001f36:	dc07      	bgt.n	8001f48 <glcd_draw_char_xy+0x36c>
 8001f38:	79ba      	ldrb	r2, [r7, #6]
 8001f3a:	7ffb      	ldrb	r3, [r7, #31]
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	441a      	add	r2, r3
 8001f40:	7efb      	ldrb	r3, [r7, #27]
 8001f42:	4413      	add	r3, r2
 8001f44:	2b3f      	cmp	r3, #63	; 0x3f
 8001f46:	dd01      	ble.n	8001f4c <glcd_draw_char_xy+0x370>
						/* Don't write past the dimensions of the LCD, skip the entire char */
						return 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e04d      	b.n	8001fe8 <glcd_draw_char_xy+0x40c>
					}
					
					/* We should not write if the y bit exceeds font height */
					if ((j*8 + bit) >= font_current.height) {
 8001f4c:	7ffb      	ldrb	r3, [r7, #31]
 8001f4e:	00da      	lsls	r2, r3, #3
 8001f50:	7efb      	ldrb	r3, [r7, #27]
 8001f52:	4413      	add	r3, r2
 8001f54:	4a26      	ldr	r2, [pc, #152]	; (8001ff0 <glcd_draw_char_xy+0x414>)
 8001f56:	7952      	ldrb	r2, [r2, #5]
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	da2b      	bge.n	8001fb4 <glcd_draw_char_xy+0x3d8>
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
 8001f5c:	7cfa      	ldrb	r2, [r7, #19]
 8001f5e:	7efb      	ldrb	r3, [r7, #27]
 8001f60:	fa42 f303 	asr.w	r3, r2, r3
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d011      	beq.n	8001f90 <glcd_draw_char_xy+0x3b4>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
 8001f6c:	79fa      	ldrb	r2, [r7, #7]
 8001f6e:	7f3b      	ldrb	r3, [r7, #28]
 8001f70:	4413      	add	r3, r2
 8001f72:	b2d8      	uxtb	r0, r3
 8001f74:	7ffb      	ldrb	r3, [r7, #31]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	79bb      	ldrb	r3, [r7, #6]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	7efb      	ldrb	r3, [r7, #27]
 8001f82:	4413      	add	r3, r2
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2201      	movs	r2, #1
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f7fe fd21 	bl	80009d0 <glcd_set_pixel>
 8001f8e:	e012      	b.n	8001fb6 <glcd_draw_char_xy+0x3da>
					} else {
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
 8001f90:	79fa      	ldrb	r2, [r7, #7]
 8001f92:	7f3b      	ldrb	r3, [r7, #28]
 8001f94:	4413      	add	r3, r2
 8001f96:	b2d8      	uxtb	r0, r3
 8001f98:	7ffb      	ldrb	r3, [r7, #31]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	79bb      	ldrb	r3, [r7, #6]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	7efb      	ldrb	r3, [r7, #27]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2200      	movs	r2, #0
 8001fac:	4619      	mov	r1, r3
 8001fae:	f7fe fd0f 	bl	80009d0 <glcd_set_pixel>
 8001fb2:	e000      	b.n	8001fb6 <glcd_draw_char_xy+0x3da>
						continue;
 8001fb4:	bf00      	nop
				for (bit = 0; bit < 8; bit++) {
 8001fb6:	7efb      	ldrb	r3, [r7, #27]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	76fb      	strb	r3, [r7, #27]
 8001fbc:	7efb      	ldrb	r3, [r7, #27]
 8001fbe:	2b07      	cmp	r3, #7
 8001fc0:	d9b5      	bls.n	8001f2e <glcd_draw_char_xy+0x352>
			for ( i = 0; i < var_width; i++ ) {
 8001fc2:	7f3b      	ldrb	r3, [r7, #28]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	773b      	strb	r3, [r7, #28]
 8001fc8:	7f3a      	ldrb	r2, [r7, #28]
 8001fca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d39e      	bcc.n	8001f10 <glcd_draw_char_xy+0x334>
		for ( j = 0; j < bytes_high; j++ ) {
 8001fd2:	7ffb      	ldrb	r3, [r7, #31]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	77fb      	strb	r3, [r7, #31]
 8001fd8:	7ffa      	ldrb	r2, [r7, #31]
 8001fda:	7ebb      	ldrb	r3, [r7, #26]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d394      	bcc.n	8001f0a <glcd_draw_char_xy+0x32e>
					}
				}									
			} /* i */
		} /* j */
		
		return var_width; /* Number of columns written to display */
 8001fe0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001fe4:	e000      	b.n	8001fe8 <glcd_draw_char_xy+0x40c>
		
	} else {
		/* Don't recognise the font table */
		return 0;
 8001fe6:	2300      	movs	r3, #0
		
	}

}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3728      	adds	r7, #40	; 0x28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20004fa8 	.word	0x20004fa8

08001ff4 <glcd_tiny_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_tiny_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	4608      	mov	r0, r1
 8001ffe:	4611      	mov	r1, r2
 8002000:	461a      	mov	r2, r3
 8002002:	4603      	mov	r3, r0
 8002004:	70fb      	strb	r3, [r7, #3]
 8002006:	460b      	mov	r3, r1
 8002008:	70bb      	strb	r3, [r7, #2]
 800200a:	4613      	mov	r3, r2
 800200c:	707b      	strb	r3, [r7, #1]
	font_current.font_table = font_table;
 800200e:	4a0c      	ldr	r2, [pc, #48]	; (8002040 <glcd_tiny_set_font+0x4c>)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6013      	str	r3, [r2, #0]
	font_current.width = width;
 8002014:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <glcd_tiny_set_font+0x4c>)
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	7113      	strb	r3, [r2, #4]
	font_current.height = height;
 800201a:	4a09      	ldr	r2, [pc, #36]	; (8002040 <glcd_tiny_set_font+0x4c>)
 800201c:	78bb      	ldrb	r3, [r7, #2]
 800201e:	7153      	strb	r3, [r2, #5]
	font_current.start_char = start_char;
 8002020:	4a07      	ldr	r2, [pc, #28]	; (8002040 <glcd_tiny_set_font+0x4c>)
 8002022:	787b      	ldrb	r3, [r7, #1]
 8002024:	7193      	strb	r3, [r2, #6]
	font_current.end_char = end_char;
 8002026:	4a06      	ldr	r2, [pc, #24]	; (8002040 <glcd_tiny_set_font+0x4c>)
 8002028:	7c3b      	ldrb	r3, [r7, #16]
 800202a:	71d3      	strb	r3, [r2, #7]
	font_current.table_type = STANG;
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <glcd_tiny_set_font+0x4c>)
 800202e:	2200      	movs	r2, #0
 8002030:	721a      	strb	r2, [r3, #8]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	20004fa8 	.word	0x20004fa8

08002044 <glcd_tiny_draw_char_xy>:
{
	glcd_invert_area(0,line*8,GLCD_LCD_WIDTH-1,8);
}

void glcd_tiny_draw_char_xy(uint8_t x, uint8_t y, char c)
{
 8002044:	b590      	push	{r4, r7, lr}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
 800204e:	460b      	mov	r3, r1
 8002050:	71bb      	strb	r3, [r7, #6]
 8002052:	4613      	mov	r3, r2
 8002054:	717b      	strb	r3, [r7, #5]
	uint8_t dat;
	
	/* Only works for fonts < 8 bits in height */
	
	/* Check all important bounds requirements are okay */
	if ( (y >= GLCD_LCD_HEIGHT) || ((x+font_current.width) >= GLCD_LCD_WIDTH) || (font_current.height >= 8) || font_current.table_type != STANG) {
 8002056:	79bb      	ldrb	r3, [r7, #6]
 8002058:	2b3f      	cmp	r3, #63	; 0x3f
 800205a:	d864      	bhi.n	8002126 <glcd_tiny_draw_char_xy+0xe2>
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	4a34      	ldr	r2, [pc, #208]	; (8002130 <glcd_tiny_draw_char_xy+0xec>)
 8002060:	7912      	ldrb	r2, [r2, #4]
 8002062:	4413      	add	r3, r2
 8002064:	2b7f      	cmp	r3, #127	; 0x7f
 8002066:	dc5e      	bgt.n	8002126 <glcd_tiny_draw_char_xy+0xe2>
 8002068:	4b31      	ldr	r3, [pc, #196]	; (8002130 <glcd_tiny_draw_char_xy+0xec>)
 800206a:	795b      	ldrb	r3, [r3, #5]
 800206c:	2b07      	cmp	r3, #7
 800206e:	d85a      	bhi.n	8002126 <glcd_tiny_draw_char_xy+0xe2>
 8002070:	4b2f      	ldr	r3, [pc, #188]	; (8002130 <glcd_tiny_draw_char_xy+0xec>)
 8002072:	7a1b      	ldrb	r3, [r3, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d156      	bne.n	8002126 <glcd_tiny_draw_char_xy+0xe2>
		return;
	}		
	if (c < font_current.start_char || c > font_current.end_char) {
 8002078:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <glcd_tiny_draw_char_xy+0xec>)
 800207a:	799b      	ldrb	r3, [r3, #6]
 800207c:	797a      	ldrb	r2, [r7, #5]
 800207e:	429a      	cmp	r2, r3
 8002080:	d304      	bcc.n	800208c <glcd_tiny_draw_char_xy+0x48>
 8002082:	4b2b      	ldr	r3, [pc, #172]	; (8002130 <glcd_tiny_draw_char_xy+0xec>)
 8002084:	79db      	ldrb	r3, [r3, #7]
 8002086:	797a      	ldrb	r2, [r7, #5]
 8002088:	429a      	cmp	r2, r3
 800208a:	d901      	bls.n	8002090 <glcd_tiny_draw_char_xy+0x4c>
		c = '.';
 800208c:	232e      	movs	r3, #46	; 0x2e
 800208e:	717b      	strb	r3, [r7, #5]
	}
	
	xvar = x;
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	73bb      	strb	r3, [r7, #14]
	
	for ( i = 0; i < font_current.width; i++ ) {
 8002094:	2300      	movs	r3, #0
 8002096:	73fb      	strb	r3, [r7, #15]
 8002098:	e030      	b.n	80020fc <glcd_tiny_draw_char_xy+0xb8>
#if defined(GLCD_DEVICE_AVR8)			
		dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
		dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
 800209a:	4b25      	ldr	r3, [pc, #148]	; (8002130 <glcd_tiny_draw_char_xy+0xec>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	797b      	ldrb	r3, [r7, #5]
 80020a0:	4923      	ldr	r1, [pc, #140]	; (8002130 <glcd_tiny_draw_char_xy+0xec>)
 80020a2:	7989      	ldrb	r1, [r1, #6]
 80020a4:	1a5b      	subs	r3, r3, r1
 80020a6:	4922      	ldr	r1, [pc, #136]	; (8002130 <glcd_tiny_draw_char_xy+0xec>)
 80020a8:	7909      	ldrb	r1, [r1, #4]
 80020aa:	fb01 f303 	mul.w	r3, r1, r3
 80020ae:	4619      	mov	r1, r3
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	440b      	add	r3, r1
 80020b4:	4413      	add	r3, r2
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	733b      	strb	r3, [r7, #12]
#endif
		for (yvar = 0; yvar < font_current.height; yvar++) {
 80020ba:	2300      	movs	r3, #0
 80020bc:	737b      	strb	r3, [r7, #13]
 80020be:	e012      	b.n	80020e6 <glcd_tiny_draw_char_xy+0xa2>
			glcd_set_pixel(xvar,y+yvar, (dat & (1<<yvar) ? 1 : 0) );
 80020c0:	79ba      	ldrb	r2, [r7, #6]
 80020c2:	7b7b      	ldrb	r3, [r7, #13]
 80020c4:	4413      	add	r3, r2
 80020c6:	b2d9      	uxtb	r1, r3
 80020c8:	7b3a      	ldrb	r2, [r7, #12]
 80020ca:	7b7b      	ldrb	r3, [r7, #13]
 80020cc:	fa42 f303 	asr.w	r3, r2, r3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	7bbb      	ldrb	r3, [r7, #14]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fc78 	bl	80009d0 <glcd_set_pixel>
		for (yvar = 0; yvar < font_current.height; yvar++) {
 80020e0:	7b7b      	ldrb	r3, [r7, #13]
 80020e2:	3301      	adds	r3, #1
 80020e4:	737b      	strb	r3, [r7, #13]
 80020e6:	4b12      	ldr	r3, [pc, #72]	; (8002130 <glcd_tiny_draw_char_xy+0xec>)
 80020e8:	795b      	ldrb	r3, [r3, #5]
 80020ea:	7b7a      	ldrb	r2, [r7, #13]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d3e7      	bcc.n	80020c0 <glcd_tiny_draw_char_xy+0x7c>
		}
		xvar++;
 80020f0:	7bbb      	ldrb	r3, [r7, #14]
 80020f2:	3301      	adds	r3, #1
 80020f4:	73bb      	strb	r3, [r7, #14]
	for ( i = 0; i < font_current.width; i++ ) {
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	3301      	adds	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <glcd_tiny_draw_char_xy+0xec>)
 80020fe:	791b      	ldrb	r3, [r3, #4]
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	429a      	cmp	r2, r3
 8002104:	d3c9      	bcc.n	800209a <glcd_tiny_draw_char_xy+0x56>
	}
	
	glcd_update_bbox(x, y, x+font_current.width,y+font_current.height);
 8002106:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <glcd_tiny_draw_char_xy+0xec>)
 8002108:	791a      	ldrb	r2, [r3, #4]
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	4413      	add	r3, r2
 800210e:	b2dc      	uxtb	r4, r3
 8002110:	4b07      	ldr	r3, [pc, #28]	; (8002130 <glcd_tiny_draw_char_xy+0xec>)
 8002112:	795a      	ldrb	r2, [r3, #5]
 8002114:	79bb      	ldrb	r3, [r7, #6]
 8002116:	4413      	add	r3, r2
 8002118:	b2db      	uxtb	r3, r3
 800211a:	79b9      	ldrb	r1, [r7, #6]
 800211c:	79f8      	ldrb	r0, [r7, #7]
 800211e:	4622      	mov	r2, r4
 8002120:	f7fe fba8 	bl	8000874 <glcd_update_bbox>
 8002124:	e000      	b.n	8002128 <glcd_tiny_draw_char_xy+0xe4>
		return;
 8002126:	bf00      	nop
	
}
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	bd90      	pop	{r4, r7, pc}
 800212e:	bf00      	nop
 8002130:	20004fa8 	.word	0x20004fa8

08002134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800216c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002138:	480d      	ldr	r0, [pc, #52]	; (8002170 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800213a:	490e      	ldr	r1, [pc, #56]	; (8002174 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800213c:	4a0e      	ldr	r2, [pc, #56]	; (8002178 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800213e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002140:	e002      	b.n	8002148 <LoopCopyDataInit>

08002142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002146:	3304      	adds	r3, #4

08002148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800214a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800214c:	d3f9      	bcc.n	8002142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800214e:	4a0b      	ldr	r2, [pc, #44]	; (800217c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002150:	4c0b      	ldr	r4, [pc, #44]	; (8002180 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002154:	e001      	b.n	800215a <LoopFillZerobss>

08002156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002158:	3204      	adds	r2, #4

0800215a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800215a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800215c:	d3fb      	bcc.n	8002156 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800215e:	f7ff fd03 	bl	8001b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002162:	f004 feff 	bl	8006f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002166:	f7fe fd25 	bl	8000bb4 <main>
  bx  lr    
 800216a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800216c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002174:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002178:	08008cd4 	.word	0x08008cd4
  ldr r2, =_sbss
 800217c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002180:	20005008 	.word	0x20005008

08002184 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002184:	e7fe      	b.n	8002184 <ADC_IRQHandler>
	...

08002188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800218c:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <HAL_Init+0x40>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0d      	ldr	r2, [pc, #52]	; (80021c8 <HAL_Init+0x40>)
 8002192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002196:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_Init+0x40>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <HAL_Init+0x40>)
 800219e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <HAL_Init+0x40>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a07      	ldr	r2, [pc, #28]	; (80021c8 <HAL_Init+0x40>)
 80021aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b0:	2003      	movs	r0, #3
 80021b2:	f000 f8d8 	bl	8002366 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021b6:	200f      	movs	r0, #15
 80021b8:	f7ff fb96 	bl	80018e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021bc:	f7ff fa96 	bl	80016ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023c00 	.word	0x40023c00

080021cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_IncTick+0x20>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_IncTick+0x24>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4413      	add	r3, r2
 80021dc:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <HAL_IncTick+0x24>)
 80021de:	6013      	str	r3, [r2, #0]
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000008 	.word	0x20000008
 80021f0:	20004fb4 	.word	0x20004fb4

080021f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return uwTick;
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <HAL_GetTick+0x14>)
 80021fa:	681b      	ldr	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20004fb4 	.word	0x20004fb4

0800220c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <__NVIC_SetPriorityGrouping+0x44>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002228:	4013      	ands	r3, r2
 800222a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800223c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800223e:	4a04      	ldr	r2, [pc, #16]	; (8002250 <__NVIC_SetPriorityGrouping+0x44>)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	60d3      	str	r3, [r2, #12]
}
 8002244:	bf00      	nop
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <__NVIC_GetPriorityGrouping+0x18>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	0a1b      	lsrs	r3, r3, #8
 800225e:	f003 0307 	and.w	r3, r3, #7
}
 8002262:	4618      	mov	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	2b00      	cmp	r3, #0
 8002280:	db0b      	blt.n	800229a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	f003 021f 	and.w	r2, r3, #31
 8002288:	4907      	ldr	r1, [pc, #28]	; (80022a8 <__NVIC_EnableIRQ+0x38>)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	2001      	movs	r0, #1
 8002292:	fa00 f202 	lsl.w	r2, r0, r2
 8002296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000e100 	.word	0xe000e100

080022ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	6039      	str	r1, [r7, #0]
 80022b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	db0a      	blt.n	80022d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	490c      	ldr	r1, [pc, #48]	; (80022f8 <__NVIC_SetPriority+0x4c>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	0112      	lsls	r2, r2, #4
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	440b      	add	r3, r1
 80022d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d4:	e00a      	b.n	80022ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	4908      	ldr	r1, [pc, #32]	; (80022fc <__NVIC_SetPriority+0x50>)
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	3b04      	subs	r3, #4
 80022e4:	0112      	lsls	r2, r2, #4
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	440b      	add	r3, r1
 80022ea:	761a      	strb	r2, [r3, #24]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	e000e100 	.word	0xe000e100
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002300:	b480      	push	{r7}
 8002302:	b089      	sub	sp, #36	; 0x24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f1c3 0307 	rsb	r3, r3, #7
 800231a:	2b04      	cmp	r3, #4
 800231c:	bf28      	it	cs
 800231e:	2304      	movcs	r3, #4
 8002320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3304      	adds	r3, #4
 8002326:	2b06      	cmp	r3, #6
 8002328:	d902      	bls.n	8002330 <NVIC_EncodePriority+0x30>
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3b03      	subs	r3, #3
 800232e:	e000      	b.n	8002332 <NVIC_EncodePriority+0x32>
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	f04f 32ff 	mov.w	r2, #4294967295
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43da      	mvns	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	401a      	ands	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002348:	f04f 31ff 	mov.w	r1, #4294967295
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	fa01 f303 	lsl.w	r3, r1, r3
 8002352:	43d9      	mvns	r1, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002358:	4313      	orrs	r3, r2
         );
}
 800235a:	4618      	mov	r0, r3
 800235c:	3724      	adds	r7, #36	; 0x24
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff ff4c 	bl	800220c <__NVIC_SetPriorityGrouping>
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800238e:	f7ff ff61 	bl	8002254 <__NVIC_GetPriorityGrouping>
 8002392:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	68b9      	ldr	r1, [r7, #8]
 8002398:	6978      	ldr	r0, [r7, #20]
 800239a:	f7ff ffb1 	bl	8002300 <NVIC_EncodePriority>
 800239e:	4602      	mov	r2, r0
 80023a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a4:	4611      	mov	r1, r2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff ff80 	bl	80022ac <__NVIC_SetPriority>
}
 80023ac:	bf00      	nop
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff ff54 	bl	8002270 <__NVIC_EnableIRQ>
}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b089      	sub	sp, #36	; 0x24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
 80023ea:	e165      	b.n	80026b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023ec:	2201      	movs	r2, #1
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4013      	ands	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	429a      	cmp	r2, r3
 8002406:	f040 8154 	bne.w	80026b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b01      	cmp	r3, #1
 8002414:	d005      	beq.n	8002422 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800241e:	2b02      	cmp	r3, #2
 8002420:	d130      	bne.n	8002484 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	2203      	movs	r2, #3
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002458:	2201      	movs	r2, #1
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	f003 0201 	and.w	r2, r3, #1
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	2b03      	cmp	r3, #3
 800248e:	d017      	beq.n	80024c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	2203      	movs	r2, #3
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d123      	bne.n	8002514 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	08da      	lsrs	r2, r3, #3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3208      	adds	r2, #8
 80024d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	220f      	movs	r2, #15
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	08da      	lsrs	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3208      	adds	r2, #8
 800250e:	69b9      	ldr	r1, [r7, #24]
 8002510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	2203      	movs	r2, #3
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 0203 	and.w	r2, r3, #3
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80ae 	beq.w	80026b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	4b5d      	ldr	r3, [pc, #372]	; (80026d0 <HAL_GPIO_Init+0x300>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	4a5c      	ldr	r2, [pc, #368]	; (80026d0 <HAL_GPIO_Init+0x300>)
 8002560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002564:	6453      	str	r3, [r2, #68]	; 0x44
 8002566:	4b5a      	ldr	r3, [pc, #360]	; (80026d0 <HAL_GPIO_Init+0x300>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002572:	4a58      	ldr	r2, [pc, #352]	; (80026d4 <HAL_GPIO_Init+0x304>)
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	089b      	lsrs	r3, r3, #2
 8002578:	3302      	adds	r3, #2
 800257a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	220f      	movs	r2, #15
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a4f      	ldr	r2, [pc, #316]	; (80026d8 <HAL_GPIO_Init+0x308>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d025      	beq.n	80025ea <HAL_GPIO_Init+0x21a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a4e      	ldr	r2, [pc, #312]	; (80026dc <HAL_GPIO_Init+0x30c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d01f      	beq.n	80025e6 <HAL_GPIO_Init+0x216>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a4d      	ldr	r2, [pc, #308]	; (80026e0 <HAL_GPIO_Init+0x310>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d019      	beq.n	80025e2 <HAL_GPIO_Init+0x212>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a4c      	ldr	r2, [pc, #304]	; (80026e4 <HAL_GPIO_Init+0x314>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d013      	beq.n	80025de <HAL_GPIO_Init+0x20e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a4b      	ldr	r2, [pc, #300]	; (80026e8 <HAL_GPIO_Init+0x318>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d00d      	beq.n	80025da <HAL_GPIO_Init+0x20a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a4a      	ldr	r2, [pc, #296]	; (80026ec <HAL_GPIO_Init+0x31c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d007      	beq.n	80025d6 <HAL_GPIO_Init+0x206>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a49      	ldr	r2, [pc, #292]	; (80026f0 <HAL_GPIO_Init+0x320>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d101      	bne.n	80025d2 <HAL_GPIO_Init+0x202>
 80025ce:	2306      	movs	r3, #6
 80025d0:	e00c      	b.n	80025ec <HAL_GPIO_Init+0x21c>
 80025d2:	2307      	movs	r3, #7
 80025d4:	e00a      	b.n	80025ec <HAL_GPIO_Init+0x21c>
 80025d6:	2305      	movs	r3, #5
 80025d8:	e008      	b.n	80025ec <HAL_GPIO_Init+0x21c>
 80025da:	2304      	movs	r3, #4
 80025dc:	e006      	b.n	80025ec <HAL_GPIO_Init+0x21c>
 80025de:	2303      	movs	r3, #3
 80025e0:	e004      	b.n	80025ec <HAL_GPIO_Init+0x21c>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e002      	b.n	80025ec <HAL_GPIO_Init+0x21c>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_GPIO_Init+0x21c>
 80025ea:	2300      	movs	r3, #0
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	f002 0203 	and.w	r2, r2, #3
 80025f2:	0092      	lsls	r2, r2, #2
 80025f4:	4093      	lsls	r3, r2
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025fc:	4935      	ldr	r1, [pc, #212]	; (80026d4 <HAL_GPIO_Init+0x304>)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	089b      	lsrs	r3, r3, #2
 8002602:	3302      	adds	r3, #2
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800260a:	4b3a      	ldr	r3, [pc, #232]	; (80026f4 <HAL_GPIO_Init+0x324>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800262e:	4a31      	ldr	r2, [pc, #196]	; (80026f4 <HAL_GPIO_Init+0x324>)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002634:	4b2f      	ldr	r3, [pc, #188]	; (80026f4 <HAL_GPIO_Init+0x324>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002658:	4a26      	ldr	r2, [pc, #152]	; (80026f4 <HAL_GPIO_Init+0x324>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800265e:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <HAL_GPIO_Init+0x324>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002682:	4a1c      	ldr	r2, [pc, #112]	; (80026f4 <HAL_GPIO_Init+0x324>)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002688:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <HAL_GPIO_Init+0x324>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026ac:	4a11      	ldr	r2, [pc, #68]	; (80026f4 <HAL_GPIO_Init+0x324>)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3301      	adds	r3, #1
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b0f      	cmp	r3, #15
 80026bc:	f67f ae96 	bls.w	80023ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	3724      	adds	r7, #36	; 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40013800 	.word	0x40013800
 80026d8:	40020000 	.word	0x40020000
 80026dc:	40020400 	.word	0x40020400
 80026e0:	40020800 	.word	0x40020800
 80026e4:	40020c00 	.word	0x40020c00
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40021400 	.word	0x40021400
 80026f0:	40021800 	.word	0x40021800
 80026f4:	40013c00 	.word	0x40013c00

080026f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	807b      	strh	r3, [r7, #2]
 8002704:	4613      	mov	r3, r2
 8002706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002708:	787b      	ldrb	r3, [r7, #1]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800270e:	887a      	ldrh	r2, [r7, #2]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002714:	e003      	b.n	800271e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002716:	887b      	ldrh	r3, [r7, #2]
 8002718:	041a      	lsls	r2, r3, #16
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	619a      	str	r2, [r3, #24]
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0cc      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002740:	4b68      	ldr	r3, [pc, #416]	; (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d90c      	bls.n	8002768 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274e:	4b65      	ldr	r3, [pc, #404]	; (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b63      	ldr	r3, [pc, #396]	; (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0b8      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d020      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002780:	4b59      	ldr	r3, [pc, #356]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4a58      	ldr	r2, [pc, #352]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800278a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002798:	4b53      	ldr	r3, [pc, #332]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a52      	ldr	r2, [pc, #328]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a4:	4b50      	ldr	r3, [pc, #320]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	494d      	ldr	r1, [pc, #308]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d044      	beq.n	800284c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d107      	bne.n	80027da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ca:	4b47      	ldr	r3, [pc, #284]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d119      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e07f      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d003      	beq.n	80027ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d107      	bne.n	80027fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ea:	4b3f      	ldr	r3, [pc, #252]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e06f      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fa:	4b3b      	ldr	r3, [pc, #236]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e067      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800280a:	4b37      	ldr	r3, [pc, #220]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f023 0203 	bic.w	r2, r3, #3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4934      	ldr	r1, [pc, #208]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002818:	4313      	orrs	r3, r2
 800281a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800281c:	f7ff fcea 	bl	80021f4 <HAL_GetTick>
 8002820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	e00a      	b.n	800283a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002824:	f7ff fce6 	bl	80021f4 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002832:	4293      	cmp	r3, r2
 8002834:	d901      	bls.n	800283a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e04f      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 020c 	and.w	r2, r3, #12
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	429a      	cmp	r2, r3
 800284a:	d1eb      	bne.n	8002824 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800284c:	4b25      	ldr	r3, [pc, #148]	; (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 030f 	and.w	r3, r3, #15
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d20c      	bcs.n	8002874 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285a:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002862:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d001      	beq.n	8002874 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e032      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d008      	beq.n	8002892 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002880:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4916      	ldr	r1, [pc, #88]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	4313      	orrs	r3, r2
 8002890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d009      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	490e      	ldr	r1, [pc, #56]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028b2:	f000 f887 	bl	80029c4 <HAL_RCC_GetSysClockFreq>
 80028b6:	4602      	mov	r2, r0
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	490a      	ldr	r1, [pc, #40]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 80028c4:	5ccb      	ldrb	r3, [r1, r3]
 80028c6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ca:	4a09      	ldr	r2, [pc, #36]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ce:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <HAL_RCC_ClockConfig+0x1c8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff f808 	bl	80018e8 <HAL_InitTick>

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40023c00 	.word	0x40023c00
 80028e8:	40023800 	.word	0x40023800
 80028ec:	08008b60 	.word	0x08008b60
 80028f0:	20000000 	.word	0x20000000
 80028f4:	20000004 	.word	0x20000004

080028f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028fc:	4b03      	ldr	r3, [pc, #12]	; (800290c <HAL_RCC_GetHCLKFreq+0x14>)
 80028fe:	681b      	ldr	r3, [r3, #0]
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	20000000 	.word	0x20000000

08002910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002914:	f7ff fff0 	bl	80028f8 <HAL_RCC_GetHCLKFreq>
 8002918:	4602      	mov	r2, r0
 800291a:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	0a9b      	lsrs	r3, r3, #10
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	4903      	ldr	r1, [pc, #12]	; (8002934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002926:	5ccb      	ldrb	r3, [r1, r3]
 8002928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800292c:	4618      	mov	r0, r3
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40023800 	.word	0x40023800
 8002934:	08008b70 	.word	0x08008b70

08002938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800293c:	f7ff ffdc 	bl	80028f8 <HAL_RCC_GetHCLKFreq>
 8002940:	4602      	mov	r2, r0
 8002942:	4b05      	ldr	r3, [pc, #20]	; (8002958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	0b5b      	lsrs	r3, r3, #13
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	4903      	ldr	r1, [pc, #12]	; (800295c <HAL_RCC_GetPCLK2Freq+0x24>)
 800294e:	5ccb      	ldrb	r3, [r1, r3]
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002954:	4618      	mov	r0, r3
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40023800 	.word	0x40023800
 800295c:	08008b70 	.word	0x08008b70

08002960 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	220f      	movs	r2, #15
 800296e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002970:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_RCC_GetClockConfig+0x5c>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0203 	and.w	r2, r3, #3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800297c:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <HAL_RCC_GetClockConfig+0x5c>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <HAL_RCC_GetClockConfig+0x5c>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002994:	4b09      	ldr	r3, [pc, #36]	; (80029bc <HAL_RCC_GetClockConfig+0x5c>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	08db      	lsrs	r3, r3, #3
 800299a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029a2:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <HAL_RCC_GetClockConfig+0x60>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 020f 	and.w	r2, r3, #15
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	601a      	str	r2, [r3, #0]
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40023c00 	.word	0x40023c00

080029c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c8:	b088      	sub	sp, #32
 80029ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029e0:	4bce      	ldr	r3, [pc, #824]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x358>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 030c 	and.w	r3, r3, #12
 80029e8:	2b0c      	cmp	r3, #12
 80029ea:	f200 818d 	bhi.w	8002d08 <HAL_RCC_GetSysClockFreq+0x344>
 80029ee:	a201      	add	r2, pc, #4	; (adr r2, 80029f4 <HAL_RCC_GetSysClockFreq+0x30>)
 80029f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f4:	08002a29 	.word	0x08002a29
 80029f8:	08002d09 	.word	0x08002d09
 80029fc:	08002d09 	.word	0x08002d09
 8002a00:	08002d09 	.word	0x08002d09
 8002a04:	08002a2f 	.word	0x08002a2f
 8002a08:	08002d09 	.word	0x08002d09
 8002a0c:	08002d09 	.word	0x08002d09
 8002a10:	08002d09 	.word	0x08002d09
 8002a14:	08002a35 	.word	0x08002a35
 8002a18:	08002d09 	.word	0x08002d09
 8002a1c:	08002d09 	.word	0x08002d09
 8002a20:	08002d09 	.word	0x08002d09
 8002a24:	08002ba9 	.word	0x08002ba9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a28:	4bbd      	ldr	r3, [pc, #756]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002a2a:	61bb      	str	r3, [r7, #24]
       break;
 8002a2c:	e16f      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a2e:	4bbd      	ldr	r3, [pc, #756]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x360>)
 8002a30:	61bb      	str	r3, [r7, #24]
      break;
 8002a32:	e16c      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a34:	4bb9      	ldr	r3, [pc, #740]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x358>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a3c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a3e:	4bb7      	ldr	r3, [pc, #732]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x358>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d053      	beq.n	8002af2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a4a:	4bb4      	ldr	r3, [pc, #720]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x358>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	099b      	lsrs	r3, r3, #6
 8002a50:	461a      	mov	r2, r3
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a5a:	f04f 0100 	mov.w	r1, #0
 8002a5e:	ea02 0400 	and.w	r4, r2, r0
 8002a62:	603c      	str	r4, [r7, #0]
 8002a64:	400b      	ands	r3, r1
 8002a66:	607b      	str	r3, [r7, #4]
 8002a68:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	4629      	mov	r1, r5
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	f04f 0300 	mov.w	r3, #0
 8002a78:	014b      	lsls	r3, r1, #5
 8002a7a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a7e:	0142      	lsls	r2, r0, #5
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	4623      	mov	r3, r4
 8002a86:	1ac0      	subs	r0, r0, r3
 8002a88:	462b      	mov	r3, r5
 8002a8a:	eb61 0103 	sbc.w	r1, r1, r3
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	018b      	lsls	r3, r1, #6
 8002a98:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a9c:	0182      	lsls	r2, r0, #6
 8002a9e:	1a12      	subs	r2, r2, r0
 8002aa0:	eb63 0301 	sbc.w	r3, r3, r1
 8002aa4:	f04f 0000 	mov.w	r0, #0
 8002aa8:	f04f 0100 	mov.w	r1, #0
 8002aac:	00d9      	lsls	r1, r3, #3
 8002aae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ab2:	00d0      	lsls	r0, r2, #3
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4621      	mov	r1, r4
 8002aba:	1852      	adds	r2, r2, r1
 8002abc:	4629      	mov	r1, r5
 8002abe:	eb43 0101 	adc.w	r1, r3, r1
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	f04f 0000 	mov.w	r0, #0
 8002ac8:	f04f 0100 	mov.w	r1, #0
 8002acc:	0259      	lsls	r1, r3, #9
 8002ace:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002ad2:	0250      	lsls	r0, r2, #9
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4610      	mov	r0, r2
 8002ada:	4619      	mov	r1, r3
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	f7fd fbe4 	bl	80002b0 <__aeabi_uldivmod>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4613      	mov	r3, r2
 8002aee:	61fb      	str	r3, [r7, #28]
 8002af0:	e04c      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af2:	4b8a      	ldr	r3, [pc, #552]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x358>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	099b      	lsrs	r3, r3, #6
 8002af8:	461a      	mov	r2, r3
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b02:	f04f 0100 	mov.w	r1, #0
 8002b06:	ea02 0a00 	and.w	sl, r2, r0
 8002b0a:	ea03 0b01 	and.w	fp, r3, r1
 8002b0e:	4650      	mov	r0, sl
 8002b10:	4659      	mov	r1, fp
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	014b      	lsls	r3, r1, #5
 8002b1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b20:	0142      	lsls	r2, r0, #5
 8002b22:	4610      	mov	r0, r2
 8002b24:	4619      	mov	r1, r3
 8002b26:	ebb0 000a 	subs.w	r0, r0, sl
 8002b2a:	eb61 010b 	sbc.w	r1, r1, fp
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	018b      	lsls	r3, r1, #6
 8002b38:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b3c:	0182      	lsls	r2, r0, #6
 8002b3e:	1a12      	subs	r2, r2, r0
 8002b40:	eb63 0301 	sbc.w	r3, r3, r1
 8002b44:	f04f 0000 	mov.w	r0, #0
 8002b48:	f04f 0100 	mov.w	r1, #0
 8002b4c:	00d9      	lsls	r1, r3, #3
 8002b4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b52:	00d0      	lsls	r0, r2, #3
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	eb12 020a 	adds.w	r2, r2, sl
 8002b5c:	eb43 030b 	adc.w	r3, r3, fp
 8002b60:	f04f 0000 	mov.w	r0, #0
 8002b64:	f04f 0100 	mov.w	r1, #0
 8002b68:	0299      	lsls	r1, r3, #10
 8002b6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b6e:	0290      	lsls	r0, r2, #10
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4610      	mov	r0, r2
 8002b76:	4619      	mov	r1, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	f7fd fb96 	bl	80002b0 <__aeabi_uldivmod>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4613      	mov	r3, r2
 8002b8a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b8c:	4b63      	ldr	r3, [pc, #396]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x358>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	0c1b      	lsrs	r3, r3, #16
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	3301      	adds	r3, #1
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002b9c:	69fa      	ldr	r2, [r7, #28]
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba4:	61bb      	str	r3, [r7, #24]
      break;
 8002ba6:	e0b2      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ba8:	4b5c      	ldr	r3, [pc, #368]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x358>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bb0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bb2:	4b5a      	ldr	r3, [pc, #360]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x358>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d04d      	beq.n	8002c5a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bbe:	4b57      	ldr	r3, [pc, #348]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x358>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	099b      	lsrs	r3, r3, #6
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bce:	f04f 0100 	mov.w	r1, #0
 8002bd2:	ea02 0800 	and.w	r8, r2, r0
 8002bd6:	ea03 0901 	and.w	r9, r3, r1
 8002bda:	4640      	mov	r0, r8
 8002bdc:	4649      	mov	r1, r9
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	014b      	lsls	r3, r1, #5
 8002be8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bec:	0142      	lsls	r2, r0, #5
 8002bee:	4610      	mov	r0, r2
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	ebb0 0008 	subs.w	r0, r0, r8
 8002bf6:	eb61 0109 	sbc.w	r1, r1, r9
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	018b      	lsls	r3, r1, #6
 8002c04:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c08:	0182      	lsls	r2, r0, #6
 8002c0a:	1a12      	subs	r2, r2, r0
 8002c0c:	eb63 0301 	sbc.w	r3, r3, r1
 8002c10:	f04f 0000 	mov.w	r0, #0
 8002c14:	f04f 0100 	mov.w	r1, #0
 8002c18:	00d9      	lsls	r1, r3, #3
 8002c1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c1e:	00d0      	lsls	r0, r2, #3
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	eb12 0208 	adds.w	r2, r2, r8
 8002c28:	eb43 0309 	adc.w	r3, r3, r9
 8002c2c:	f04f 0000 	mov.w	r0, #0
 8002c30:	f04f 0100 	mov.w	r1, #0
 8002c34:	0259      	lsls	r1, r3, #9
 8002c36:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c3a:	0250      	lsls	r0, r2, #9
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	461a      	mov	r2, r3
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	f7fd fb30 	bl	80002b0 <__aeabi_uldivmod>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4613      	mov	r3, r2
 8002c56:	61fb      	str	r3, [r7, #28]
 8002c58:	e04a      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c5a:	4b30      	ldr	r3, [pc, #192]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x358>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	099b      	lsrs	r3, r3, #6
 8002c60:	461a      	mov	r2, r3
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c6a:	f04f 0100 	mov.w	r1, #0
 8002c6e:	ea02 0400 	and.w	r4, r2, r0
 8002c72:	ea03 0501 	and.w	r5, r3, r1
 8002c76:	4620      	mov	r0, r4
 8002c78:	4629      	mov	r1, r5
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	014b      	lsls	r3, r1, #5
 8002c84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c88:	0142      	lsls	r2, r0, #5
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	1b00      	subs	r0, r0, r4
 8002c90:	eb61 0105 	sbc.w	r1, r1, r5
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	018b      	lsls	r3, r1, #6
 8002c9e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ca2:	0182      	lsls	r2, r0, #6
 8002ca4:	1a12      	subs	r2, r2, r0
 8002ca6:	eb63 0301 	sbc.w	r3, r3, r1
 8002caa:	f04f 0000 	mov.w	r0, #0
 8002cae:	f04f 0100 	mov.w	r1, #0
 8002cb2:	00d9      	lsls	r1, r3, #3
 8002cb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cb8:	00d0      	lsls	r0, r2, #3
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	1912      	adds	r2, r2, r4
 8002cc0:	eb45 0303 	adc.w	r3, r5, r3
 8002cc4:	f04f 0000 	mov.w	r0, #0
 8002cc8:	f04f 0100 	mov.w	r1, #0
 8002ccc:	0299      	lsls	r1, r3, #10
 8002cce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002cd2:	0290      	lsls	r0, r2, #10
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	f7fd fae4 	bl	80002b0 <__aeabi_uldivmod>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4613      	mov	r3, r2
 8002cee:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002cf0:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x358>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	0f1b      	lsrs	r3, r3, #28
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002cfc:	69fa      	ldr	r2, [r7, #28]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d04:	61bb      	str	r3, [r7, #24]
      break;
 8002d06:	e002      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d0a:	61bb      	str	r3, [r7, #24]
      break;
 8002d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d0e:	69bb      	ldr	r3, [r7, #24]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3720      	adds	r7, #32
 8002d14:	46bd      	mov	sp, r7
 8002d16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	00f42400 	.word	0x00f42400
 8002d24:	007a1200 	.word	0x007a1200

08002d28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e28d      	b.n	8003256 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8083 	beq.w	8002e4e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d48:	4b94      	ldr	r3, [pc, #592]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d019      	beq.n	8002d88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d54:	4b91      	ldr	r3, [pc, #580]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d106      	bne.n	8002d6e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d60:	4b8e      	ldr	r3, [pc, #568]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d6c:	d00c      	beq.n	8002d88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d6e:	4b8b      	ldr	r3, [pc, #556]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d76:	2b0c      	cmp	r3, #12
 8002d78:	d112      	bne.n	8002da0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d7a:	4b88      	ldr	r3, [pc, #544]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d86:	d10b      	bne.n	8002da0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d88:	4b84      	ldr	r3, [pc, #528]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d05b      	beq.n	8002e4c <HAL_RCC_OscConfig+0x124>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d157      	bne.n	8002e4c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e25a      	b.n	8003256 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da8:	d106      	bne.n	8002db8 <HAL_RCC_OscConfig+0x90>
 8002daa:	4b7c      	ldr	r3, [pc, #496]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a7b      	ldr	r2, [pc, #492]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	e01d      	b.n	8002df4 <HAL_RCC_OscConfig+0xcc>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCC_OscConfig+0xb4>
 8002dc2:	4b76      	ldr	r3, [pc, #472]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a75      	ldr	r2, [pc, #468]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	4b73      	ldr	r3, [pc, #460]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a72      	ldr	r2, [pc, #456]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e00b      	b.n	8002df4 <HAL_RCC_OscConfig+0xcc>
 8002ddc:	4b6f      	ldr	r3, [pc, #444]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a6e      	ldr	r2, [pc, #440]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	4b6c      	ldr	r3, [pc, #432]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a6b      	ldr	r2, [pc, #428]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d013      	beq.n	8002e24 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7ff f9fa 	bl	80021f4 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e04:	f7ff f9f6 	bl	80021f4 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	; 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e21f      	b.n	8003256 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e16:	4b61      	ldr	r3, [pc, #388]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0xdc>
 8002e22:	e014      	b.n	8002e4e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7ff f9e6 	bl	80021f4 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e2c:	f7ff f9e2 	bl	80021f4 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b64      	cmp	r3, #100	; 0x64
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e20b      	b.n	8003256 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e3e:	4b57      	ldr	r3, [pc, #348]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x104>
 8002e4a:	e000      	b.n	8002e4e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d06f      	beq.n	8002f3a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e5a:	4b50      	ldr	r3, [pc, #320]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d017      	beq.n	8002e96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e66:	4b4d      	ldr	r3, [pc, #308]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d105      	bne.n	8002e7e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e72:	4b4a      	ldr	r3, [pc, #296]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00b      	beq.n	8002e96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e7e:	4b47      	ldr	r3, [pc, #284]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e86:	2b0c      	cmp	r3, #12
 8002e88:	d11c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8a:	4b44      	ldr	r3, [pc, #272]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d116      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e96:	4b41      	ldr	r3, [pc, #260]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_RCC_OscConfig+0x186>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d001      	beq.n	8002eae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e1d3      	b.n	8003256 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eae:	4b3b      	ldr	r3, [pc, #236]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4937      	ldr	r1, [pc, #220]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec2:	e03a      	b.n	8002f3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d020      	beq.n	8002f0e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ecc:	4b34      	ldr	r3, [pc, #208]	; (8002fa0 <HAL_RCC_OscConfig+0x278>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed2:	f7ff f98f 	bl	80021f4 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eda:	f7ff f98b 	bl	80021f4 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e1b4      	b.n	8003256 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eec:	4b2b      	ldr	r3, [pc, #172]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef8:	4b28      	ldr	r3, [pc, #160]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4925      	ldr	r1, [pc, #148]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]
 8002f0c:	e015      	b.n	8002f3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0e:	4b24      	ldr	r3, [pc, #144]	; (8002fa0 <HAL_RCC_OscConfig+0x278>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7ff f96e 	bl	80021f4 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f1c:	f7ff f96a 	bl	80021f4 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e193      	b.n	8003256 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2e:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d036      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d016      	beq.n	8002f7c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f4e:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f54:	f7ff f94e 	bl	80021f4 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f5c:	f7ff f94a 	bl	80021f4 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e173      	b.n	8003256 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6e:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0x234>
 8002f7a:	e01b      	b.n	8002fb4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f7c:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <HAL_RCC_OscConfig+0x27c>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f82:	f7ff f937 	bl	80021f4 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f88:	e00e      	b.n	8002fa8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f8a:	f7ff f933 	bl	80021f4 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d907      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e15c      	b.n	8003256 <HAL_RCC_OscConfig+0x52e>
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	42470000 	.word	0x42470000
 8002fa4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa8:	4b8a      	ldr	r3, [pc, #552]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 8002faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1ea      	bne.n	8002f8a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 8097 	beq.w	80030f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc6:	4b83      	ldr	r3, [pc, #524]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10f      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	4b7f      	ldr	r3, [pc, #508]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	4a7e      	ldr	r2, [pc, #504]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 8002fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe2:	4b7c      	ldr	r3, [pc, #496]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff2:	4b79      	ldr	r3, [pc, #484]	; (80031d8 <HAL_RCC_OscConfig+0x4b0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d118      	bne.n	8003030 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ffe:	4b76      	ldr	r3, [pc, #472]	; (80031d8 <HAL_RCC_OscConfig+0x4b0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a75      	ldr	r2, [pc, #468]	; (80031d8 <HAL_RCC_OscConfig+0x4b0>)
 8003004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800300a:	f7ff f8f3 	bl	80021f4 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003012:	f7ff f8ef 	bl	80021f4 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e118      	b.n	8003256 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003024:	4b6c      	ldr	r3, [pc, #432]	; (80031d8 <HAL_RCC_OscConfig+0x4b0>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d106      	bne.n	8003046 <HAL_RCC_OscConfig+0x31e>
 8003038:	4b66      	ldr	r3, [pc, #408]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	4a65      	ldr	r2, [pc, #404]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	6713      	str	r3, [r2, #112]	; 0x70
 8003044:	e01c      	b.n	8003080 <HAL_RCC_OscConfig+0x358>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2b05      	cmp	r3, #5
 800304c:	d10c      	bne.n	8003068 <HAL_RCC_OscConfig+0x340>
 800304e:	4b61      	ldr	r3, [pc, #388]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003052:	4a60      	ldr	r2, [pc, #384]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 8003054:	f043 0304 	orr.w	r3, r3, #4
 8003058:	6713      	str	r3, [r2, #112]	; 0x70
 800305a:	4b5e      	ldr	r3, [pc, #376]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	4a5d      	ldr	r2, [pc, #372]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	6713      	str	r3, [r2, #112]	; 0x70
 8003066:	e00b      	b.n	8003080 <HAL_RCC_OscConfig+0x358>
 8003068:	4b5a      	ldr	r3, [pc, #360]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306c:	4a59      	ldr	r2, [pc, #356]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 800306e:	f023 0301 	bic.w	r3, r3, #1
 8003072:	6713      	str	r3, [r2, #112]	; 0x70
 8003074:	4b57      	ldr	r3, [pc, #348]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003078:	4a56      	ldr	r2, [pc, #344]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 800307a:	f023 0304 	bic.w	r3, r3, #4
 800307e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d015      	beq.n	80030b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003088:	f7ff f8b4 	bl	80021f4 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003090:	f7ff f8b0 	bl	80021f4 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	; 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e0d7      	b.n	8003256 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a6:	4b4b      	ldr	r3, [pc, #300]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0ee      	beq.n	8003090 <HAL_RCC_OscConfig+0x368>
 80030b2:	e014      	b.n	80030de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b4:	f7ff f89e 	bl	80021f4 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030bc:	f7ff f89a 	bl	80021f4 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e0c1      	b.n	8003256 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d2:	4b40      	ldr	r3, [pc, #256]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1ee      	bne.n	80030bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030de:	7dfb      	ldrb	r3, [r7, #23]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d105      	bne.n	80030f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e4:	4b3b      	ldr	r3, [pc, #236]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	4a3a      	ldr	r2, [pc, #232]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 80030ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80ad 	beq.w	8003254 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030fa:	4b36      	ldr	r3, [pc, #216]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b08      	cmp	r3, #8
 8003104:	d060      	beq.n	80031c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d145      	bne.n	800319a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310e:	4b33      	ldr	r3, [pc, #204]	; (80031dc <HAL_RCC_OscConfig+0x4b4>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7ff f86e 	bl	80021f4 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311c:	f7ff f86a 	bl	80021f4 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e093      	b.n	8003256 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312e:	4b29      	ldr	r3, [pc, #164]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69da      	ldr	r2, [r3, #28]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	019b      	lsls	r3, r3, #6
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	085b      	lsrs	r3, r3, #1
 8003152:	3b01      	subs	r3, #1
 8003154:	041b      	lsls	r3, r3, #16
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	061b      	lsls	r3, r3, #24
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	071b      	lsls	r3, r3, #28
 8003166:	491b      	ldr	r1, [pc, #108]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 8003168:	4313      	orrs	r3, r2
 800316a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800316c:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <HAL_RCC_OscConfig+0x4b4>)
 800316e:	2201      	movs	r2, #1
 8003170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003172:	f7ff f83f 	bl	80021f4 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317a:	f7ff f83b 	bl	80021f4 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e064      	b.n	8003256 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318c:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0f0      	beq.n	800317a <HAL_RCC_OscConfig+0x452>
 8003198:	e05c      	b.n	8003254 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319a:	4b10      	ldr	r3, [pc, #64]	; (80031dc <HAL_RCC_OscConfig+0x4b4>)
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7ff f828 	bl	80021f4 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a8:	f7ff f824 	bl	80021f4 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e04d      	b.n	8003256 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ba:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x480>
 80031c6:	e045      	b.n	8003254 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d107      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e040      	b.n	8003256 <HAL_RCC_OscConfig+0x52e>
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40007000 	.word	0x40007000
 80031dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031e0:	4b1f      	ldr	r3, [pc, #124]	; (8003260 <HAL_RCC_OscConfig+0x538>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d030      	beq.n	8003250 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d129      	bne.n	8003250 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003206:	429a      	cmp	r2, r3
 8003208:	d122      	bne.n	8003250 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003210:	4013      	ands	r3, r2
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003216:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003218:	4293      	cmp	r3, r2
 800321a:	d119      	bne.n	8003250 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003226:	085b      	lsrs	r3, r3, #1
 8003228:	3b01      	subs	r3, #1
 800322a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800322c:	429a      	cmp	r2, r3
 800322e:	d10f      	bne.n	8003250 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800323c:	429a      	cmp	r2, r3
 800323e:	d107      	bne.n	8003250 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800324c:	429a      	cmp	r2, r3
 800324e:	d001      	beq.n	8003254 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e000      	b.n	8003256 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40023800 	.word	0x40023800

08003264 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e07b      	b.n	800336e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	2b00      	cmp	r3, #0
 800327c:	d108      	bne.n	8003290 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003286:	d009      	beq.n	800329c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	61da      	str	r2, [r3, #28]
 800328e:	e005      	b.n	800329c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7fe fa44 	bl	8001744 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003320:	ea42 0103 	orr.w	r1, r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003328:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	0c1b      	lsrs	r3, r3, #16
 800333a:	f003 0104 	and.w	r1, r3, #4
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	f003 0210 	and.w	r2, r3, #16
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69da      	ldr	r2, [r3, #28]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800335c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b088      	sub	sp, #32
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	603b      	str	r3, [r7, #0]
 8003382:	4613      	mov	r3, r2
 8003384:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <HAL_SPI_Transmit+0x22>
 8003394:	2302      	movs	r3, #2
 8003396:	e126      	b.n	80035e6 <HAL_SPI_Transmit+0x270>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033a0:	f7fe ff28 	bl	80021f4 <HAL_GetTick>
 80033a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80033a6:	88fb      	ldrh	r3, [r7, #6]
 80033a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d002      	beq.n	80033bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80033b6:	2302      	movs	r3, #2
 80033b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033ba:	e10b      	b.n	80035d4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <HAL_SPI_Transmit+0x52>
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d102      	bne.n	80033ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033cc:	e102      	b.n	80035d4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2203      	movs	r2, #3
 80033d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	88fa      	ldrh	r2, [r7, #6]
 80033e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	88fa      	ldrh	r2, [r7, #6]
 80033ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003414:	d10f      	bne.n	8003436 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003424:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003434:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003440:	2b40      	cmp	r3, #64	; 0x40
 8003442:	d007      	beq.n	8003454 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003452:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800345c:	d14b      	bne.n	80034f6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d002      	beq.n	800346c <HAL_SPI_Transmit+0xf6>
 8003466:	8afb      	ldrh	r3, [r7, #22]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d13e      	bne.n	80034ea <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	881a      	ldrh	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	1c9a      	adds	r2, r3, #2
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003490:	e02b      	b.n	80034ea <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b02      	cmp	r3, #2
 800349e:	d112      	bne.n	80034c6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	881a      	ldrh	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b0:	1c9a      	adds	r2, r3, #2
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80034c4:	e011      	b.n	80034ea <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034c6:	f7fe fe95 	bl	80021f4 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d803      	bhi.n	80034de <HAL_SPI_Transmit+0x168>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034dc:	d102      	bne.n	80034e4 <HAL_SPI_Transmit+0x16e>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d102      	bne.n	80034ea <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034e8:	e074      	b.n	80035d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1ce      	bne.n	8003492 <HAL_SPI_Transmit+0x11c>
 80034f4:	e04c      	b.n	8003590 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <HAL_SPI_Transmit+0x18e>
 80034fe:	8afb      	ldrh	r3, [r7, #22]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d140      	bne.n	8003586 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	330c      	adds	r3, #12
 800350e:	7812      	ldrb	r2, [r2, #0]
 8003510:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800352a:	e02c      	b.n	8003586 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b02      	cmp	r3, #2
 8003538:	d113      	bne.n	8003562 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	330c      	adds	r3, #12
 8003544:	7812      	ldrb	r2, [r2, #0]
 8003546:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003556:	b29b      	uxth	r3, r3
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003560:	e011      	b.n	8003586 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003562:	f7fe fe47 	bl	80021f4 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d803      	bhi.n	800357a <HAL_SPI_Transmit+0x204>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	d102      	bne.n	8003580 <HAL_SPI_Transmit+0x20a>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d102      	bne.n	8003586 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003584:	e026      	b.n	80035d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1cd      	bne.n	800352c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	6839      	ldr	r1, [r7, #0]
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 f8b3 	bl	8003700 <SPI_EndRxTxTransaction>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10a      	bne.n	80035c4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035ae:	2300      	movs	r3, #0
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	77fb      	strb	r3, [r7, #31]
 80035d0:	e000      	b.n	80035d4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80035d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3720      	adds	r7, #32
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	4613      	mov	r3, r2
 80035fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003600:	f7fe fdf8 	bl	80021f4 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	4413      	add	r3, r2
 800360e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003610:	f7fe fdf0 	bl	80021f4 <HAL_GetTick>
 8003614:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003616:	4b39      	ldr	r3, [pc, #228]	; (80036fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	015b      	lsls	r3, r3, #5
 800361c:	0d1b      	lsrs	r3, r3, #20
 800361e:	69fa      	ldr	r2, [r7, #28]
 8003620:	fb02 f303 	mul.w	r3, r2, r3
 8003624:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003626:	e054      	b.n	80036d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362e:	d050      	beq.n	80036d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003630:	f7fe fde0 	bl	80021f4 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	429a      	cmp	r2, r3
 800363e:	d902      	bls.n	8003646 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d13d      	bne.n	80036c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003654:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800365e:	d111      	bne.n	8003684 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003668:	d004      	beq.n	8003674 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003672:	d107      	bne.n	8003684 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003682:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800368c:	d10f      	bne.n	80036ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e017      	b.n	80036f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4013      	ands	r3, r2
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	429a      	cmp	r2, r3
 80036e0:	bf0c      	ite	eq
 80036e2:	2301      	moveq	r3, #1
 80036e4:	2300      	movne	r3, #0
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	461a      	mov	r2, r3
 80036ea:	79fb      	ldrb	r3, [r7, #7]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d19b      	bne.n	8003628 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3720      	adds	r7, #32
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000000 	.word	0x20000000

08003700 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af02      	add	r7, sp, #8
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800370c:	4b1b      	ldr	r3, [pc, #108]	; (800377c <SPI_EndRxTxTransaction+0x7c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1b      	ldr	r2, [pc, #108]	; (8003780 <SPI_EndRxTxTransaction+0x80>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	0d5b      	lsrs	r3, r3, #21
 8003718:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800371c:	fb02 f303 	mul.w	r3, r2, r3
 8003720:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800372a:	d112      	bne.n	8003752 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2200      	movs	r2, #0
 8003734:	2180      	movs	r1, #128	; 0x80
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f7ff ff5a 	bl	80035f0 <SPI_WaitFlagStateUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d016      	beq.n	8003770 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003746:	f043 0220 	orr.w	r2, r3, #32
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e00f      	b.n	8003772 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	3b01      	subs	r3, #1
 800375c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003768:	2b80      	cmp	r3, #128	; 0x80
 800376a:	d0f2      	beq.n	8003752 <SPI_EndRxTxTransaction+0x52>
 800376c:	e000      	b.n	8003770 <SPI_EndRxTxTransaction+0x70>
        break;
 800376e:	bf00      	nop
  }

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	20000000 	.word	0x20000000
 8003780:	165e9f81 	.word	0x165e9f81

08003784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e041      	b.n	800381a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7fe f832 	bl	8001814 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3304      	adds	r3, #4
 80037c0:	4619      	mov	r1, r3
 80037c2:	4610      	mov	r0, r2
 80037c4:	f000 f9ce 	bl	8003b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
	...

08003824 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b01      	cmp	r3, #1
 8003836:	d001      	beq.n	800383c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e04e      	b.n	80038da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2202      	movs	r2, #2
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0201 	orr.w	r2, r2, #1
 8003852:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a23      	ldr	r2, [pc, #140]	; (80038e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d022      	beq.n	80038a4 <HAL_TIM_Base_Start_IT+0x80>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003866:	d01d      	beq.n	80038a4 <HAL_TIM_Base_Start_IT+0x80>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a1f      	ldr	r2, [pc, #124]	; (80038ec <HAL_TIM_Base_Start_IT+0xc8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d018      	beq.n	80038a4 <HAL_TIM_Base_Start_IT+0x80>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a1e      	ldr	r2, [pc, #120]	; (80038f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d013      	beq.n	80038a4 <HAL_TIM_Base_Start_IT+0x80>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a1c      	ldr	r2, [pc, #112]	; (80038f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00e      	beq.n	80038a4 <HAL_TIM_Base_Start_IT+0x80>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a1b      	ldr	r2, [pc, #108]	; (80038f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d009      	beq.n	80038a4 <HAL_TIM_Base_Start_IT+0x80>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a19      	ldr	r2, [pc, #100]	; (80038fc <HAL_TIM_Base_Start_IT+0xd8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d004      	beq.n	80038a4 <HAL_TIM_Base_Start_IT+0x80>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a18      	ldr	r2, [pc, #96]	; (8003900 <HAL_TIM_Base_Start_IT+0xdc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d111      	bne.n	80038c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2b06      	cmp	r3, #6
 80038b4:	d010      	beq.n	80038d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f042 0201 	orr.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c6:	e007      	b.n	80038d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0201 	orr.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40010000 	.word	0x40010000
 80038ec:	40000400 	.word	0x40000400
 80038f0:	40000800 	.word	0x40000800
 80038f4:	40000c00 	.word	0x40000c00
 80038f8:	40010400 	.word	0x40010400
 80038fc:	40014000 	.word	0x40014000
 8003900:	40001800 	.word	0x40001800

08003904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b02      	cmp	r3, #2
 8003918:	d122      	bne.n	8003960 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b02      	cmp	r3, #2
 8003926:	d11b      	bne.n	8003960 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f06f 0202 	mvn.w	r2, #2
 8003930:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f8ee 	bl	8003b28 <HAL_TIM_IC_CaptureCallback>
 800394c:	e005      	b.n	800395a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f8e0 	bl	8003b14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f8f1 	bl	8003b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b04      	cmp	r3, #4
 800396c:	d122      	bne.n	80039b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b04      	cmp	r3, #4
 800397a:	d11b      	bne.n	80039b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0204 	mvn.w	r2, #4
 8003984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2202      	movs	r2, #2
 800398a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f8c4 	bl	8003b28 <HAL_TIM_IC_CaptureCallback>
 80039a0:	e005      	b.n	80039ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f8b6 	bl	8003b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f8c7 	bl	8003b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d122      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f003 0308 	and.w	r3, r3, #8
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d11b      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0208 	mvn.w	r2, #8
 80039d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2204      	movs	r2, #4
 80039de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f89a 	bl	8003b28 <HAL_TIM_IC_CaptureCallback>
 80039f4:	e005      	b.n	8003a02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f88c 	bl	8003b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f89d 	bl	8003b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2b10      	cmp	r3, #16
 8003a14:	d122      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0310 	and.w	r3, r3, #16
 8003a20:	2b10      	cmp	r3, #16
 8003a22:	d11b      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0210 	mvn.w	r2, #16
 8003a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2208      	movs	r2, #8
 8003a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f870 	bl	8003b28 <HAL_TIM_IC_CaptureCallback>
 8003a48:	e005      	b.n	8003a56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f862 	bl	8003b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f873 	bl	8003b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d10e      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d107      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0201 	mvn.w	r2, #1
 8003a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fd fe1a 	bl	80016bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a92:	2b80      	cmp	r3, #128	; 0x80
 8003a94:	d10e      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa0:	2b80      	cmp	r3, #128	; 0x80
 8003aa2:	d107      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f97e 	bl	8003db0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abe:	2b40      	cmp	r3, #64	; 0x40
 8003ac0:	d10e      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003acc:	2b40      	cmp	r3, #64	; 0x40
 8003ace:	d107      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f838 	bl	8003b50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f003 0320 	and.w	r3, r3, #32
 8003aea:	2b20      	cmp	r3, #32
 8003aec:	d10e      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	d107      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f06f 0220 	mvn.w	r2, #32
 8003b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f948 	bl	8003d9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a40      	ldr	r2, [pc, #256]	; (8003c78 <TIM_Base_SetConfig+0x114>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d013      	beq.n	8003ba4 <TIM_Base_SetConfig+0x40>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b82:	d00f      	beq.n	8003ba4 <TIM_Base_SetConfig+0x40>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a3d      	ldr	r2, [pc, #244]	; (8003c7c <TIM_Base_SetConfig+0x118>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00b      	beq.n	8003ba4 <TIM_Base_SetConfig+0x40>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a3c      	ldr	r2, [pc, #240]	; (8003c80 <TIM_Base_SetConfig+0x11c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d007      	beq.n	8003ba4 <TIM_Base_SetConfig+0x40>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a3b      	ldr	r2, [pc, #236]	; (8003c84 <TIM_Base_SetConfig+0x120>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d003      	beq.n	8003ba4 <TIM_Base_SetConfig+0x40>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a3a      	ldr	r2, [pc, #232]	; (8003c88 <TIM_Base_SetConfig+0x124>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d108      	bne.n	8003bb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a2f      	ldr	r2, [pc, #188]	; (8003c78 <TIM_Base_SetConfig+0x114>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d02b      	beq.n	8003c16 <TIM_Base_SetConfig+0xb2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc4:	d027      	beq.n	8003c16 <TIM_Base_SetConfig+0xb2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a2c      	ldr	r2, [pc, #176]	; (8003c7c <TIM_Base_SetConfig+0x118>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d023      	beq.n	8003c16 <TIM_Base_SetConfig+0xb2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a2b      	ldr	r2, [pc, #172]	; (8003c80 <TIM_Base_SetConfig+0x11c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d01f      	beq.n	8003c16 <TIM_Base_SetConfig+0xb2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a2a      	ldr	r2, [pc, #168]	; (8003c84 <TIM_Base_SetConfig+0x120>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d01b      	beq.n	8003c16 <TIM_Base_SetConfig+0xb2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a29      	ldr	r2, [pc, #164]	; (8003c88 <TIM_Base_SetConfig+0x124>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d017      	beq.n	8003c16 <TIM_Base_SetConfig+0xb2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a28      	ldr	r2, [pc, #160]	; (8003c8c <TIM_Base_SetConfig+0x128>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d013      	beq.n	8003c16 <TIM_Base_SetConfig+0xb2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a27      	ldr	r2, [pc, #156]	; (8003c90 <TIM_Base_SetConfig+0x12c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d00f      	beq.n	8003c16 <TIM_Base_SetConfig+0xb2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a26      	ldr	r2, [pc, #152]	; (8003c94 <TIM_Base_SetConfig+0x130>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00b      	beq.n	8003c16 <TIM_Base_SetConfig+0xb2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a25      	ldr	r2, [pc, #148]	; (8003c98 <TIM_Base_SetConfig+0x134>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d007      	beq.n	8003c16 <TIM_Base_SetConfig+0xb2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a24      	ldr	r2, [pc, #144]	; (8003c9c <TIM_Base_SetConfig+0x138>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d003      	beq.n	8003c16 <TIM_Base_SetConfig+0xb2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a23      	ldr	r2, [pc, #140]	; (8003ca0 <TIM_Base_SetConfig+0x13c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d108      	bne.n	8003c28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a0a      	ldr	r2, [pc, #40]	; (8003c78 <TIM_Base_SetConfig+0x114>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d003      	beq.n	8003c5c <TIM_Base_SetConfig+0xf8>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a0c      	ldr	r2, [pc, #48]	; (8003c88 <TIM_Base_SetConfig+0x124>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d103      	bne.n	8003c64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	615a      	str	r2, [r3, #20]
}
 8003c6a:	bf00      	nop
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40010000 	.word	0x40010000
 8003c7c:	40000400 	.word	0x40000400
 8003c80:	40000800 	.word	0x40000800
 8003c84:	40000c00 	.word	0x40000c00
 8003c88:	40010400 	.word	0x40010400
 8003c8c:	40014000 	.word	0x40014000
 8003c90:	40014400 	.word	0x40014400
 8003c94:	40014800 	.word	0x40014800
 8003c98:	40001800 	.word	0x40001800
 8003c9c:	40001c00 	.word	0x40001c00
 8003ca0:	40002000 	.word	0x40002000

08003ca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e05a      	b.n	8003d72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a21      	ldr	r2, [pc, #132]	; (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d022      	beq.n	8003d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d08:	d01d      	beq.n	8003d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a1d      	ldr	r2, [pc, #116]	; (8003d84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d018      	beq.n	8003d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a1b      	ldr	r2, [pc, #108]	; (8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a1a      	ldr	r2, [pc, #104]	; (8003d8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00e      	beq.n	8003d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a18      	ldr	r2, [pc, #96]	; (8003d90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d009      	beq.n	8003d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a17      	ldr	r2, [pc, #92]	; (8003d94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d004      	beq.n	8003d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a15      	ldr	r2, [pc, #84]	; (8003d98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d10c      	bne.n	8003d60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40010000 	.word	0x40010000
 8003d84:	40000400 	.word	0x40000400
 8003d88:	40000800 	.word	0x40000800
 8003d8c:	40000c00 	.word	0x40000c00
 8003d90:	40010400 	.word	0x40010400
 8003d94:	40014000 	.word	0x40014000
 8003d98:	40001800 	.word	0x40001800

08003d9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e03f      	b.n	8003e56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d106      	bne.n	8003df0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fd fd34 	bl	8001858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2224      	movs	r2, #36	; 0x24
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f829 	bl	8003e60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695a      	ldr	r2, [r3, #20]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e64:	b09f      	sub	sp, #124	; 0x7c
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e76:	68d9      	ldr	r1, [r3, #12]
 8003e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	ea40 0301 	orr.w	r3, r0, r1
 8003e80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	431a      	orrs	r2, r3
 8003e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ea4:	f021 010c 	bic.w	r1, r1, #12
 8003ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eae:	430b      	orrs	r3, r1
 8003eb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ebe:	6999      	ldr	r1, [r3, #24]
 8003ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	ea40 0301 	orr.w	r3, r0, r1
 8003ec8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	4bc5      	ldr	r3, [pc, #788]	; (80041e4 <UART_SetConfig+0x384>)
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d004      	beq.n	8003ede <UART_SetConfig+0x7e>
 8003ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	4bc3      	ldr	r3, [pc, #780]	; (80041e8 <UART_SetConfig+0x388>)
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d103      	bne.n	8003ee6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ede:	f7fe fd2b 	bl	8002938 <HAL_RCC_GetPCLK2Freq>
 8003ee2:	6778      	str	r0, [r7, #116]	; 0x74
 8003ee4:	e002      	b.n	8003eec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ee6:	f7fe fd13 	bl	8002910 <HAL_RCC_GetPCLK1Freq>
 8003eea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef4:	f040 80b6 	bne.w	8004064 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ef8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003efa:	461c      	mov	r4, r3
 8003efc:	f04f 0500 	mov.w	r5, #0
 8003f00:	4622      	mov	r2, r4
 8003f02:	462b      	mov	r3, r5
 8003f04:	1891      	adds	r1, r2, r2
 8003f06:	6439      	str	r1, [r7, #64]	; 0x40
 8003f08:	415b      	adcs	r3, r3
 8003f0a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f0c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f10:	1912      	adds	r2, r2, r4
 8003f12:	eb45 0303 	adc.w	r3, r5, r3
 8003f16:	f04f 0000 	mov.w	r0, #0
 8003f1a:	f04f 0100 	mov.w	r1, #0
 8003f1e:	00d9      	lsls	r1, r3, #3
 8003f20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f24:	00d0      	lsls	r0, r2, #3
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	1911      	adds	r1, r2, r4
 8003f2c:	6639      	str	r1, [r7, #96]	; 0x60
 8003f2e:	416b      	adcs	r3, r5
 8003f30:	667b      	str	r3, [r7, #100]	; 0x64
 8003f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	461a      	mov	r2, r3
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	1891      	adds	r1, r2, r2
 8003f3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f40:	415b      	adcs	r3, r3
 8003f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f48:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003f4c:	f7fc f9b0 	bl	80002b0 <__aeabi_uldivmod>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4ba5      	ldr	r3, [pc, #660]	; (80041ec <UART_SetConfig+0x38c>)
 8003f56:	fba3 2302 	umull	r2, r3, r3, r2
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	011e      	lsls	r6, r3, #4
 8003f5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f60:	461c      	mov	r4, r3
 8003f62:	f04f 0500 	mov.w	r5, #0
 8003f66:	4622      	mov	r2, r4
 8003f68:	462b      	mov	r3, r5
 8003f6a:	1891      	adds	r1, r2, r2
 8003f6c:	6339      	str	r1, [r7, #48]	; 0x30
 8003f6e:	415b      	adcs	r3, r3
 8003f70:	637b      	str	r3, [r7, #52]	; 0x34
 8003f72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003f76:	1912      	adds	r2, r2, r4
 8003f78:	eb45 0303 	adc.w	r3, r5, r3
 8003f7c:	f04f 0000 	mov.w	r0, #0
 8003f80:	f04f 0100 	mov.w	r1, #0
 8003f84:	00d9      	lsls	r1, r3, #3
 8003f86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f8a:	00d0      	lsls	r0, r2, #3
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	1911      	adds	r1, r2, r4
 8003f92:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f94:	416b      	adcs	r3, r5
 8003f96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	f04f 0300 	mov.w	r3, #0
 8003fa2:	1891      	adds	r1, r2, r2
 8003fa4:	62b9      	str	r1, [r7, #40]	; 0x28
 8003fa6:	415b      	adcs	r3, r3
 8003fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003faa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003fb2:	f7fc f97d 	bl	80002b0 <__aeabi_uldivmod>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4b8c      	ldr	r3, [pc, #560]	; (80041ec <UART_SetConfig+0x38c>)
 8003fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8003fc0:	095b      	lsrs	r3, r3, #5
 8003fc2:	2164      	movs	r1, #100	; 0x64
 8003fc4:	fb01 f303 	mul.w	r3, r1, r3
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	3332      	adds	r3, #50	; 0x32
 8003fce:	4a87      	ldr	r2, [pc, #540]	; (80041ec <UART_SetConfig+0x38c>)
 8003fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd4:	095b      	lsrs	r3, r3, #5
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fdc:	441e      	add	r6, r3
 8003fde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f04f 0100 	mov.w	r1, #0
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	1894      	adds	r4, r2, r2
 8003fec:	623c      	str	r4, [r7, #32]
 8003fee:	415b      	adcs	r3, r3
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ff6:	1812      	adds	r2, r2, r0
 8003ff8:	eb41 0303 	adc.w	r3, r1, r3
 8003ffc:	f04f 0400 	mov.w	r4, #0
 8004000:	f04f 0500 	mov.w	r5, #0
 8004004:	00dd      	lsls	r5, r3, #3
 8004006:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800400a:	00d4      	lsls	r4, r2, #3
 800400c:	4622      	mov	r2, r4
 800400e:	462b      	mov	r3, r5
 8004010:	1814      	adds	r4, r2, r0
 8004012:	653c      	str	r4, [r7, #80]	; 0x50
 8004014:	414b      	adcs	r3, r1
 8004016:	657b      	str	r3, [r7, #84]	; 0x54
 8004018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	461a      	mov	r2, r3
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	1891      	adds	r1, r2, r2
 8004024:	61b9      	str	r1, [r7, #24]
 8004026:	415b      	adcs	r3, r3
 8004028:	61fb      	str	r3, [r7, #28]
 800402a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800402e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004032:	f7fc f93d 	bl	80002b0 <__aeabi_uldivmod>
 8004036:	4602      	mov	r2, r0
 8004038:	460b      	mov	r3, r1
 800403a:	4b6c      	ldr	r3, [pc, #432]	; (80041ec <UART_SetConfig+0x38c>)
 800403c:	fba3 1302 	umull	r1, r3, r3, r2
 8004040:	095b      	lsrs	r3, r3, #5
 8004042:	2164      	movs	r1, #100	; 0x64
 8004044:	fb01 f303 	mul.w	r3, r1, r3
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	3332      	adds	r3, #50	; 0x32
 800404e:	4a67      	ldr	r2, [pc, #412]	; (80041ec <UART_SetConfig+0x38c>)
 8004050:	fba2 2303 	umull	r2, r3, r2, r3
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	f003 0207 	and.w	r2, r3, #7
 800405a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4432      	add	r2, r6
 8004060:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004062:	e0b9      	b.n	80041d8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004064:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004066:	461c      	mov	r4, r3
 8004068:	f04f 0500 	mov.w	r5, #0
 800406c:	4622      	mov	r2, r4
 800406e:	462b      	mov	r3, r5
 8004070:	1891      	adds	r1, r2, r2
 8004072:	6139      	str	r1, [r7, #16]
 8004074:	415b      	adcs	r3, r3
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800407c:	1912      	adds	r2, r2, r4
 800407e:	eb45 0303 	adc.w	r3, r5, r3
 8004082:	f04f 0000 	mov.w	r0, #0
 8004086:	f04f 0100 	mov.w	r1, #0
 800408a:	00d9      	lsls	r1, r3, #3
 800408c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004090:	00d0      	lsls	r0, r2, #3
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	eb12 0804 	adds.w	r8, r2, r4
 800409a:	eb43 0905 	adc.w	r9, r3, r5
 800409e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f04f 0100 	mov.w	r1, #0
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	008b      	lsls	r3, r1, #2
 80040b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040b6:	0082      	lsls	r2, r0, #2
 80040b8:	4640      	mov	r0, r8
 80040ba:	4649      	mov	r1, r9
 80040bc:	f7fc f8f8 	bl	80002b0 <__aeabi_uldivmod>
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	4b49      	ldr	r3, [pc, #292]	; (80041ec <UART_SetConfig+0x38c>)
 80040c6:	fba3 2302 	umull	r2, r3, r3, r2
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	011e      	lsls	r6, r3, #4
 80040ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040d0:	4618      	mov	r0, r3
 80040d2:	f04f 0100 	mov.w	r1, #0
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	1894      	adds	r4, r2, r2
 80040dc:	60bc      	str	r4, [r7, #8]
 80040de:	415b      	adcs	r3, r3
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040e6:	1812      	adds	r2, r2, r0
 80040e8:	eb41 0303 	adc.w	r3, r1, r3
 80040ec:	f04f 0400 	mov.w	r4, #0
 80040f0:	f04f 0500 	mov.w	r5, #0
 80040f4:	00dd      	lsls	r5, r3, #3
 80040f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80040fa:	00d4      	lsls	r4, r2, #3
 80040fc:	4622      	mov	r2, r4
 80040fe:	462b      	mov	r3, r5
 8004100:	1814      	adds	r4, r2, r0
 8004102:	64bc      	str	r4, [r7, #72]	; 0x48
 8004104:	414b      	adcs	r3, r1
 8004106:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	4618      	mov	r0, r3
 800410e:	f04f 0100 	mov.w	r1, #0
 8004112:	f04f 0200 	mov.w	r2, #0
 8004116:	f04f 0300 	mov.w	r3, #0
 800411a:	008b      	lsls	r3, r1, #2
 800411c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004120:	0082      	lsls	r2, r0, #2
 8004122:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004126:	f7fc f8c3 	bl	80002b0 <__aeabi_uldivmod>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	4b2f      	ldr	r3, [pc, #188]	; (80041ec <UART_SetConfig+0x38c>)
 8004130:	fba3 1302 	umull	r1, r3, r3, r2
 8004134:	095b      	lsrs	r3, r3, #5
 8004136:	2164      	movs	r1, #100	; 0x64
 8004138:	fb01 f303 	mul.w	r3, r1, r3
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	3332      	adds	r3, #50	; 0x32
 8004142:	4a2a      	ldr	r2, [pc, #168]	; (80041ec <UART_SetConfig+0x38c>)
 8004144:	fba2 2303 	umull	r2, r3, r2, r3
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800414e:	441e      	add	r6, r3
 8004150:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004152:	4618      	mov	r0, r3
 8004154:	f04f 0100 	mov.w	r1, #0
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	1894      	adds	r4, r2, r2
 800415e:	603c      	str	r4, [r7, #0]
 8004160:	415b      	adcs	r3, r3
 8004162:	607b      	str	r3, [r7, #4]
 8004164:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004168:	1812      	adds	r2, r2, r0
 800416a:	eb41 0303 	adc.w	r3, r1, r3
 800416e:	f04f 0400 	mov.w	r4, #0
 8004172:	f04f 0500 	mov.w	r5, #0
 8004176:	00dd      	lsls	r5, r3, #3
 8004178:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800417c:	00d4      	lsls	r4, r2, #3
 800417e:	4622      	mov	r2, r4
 8004180:	462b      	mov	r3, r5
 8004182:	eb12 0a00 	adds.w	sl, r2, r0
 8004186:	eb43 0b01 	adc.w	fp, r3, r1
 800418a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	4618      	mov	r0, r3
 8004190:	f04f 0100 	mov.w	r1, #0
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	008b      	lsls	r3, r1, #2
 800419e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041a2:	0082      	lsls	r2, r0, #2
 80041a4:	4650      	mov	r0, sl
 80041a6:	4659      	mov	r1, fp
 80041a8:	f7fc f882 	bl	80002b0 <__aeabi_uldivmod>
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	4b0e      	ldr	r3, [pc, #56]	; (80041ec <UART_SetConfig+0x38c>)
 80041b2:	fba3 1302 	umull	r1, r3, r3, r2
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	2164      	movs	r1, #100	; 0x64
 80041ba:	fb01 f303 	mul.w	r3, r1, r3
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	3332      	adds	r3, #50	; 0x32
 80041c4:	4a09      	ldr	r2, [pc, #36]	; (80041ec <UART_SetConfig+0x38c>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	f003 020f 	and.w	r2, r3, #15
 80041d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4432      	add	r2, r6
 80041d6:	609a      	str	r2, [r3, #8]
}
 80041d8:	bf00      	nop
 80041da:	377c      	adds	r7, #124	; 0x7c
 80041dc:	46bd      	mov	sp, r7
 80041de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041e2:	bf00      	nop
 80041e4:	40011000 	.word	0x40011000
 80041e8:	40011400 	.word	0x40011400
 80041ec:	51eb851f 	.word	0x51eb851f

080041f0 <__NVIC_SetPriority>:
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	6039      	str	r1, [r7, #0]
 80041fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004200:	2b00      	cmp	r3, #0
 8004202:	db0a      	blt.n	800421a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	b2da      	uxtb	r2, r3
 8004208:	490c      	ldr	r1, [pc, #48]	; (800423c <__NVIC_SetPriority+0x4c>)
 800420a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420e:	0112      	lsls	r2, r2, #4
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	440b      	add	r3, r1
 8004214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004218:	e00a      	b.n	8004230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	b2da      	uxtb	r2, r3
 800421e:	4908      	ldr	r1, [pc, #32]	; (8004240 <__NVIC_SetPriority+0x50>)
 8004220:	79fb      	ldrb	r3, [r7, #7]
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	3b04      	subs	r3, #4
 8004228:	0112      	lsls	r2, r2, #4
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	440b      	add	r3, r1
 800422e:	761a      	strb	r2, [r3, #24]
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	e000e100 	.word	0xe000e100
 8004240:	e000ed00 	.word	0xe000ed00

08004244 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004248:	4b05      	ldr	r3, [pc, #20]	; (8004260 <SysTick_Handler+0x1c>)
 800424a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800424c:	f001 fd28 	bl	8005ca0 <xTaskGetSchedulerState>
 8004250:	4603      	mov	r3, r0
 8004252:	2b01      	cmp	r3, #1
 8004254:	d001      	beq.n	800425a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004256:	f002 fb0f 	bl	8006878 <xPortSysTickHandler>
  }
}
 800425a:	bf00      	nop
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	e000e010 	.word	0xe000e010

08004264 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004268:	2100      	movs	r1, #0
 800426a:	f06f 0004 	mvn.w	r0, #4
 800426e:	f7ff ffbf 	bl	80041f0 <__NVIC_SetPriority>
#endif
}
 8004272:	bf00      	nop
 8004274:	bd80      	pop	{r7, pc}
	...

08004278 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800427e:	f3ef 8305 	mrs	r3, IPSR
 8004282:	603b      	str	r3, [r7, #0]
  return(result);
 8004284:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800428a:	f06f 0305 	mvn.w	r3, #5
 800428e:	607b      	str	r3, [r7, #4]
 8004290:	e00c      	b.n	80042ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004292:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <osKernelInitialize+0x44>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d105      	bne.n	80042a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800429a:	4b08      	ldr	r3, [pc, #32]	; (80042bc <osKernelInitialize+0x44>)
 800429c:	2201      	movs	r2, #1
 800429e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	607b      	str	r3, [r7, #4]
 80042a4:	e002      	b.n	80042ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80042a6:	f04f 33ff 	mov.w	r3, #4294967295
 80042aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80042ac:	687b      	ldr	r3, [r7, #4]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	20000094 	.word	0x20000094

080042c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042c6:	f3ef 8305 	mrs	r3, IPSR
 80042ca:	603b      	str	r3, [r7, #0]
  return(result);
 80042cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <osKernelStart+0x1a>
    stat = osErrorISR;
 80042d2:	f06f 0305 	mvn.w	r3, #5
 80042d6:	607b      	str	r3, [r7, #4]
 80042d8:	e010      	b.n	80042fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80042da:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <osKernelStart+0x48>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d109      	bne.n	80042f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80042e2:	f7ff ffbf 	bl	8004264 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80042e6:	4b08      	ldr	r3, [pc, #32]	; (8004308 <osKernelStart+0x48>)
 80042e8:	2202      	movs	r2, #2
 80042ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80042ec:	f001 f87c 	bl	80053e8 <vTaskStartScheduler>
      stat = osOK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	607b      	str	r3, [r7, #4]
 80042f4:	e002      	b.n	80042fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80042f6:	f04f 33ff 	mov.w	r3, #4294967295
 80042fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80042fc:	687b      	ldr	r3, [r7, #4]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20000094 	.word	0x20000094

0800430c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800430c:	b580      	push	{r7, lr}
 800430e:	b08e      	sub	sp, #56	; 0x38
 8004310:	af04      	add	r7, sp, #16
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004318:	2300      	movs	r3, #0
 800431a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800431c:	f3ef 8305 	mrs	r3, IPSR
 8004320:	617b      	str	r3, [r7, #20]
  return(result);
 8004322:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004324:	2b00      	cmp	r3, #0
 8004326:	d17e      	bne.n	8004426 <osThreadNew+0x11a>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d07b      	beq.n	8004426 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800432e:	2380      	movs	r3, #128	; 0x80
 8004330:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004332:	2318      	movs	r3, #24
 8004334:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004336:	2300      	movs	r3, #0
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800433a:	f04f 33ff 	mov.w	r3, #4294967295
 800433e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d045      	beq.n	80043d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <osThreadNew+0x48>
        name = attr->name;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <osThreadNew+0x6e>
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	2b38      	cmp	r3, #56	; 0x38
 800436c:	d805      	bhi.n	800437a <osThreadNew+0x6e>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <osThreadNew+0x72>
        return (NULL);
 800437a:	2300      	movs	r3, #0
 800437c:	e054      	b.n	8004428 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	089b      	lsrs	r3, r3, #2
 800438c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00e      	beq.n	80043b4 <osThreadNew+0xa8>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	2bbb      	cmp	r3, #187	; 0xbb
 800439c:	d90a      	bls.n	80043b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d006      	beq.n	80043b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <osThreadNew+0xa8>
        mem = 1;
 80043ae:	2301      	movs	r3, #1
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	e010      	b.n	80043d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10c      	bne.n	80043d6 <osThreadNew+0xca>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d108      	bne.n	80043d6 <osThreadNew+0xca>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d104      	bne.n	80043d6 <osThreadNew+0xca>
          mem = 0;
 80043cc:	2300      	movs	r3, #0
 80043ce:	61bb      	str	r3, [r7, #24]
 80043d0:	e001      	b.n	80043d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80043d2:	2300      	movs	r3, #0
 80043d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d110      	bne.n	80043fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043e4:	9202      	str	r2, [sp, #8]
 80043e6:	9301      	str	r3, [sp, #4]
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	6a3a      	ldr	r2, [r7, #32]
 80043f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 fe0c 	bl	8005010 <xTaskCreateStatic>
 80043f8:	4603      	mov	r3, r0
 80043fa:	613b      	str	r3, [r7, #16]
 80043fc:	e013      	b.n	8004426 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d110      	bne.n	8004426 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	b29a      	uxth	r2, r3
 8004408:	f107 0310 	add.w	r3, r7, #16
 800440c:	9301      	str	r3, [sp, #4]
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 fe57 	bl	80050ca <xTaskCreate>
 800441c:	4603      	mov	r3, r0
 800441e:	2b01      	cmp	r3, #1
 8004420:	d001      	beq.n	8004426 <osThreadNew+0x11a>
            hTask = NULL;
 8004422:	2300      	movs	r3, #0
 8004424:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004426:	693b      	ldr	r3, [r7, #16]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3728      	adds	r7, #40	; 0x28
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004438:	f3ef 8305 	mrs	r3, IPSR
 800443c:	60bb      	str	r3, [r7, #8]
  return(result);
 800443e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <osDelay+0x1c>
    stat = osErrorISR;
 8004444:	f06f 0305 	mvn.w	r3, #5
 8004448:	60fb      	str	r3, [r7, #12]
 800444a:	e007      	b.n	800445c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 ff92 	bl	8005380 <vTaskDelay>
    }
  }

  return (stat);
 800445c:	68fb      	ldr	r3, [r7, #12]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4a07      	ldr	r2, [pc, #28]	; (8004494 <vApplicationGetIdleTaskMemory+0x2c>)
 8004478:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	4a06      	ldr	r2, [pc, #24]	; (8004498 <vApplicationGetIdleTaskMemory+0x30>)
 800447e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2280      	movs	r2, #128	; 0x80
 8004484:	601a      	str	r2, [r3, #0]
}
 8004486:	bf00      	nop
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	20000098 	.word	0x20000098
 8004498:	20000154 	.word	0x20000154

0800449c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4a07      	ldr	r2, [pc, #28]	; (80044c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80044ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	4a06      	ldr	r2, [pc, #24]	; (80044cc <vApplicationGetTimerTaskMemory+0x30>)
 80044b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044ba:	601a      	str	r2, [r3, #0]
}
 80044bc:	bf00      	nop
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	20000354 	.word	0x20000354
 80044cc:	20000410 	.word	0x20000410

080044d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f103 0208 	add.w	r2, r3, #8
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f04f 32ff 	mov.w	r2, #4294967295
 80044e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f103 0208 	add.w	r2, r3, #8
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f103 0208 	add.w	r2, r3, #8
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800452a:	b480      	push	{r7}
 800452c:	b085      	sub	sp, #20
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	601a      	str	r2, [r3, #0]
}
 8004566:	bf00      	nop
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004572:	b480      	push	{r7}
 8004574:	b085      	sub	sp, #20
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004588:	d103      	bne.n	8004592 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	e00c      	b.n	80045ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3308      	adds	r3, #8
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	e002      	b.n	80045a0 <vListInsert+0x2e>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d2f6      	bcs.n	800459a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	601a      	str	r2, [r3, #0]
}
 80045d8:	bf00      	nop
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6892      	ldr	r2, [r2, #8]
 80045fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6852      	ldr	r2, [r2, #4]
 8004604:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	429a      	cmp	r2, r3
 800460e:	d103      	bne.n	8004618 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	1e5a      	subs	r2, r3, #1
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800464c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800465e:	bf00      	nop
 8004660:	e7fe      	b.n	8004660 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004662:	f002 f877 	bl	8006754 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466e:	68f9      	ldr	r1, [r7, #12]
 8004670:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004672:	fb01 f303 	mul.w	r3, r1, r3
 8004676:	441a      	add	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004692:	3b01      	subs	r3, #1
 8004694:	68f9      	ldr	r1, [r7, #12]
 8004696:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004698:	fb01 f303 	mul.w	r3, r1, r3
 800469c:	441a      	add	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	22ff      	movs	r2, #255	; 0xff
 80046a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	22ff      	movs	r2, #255	; 0xff
 80046ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d114      	bne.n	80046e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01a      	beq.n	80046f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	3310      	adds	r3, #16
 80046c4:	4618      	mov	r0, r3
 80046c6:	f001 f929 	bl	800591c <xTaskRemoveFromEventList>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d012      	beq.n	80046f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80046d0:	4b0c      	ldr	r3, [pc, #48]	; (8004704 <xQueueGenericReset+0xcc>)
 80046d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	e009      	b.n	80046f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3310      	adds	r3, #16
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff fef2 	bl	80044d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	3324      	adds	r3, #36	; 0x24
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff feed 	bl	80044d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80046f6:	f002 f85d 	bl	80067b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80046fa:	2301      	movs	r3, #1
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	e000ed04 	.word	0xe000ed04

08004708 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08e      	sub	sp, #56	; 0x38
 800470c:	af02      	add	r7, sp, #8
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10a      	bne.n	8004732 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800471c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800472e:	bf00      	nop
 8004730:	e7fe      	b.n	8004730 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10a      	bne.n	800474e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	627b      	str	r3, [r7, #36]	; 0x24
}
 800474a:	bf00      	nop
 800474c:	e7fe      	b.n	800474c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d002      	beq.n	800475a <xQueueGenericCreateStatic+0x52>
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <xQueueGenericCreateStatic+0x56>
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <xQueueGenericCreateStatic+0x58>
 800475e:	2300      	movs	r3, #0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10a      	bne.n	800477a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	623b      	str	r3, [r7, #32]
}
 8004776:	bf00      	nop
 8004778:	e7fe      	b.n	8004778 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d102      	bne.n	8004786 <xQueueGenericCreateStatic+0x7e>
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <xQueueGenericCreateStatic+0x82>
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <xQueueGenericCreateStatic+0x84>
 800478a:	2300      	movs	r3, #0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10a      	bne.n	80047a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	61fb      	str	r3, [r7, #28]
}
 80047a2:	bf00      	nop
 80047a4:	e7fe      	b.n	80047a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80047a6:	2350      	movs	r3, #80	; 0x50
 80047a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2b50      	cmp	r3, #80	; 0x50
 80047ae:	d00a      	beq.n	80047c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	61bb      	str	r3, [r7, #24]
}
 80047c2:	bf00      	nop
 80047c4:	e7fe      	b.n	80047c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80047c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80047cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00d      	beq.n	80047ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80047de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	4613      	mov	r3, r2
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	68b9      	ldr	r1, [r7, #8]
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f805 	bl	80047f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80047ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3730      	adds	r7, #48	; 0x30
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
 8004804:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d103      	bne.n	8004814 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	e002      	b.n	800481a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004826:	2101      	movs	r1, #1
 8004828:	69b8      	ldr	r0, [r7, #24]
 800482a:	f7ff ff05 	bl	8004638 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	78fa      	ldrb	r2, [r7, #3]
 8004832:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004836:	bf00      	nop
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
	...

08004840 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08e      	sub	sp, #56	; 0x38
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800484e:	2300      	movs	r3, #0
 8004850:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10a      	bne.n	8004872 <xQueueGenericSend+0x32>
	__asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800486e:	bf00      	nop
 8004870:	e7fe      	b.n	8004870 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d103      	bne.n	8004880 <xQueueGenericSend+0x40>
 8004878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <xQueueGenericSend+0x44>
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <xQueueGenericSend+0x46>
 8004884:	2300      	movs	r3, #0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10a      	bne.n	80048a0 <xQueueGenericSend+0x60>
	__asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800489c:	bf00      	nop
 800489e:	e7fe      	b.n	800489e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d103      	bne.n	80048ae <xQueueGenericSend+0x6e>
 80048a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <xQueueGenericSend+0x72>
 80048ae:	2301      	movs	r3, #1
 80048b0:	e000      	b.n	80048b4 <xQueueGenericSend+0x74>
 80048b2:	2300      	movs	r3, #0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10a      	bne.n	80048ce <xQueueGenericSend+0x8e>
	__asm volatile
 80048b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	623b      	str	r3, [r7, #32]
}
 80048ca:	bf00      	nop
 80048cc:	e7fe      	b.n	80048cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048ce:	f001 f9e7 	bl	8005ca0 <xTaskGetSchedulerState>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d102      	bne.n	80048de <xQueueGenericSend+0x9e>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <xQueueGenericSend+0xa2>
 80048de:	2301      	movs	r3, #1
 80048e0:	e000      	b.n	80048e4 <xQueueGenericSend+0xa4>
 80048e2:	2300      	movs	r3, #0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10a      	bne.n	80048fe <xQueueGenericSend+0xbe>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	61fb      	str	r3, [r7, #28]
}
 80048fa:	bf00      	nop
 80048fc:	e7fe      	b.n	80048fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048fe:	f001 ff29 	bl	8006754 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490a:	429a      	cmp	r2, r3
 800490c:	d302      	bcc.n	8004914 <xQueueGenericSend+0xd4>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b02      	cmp	r3, #2
 8004912:	d129      	bne.n	8004968 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	68b9      	ldr	r1, [r7, #8]
 8004918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800491a:	f000 fa0b 	bl	8004d34 <prvCopyDataToQueue>
 800491e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	2b00      	cmp	r3, #0
 8004926:	d010      	beq.n	800494a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492a:	3324      	adds	r3, #36	; 0x24
 800492c:	4618      	mov	r0, r3
 800492e:	f000 fff5 	bl	800591c <xTaskRemoveFromEventList>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d013      	beq.n	8004960 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004938:	4b3f      	ldr	r3, [pc, #252]	; (8004a38 <xQueueGenericSend+0x1f8>)
 800493a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	e00a      	b.n	8004960 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800494a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494c:	2b00      	cmp	r3, #0
 800494e:	d007      	beq.n	8004960 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004950:	4b39      	ldr	r3, [pc, #228]	; (8004a38 <xQueueGenericSend+0x1f8>)
 8004952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004960:	f001 ff28 	bl	80067b4 <vPortExitCritical>
				return pdPASS;
 8004964:	2301      	movs	r3, #1
 8004966:	e063      	b.n	8004a30 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d103      	bne.n	8004976 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800496e:	f001 ff21 	bl	80067b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004972:	2300      	movs	r3, #0
 8004974:	e05c      	b.n	8004a30 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004978:	2b00      	cmp	r3, #0
 800497a:	d106      	bne.n	800498a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800497c:	f107 0314 	add.w	r3, r7, #20
 8004980:	4618      	mov	r0, r3
 8004982:	f001 f82f 	bl	80059e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004986:	2301      	movs	r3, #1
 8004988:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800498a:	f001 ff13 	bl	80067b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800498e:	f000 fd9b 	bl	80054c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004992:	f001 fedf 	bl	8006754 <vPortEnterCritical>
 8004996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800499c:	b25b      	sxtb	r3, r3
 800499e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a2:	d103      	bne.n	80049ac <xQueueGenericSend+0x16c>
 80049a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049b2:	b25b      	sxtb	r3, r3
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b8:	d103      	bne.n	80049c2 <xQueueGenericSend+0x182>
 80049ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049c2:	f001 fef7 	bl	80067b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049c6:	1d3a      	adds	r2, r7, #4
 80049c8:	f107 0314 	add.w	r3, r7, #20
 80049cc:	4611      	mov	r1, r2
 80049ce:	4618      	mov	r0, r3
 80049d0:	f001 f81e 	bl	8005a10 <xTaskCheckForTimeOut>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d124      	bne.n	8004a24 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80049da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049dc:	f000 faa2 	bl	8004f24 <prvIsQueueFull>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d018      	beq.n	8004a18 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e8:	3310      	adds	r3, #16
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	4611      	mov	r1, r2
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 ff44 	bl	800587c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80049f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049f6:	f000 fa2d 	bl	8004e54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80049fa:	f000 fd73 	bl	80054e4 <xTaskResumeAll>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f47f af7c 	bne.w	80048fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004a06:	4b0c      	ldr	r3, [pc, #48]	; (8004a38 <xQueueGenericSend+0x1f8>)
 8004a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	e772      	b.n	80048fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a1a:	f000 fa1b 	bl	8004e54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a1e:	f000 fd61 	bl	80054e4 <xTaskResumeAll>
 8004a22:	e76c      	b.n	80048fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a26:	f000 fa15 	bl	8004e54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a2a:	f000 fd5b 	bl	80054e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3738      	adds	r7, #56	; 0x38
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	e000ed04 	.word	0xe000ed04

08004a3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b090      	sub	sp, #64	; 0x40
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10a      	bne.n	8004a6a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a66:	bf00      	nop
 8004a68:	e7fe      	b.n	8004a68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d103      	bne.n	8004a78 <xQueueGenericSendFromISR+0x3c>
 8004a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <xQueueGenericSendFromISR+0x40>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e000      	b.n	8004a7e <xQueueGenericSendFromISR+0x42>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10a      	bne.n	8004a98 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a94:	bf00      	nop
 8004a96:	e7fe      	b.n	8004a96 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d103      	bne.n	8004aa6 <xQueueGenericSendFromISR+0x6a>
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <xQueueGenericSendFromISR+0x6e>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <xQueueGenericSendFromISR+0x70>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10a      	bne.n	8004ac6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	623b      	str	r3, [r7, #32]
}
 8004ac2:	bf00      	nop
 8004ac4:	e7fe      	b.n	8004ac4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ac6:	f001 ff27 	bl	8006918 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004aca:	f3ef 8211 	mrs	r2, BASEPRI
 8004ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	61fa      	str	r2, [r7, #28]
 8004ae0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ae2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ae4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d302      	bcc.n	8004af8 <xQueueGenericSendFromISR+0xbc>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d12f      	bne.n	8004b58 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	68b9      	ldr	r1, [r7, #8]
 8004b0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b0e:	f000 f911 	bl	8004d34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b12:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1a:	d112      	bne.n	8004b42 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d016      	beq.n	8004b52 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b26:	3324      	adds	r3, #36	; 0x24
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 fef7 	bl	800591c <xTaskRemoveFromEventList>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00e      	beq.n	8004b52 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00b      	beq.n	8004b52 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	e007      	b.n	8004b52 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b46:	3301      	adds	r3, #1
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	b25a      	sxtb	r2, r3
 8004b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b52:	2301      	movs	r3, #1
 8004b54:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004b56:	e001      	b.n	8004b5c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b66:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3740      	adds	r7, #64	; 0x40
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b08c      	sub	sp, #48	; 0x30
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b80:	2300      	movs	r3, #0
 8004b82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10a      	bne.n	8004ba4 <xQueueReceive+0x30>
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	623b      	str	r3, [r7, #32]
}
 8004ba0:	bf00      	nop
 8004ba2:	e7fe      	b.n	8004ba2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d103      	bne.n	8004bb2 <xQueueReceive+0x3e>
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <xQueueReceive+0x42>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <xQueueReceive+0x44>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10a      	bne.n	8004bd2 <xQueueReceive+0x5e>
	__asm volatile
 8004bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	61fb      	str	r3, [r7, #28]
}
 8004bce:	bf00      	nop
 8004bd0:	e7fe      	b.n	8004bd0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bd2:	f001 f865 	bl	8005ca0 <xTaskGetSchedulerState>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d102      	bne.n	8004be2 <xQueueReceive+0x6e>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <xQueueReceive+0x72>
 8004be2:	2301      	movs	r3, #1
 8004be4:	e000      	b.n	8004be8 <xQueueReceive+0x74>
 8004be6:	2300      	movs	r3, #0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10a      	bne.n	8004c02 <xQueueReceive+0x8e>
	__asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	61bb      	str	r3, [r7, #24]
}
 8004bfe:	bf00      	nop
 8004c00:	e7fe      	b.n	8004c00 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c02:	f001 fda7 	bl	8006754 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d01f      	beq.n	8004c52 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c16:	f000 f8f7 	bl	8004e08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	1e5a      	subs	r2, r3, #1
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00f      	beq.n	8004c4a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2c:	3310      	adds	r3, #16
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fe74 	bl	800591c <xTaskRemoveFromEventList>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d007      	beq.n	8004c4a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c3a:	4b3d      	ldr	r3, [pc, #244]	; (8004d30 <xQueueReceive+0x1bc>)
 8004c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	f3bf 8f4f 	dsb	sy
 8004c46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c4a:	f001 fdb3 	bl	80067b4 <vPortExitCritical>
				return pdPASS;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e069      	b.n	8004d26 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d103      	bne.n	8004c60 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c58:	f001 fdac 	bl	80067b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	e062      	b.n	8004d26 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d106      	bne.n	8004c74 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c66:	f107 0310 	add.w	r3, r7, #16
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 feba 	bl	80059e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c70:	2301      	movs	r3, #1
 8004c72:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c74:	f001 fd9e 	bl	80067b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c78:	f000 fc26 	bl	80054c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c7c:	f001 fd6a 	bl	8006754 <vPortEnterCritical>
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c86:	b25b      	sxtb	r3, r3
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d103      	bne.n	8004c96 <xQueueReceive+0x122>
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c9c:	b25b      	sxtb	r3, r3
 8004c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca2:	d103      	bne.n	8004cac <xQueueReceive+0x138>
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cac:	f001 fd82 	bl	80067b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cb0:	1d3a      	adds	r2, r7, #4
 8004cb2:	f107 0310 	add.w	r3, r7, #16
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 fea9 	bl	8005a10 <xTaskCheckForTimeOut>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d123      	bne.n	8004d0c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cc6:	f000 f917 	bl	8004ef8 <prvIsQueueEmpty>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d017      	beq.n	8004d00 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd2:	3324      	adds	r3, #36	; 0x24
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 fdcf 	bl	800587c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ce0:	f000 f8b8 	bl	8004e54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ce4:	f000 fbfe 	bl	80054e4 <xTaskResumeAll>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d189      	bne.n	8004c02 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004cee:	4b10      	ldr	r3, [pc, #64]	; (8004d30 <xQueueReceive+0x1bc>)
 8004cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	e780      	b.n	8004c02 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d02:	f000 f8a7 	bl	8004e54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d06:	f000 fbed 	bl	80054e4 <xTaskResumeAll>
 8004d0a:	e77a      	b.n	8004c02 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d0e:	f000 f8a1 	bl	8004e54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d12:	f000 fbe7 	bl	80054e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d18:	f000 f8ee 	bl	8004ef8 <prvIsQueueEmpty>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f43f af6f 	beq.w	8004c02 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3730      	adds	r7, #48	; 0x30
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	e000ed04 	.word	0xe000ed04

08004d34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d40:	2300      	movs	r3, #0
 8004d42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10d      	bne.n	8004d6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d14d      	bne.n	8004df6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 ffbc 	bl	8005cdc <xTaskPriorityDisinherit>
 8004d64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	609a      	str	r2, [r3, #8]
 8004d6c:	e043      	b.n	8004df6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d119      	bne.n	8004da8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6858      	ldr	r0, [r3, #4]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	68b9      	ldr	r1, [r7, #8]
 8004d80:	f002 f917 	bl	8006fb2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	441a      	add	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d32b      	bcc.n	8004df6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	605a      	str	r2, [r3, #4]
 8004da6:	e026      	b.n	8004df6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	68d8      	ldr	r0, [r3, #12]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	461a      	mov	r2, r3
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	f002 f8fd 	bl	8006fb2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc0:	425b      	negs	r3, r3
 8004dc2:	441a      	add	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d207      	bcs.n	8004de4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	425b      	negs	r3, r3
 8004dde:	441a      	add	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d105      	bne.n	8004df6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004dfe:	697b      	ldr	r3, [r7, #20]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3718      	adds	r7, #24
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d018      	beq.n	8004e4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	441a      	add	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d303      	bcc.n	8004e3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68d9      	ldr	r1, [r3, #12]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e44:	461a      	mov	r2, r3
 8004e46:	6838      	ldr	r0, [r7, #0]
 8004e48:	f002 f8b3 	bl	8006fb2 <memcpy>
	}
}
 8004e4c:	bf00      	nop
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e5c:	f001 fc7a 	bl	8006754 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e68:	e011      	b.n	8004e8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d012      	beq.n	8004e98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3324      	adds	r3, #36	; 0x24
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fd50 	bl	800591c <xTaskRemoveFromEventList>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e82:	f000 fe27 	bl	8005ad4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	dce9      	bgt.n	8004e6a <prvUnlockQueue+0x16>
 8004e96:	e000      	b.n	8004e9a <prvUnlockQueue+0x46>
					break;
 8004e98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	22ff      	movs	r2, #255	; 0xff
 8004e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ea2:	f001 fc87 	bl	80067b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ea6:	f001 fc55 	bl	8006754 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eb0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004eb2:	e011      	b.n	8004ed8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d012      	beq.n	8004ee2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3310      	adds	r3, #16
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fd2b 	bl	800591c <xTaskRemoveFromEventList>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ecc:	f000 fe02 	bl	8005ad4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ed0:	7bbb      	ldrb	r3, [r7, #14]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ed8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	dce9      	bgt.n	8004eb4 <prvUnlockQueue+0x60>
 8004ee0:	e000      	b.n	8004ee4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ee2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	22ff      	movs	r2, #255	; 0xff
 8004ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004eec:	f001 fc62 	bl	80067b4 <vPortExitCritical>
}
 8004ef0:	bf00      	nop
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f00:	f001 fc28 	bl	8006754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d102      	bne.n	8004f12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	e001      	b.n	8004f16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f12:	2300      	movs	r3, #0
 8004f14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f16:	f001 fc4d 	bl	80067b4 <vPortExitCritical>

	return xReturn;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f2c:	f001 fc12 	bl	8006754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d102      	bne.n	8004f42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	e001      	b.n	8004f46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f46:	f001 fc35 	bl	80067b4 <vPortExitCritical>

	return xReturn;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	e014      	b.n	8004f8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f64:	4a0f      	ldr	r2, [pc, #60]	; (8004fa4 <vQueueAddToRegistry+0x50>)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10b      	bne.n	8004f88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004f70:	490c      	ldr	r1, [pc, #48]	; (8004fa4 <vQueueAddToRegistry+0x50>)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f7a:	4a0a      	ldr	r2, [pc, #40]	; (8004fa4 <vQueueAddToRegistry+0x50>)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	4413      	add	r3, r2
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f86:	e006      	b.n	8004f96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2b07      	cmp	r3, #7
 8004f92:	d9e7      	bls.n	8004f64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	20004fb8 	.word	0x20004fb8

08004fa8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004fb8:	f001 fbcc 	bl	8006754 <vPortEnterCritical>
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fc2:	b25b      	sxtb	r3, r3
 8004fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc8:	d103      	bne.n	8004fd2 <vQueueWaitForMessageRestricted+0x2a>
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fd8:	b25b      	sxtb	r3, r3
 8004fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fde:	d103      	bne.n	8004fe8 <vQueueWaitForMessageRestricted+0x40>
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fe8:	f001 fbe4 	bl	80067b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d106      	bne.n	8005002 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	3324      	adds	r3, #36	; 0x24
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	68b9      	ldr	r1, [r7, #8]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 fc61 	bl	80058c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005002:	6978      	ldr	r0, [r7, #20]
 8005004:	f7ff ff26 	bl	8004e54 <prvUnlockQueue>
	}
 8005008:	bf00      	nop
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005010:	b580      	push	{r7, lr}
 8005012:	b08e      	sub	sp, #56	; 0x38
 8005014:	af04      	add	r7, sp, #16
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
 800501c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800501e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10a      	bne.n	800503a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	623b      	str	r3, [r7, #32]
}
 8005036:	bf00      	nop
 8005038:	e7fe      	b.n	8005038 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800503a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10a      	bne.n	8005056 <xTaskCreateStatic+0x46>
	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	61fb      	str	r3, [r7, #28]
}
 8005052:	bf00      	nop
 8005054:	e7fe      	b.n	8005054 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005056:	23bc      	movs	r3, #188	; 0xbc
 8005058:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	2bbc      	cmp	r3, #188	; 0xbc
 800505e:	d00a      	beq.n	8005076 <xTaskCreateStatic+0x66>
	__asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	61bb      	str	r3, [r7, #24]
}
 8005072:	bf00      	nop
 8005074:	e7fe      	b.n	8005074 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005076:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507a:	2b00      	cmp	r3, #0
 800507c:	d01e      	beq.n	80050bc <xTaskCreateStatic+0xac>
 800507e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01b      	beq.n	80050bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800508c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	2202      	movs	r2, #2
 8005092:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005096:	2300      	movs	r3, #0
 8005098:	9303      	str	r3, [sp, #12]
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	9302      	str	r3, [sp, #8]
 800509e:	f107 0314 	add.w	r3, r7, #20
 80050a2:	9301      	str	r3, [sp, #4]
 80050a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	68b9      	ldr	r1, [r7, #8]
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 f850 	bl	8005154 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050b6:	f000 f8f3 	bl	80052a0 <prvAddNewTaskToReadyList>
 80050ba:	e001      	b.n	80050c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80050bc:	2300      	movs	r3, #0
 80050be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050c0:	697b      	ldr	r3, [r7, #20]
	}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3728      	adds	r7, #40	; 0x28
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b08c      	sub	sp, #48	; 0x30
 80050ce:	af04      	add	r7, sp, #16
 80050d0:	60f8      	str	r0, [r7, #12]
 80050d2:	60b9      	str	r1, [r7, #8]
 80050d4:	603b      	str	r3, [r7, #0]
 80050d6:	4613      	mov	r3, r2
 80050d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80050da:	88fb      	ldrh	r3, [r7, #6]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4618      	mov	r0, r3
 80050e0:	f001 fc5a 	bl	8006998 <pvPortMalloc>
 80050e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00e      	beq.n	800510a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050ec:	20bc      	movs	r0, #188	; 0xbc
 80050ee:	f001 fc53 	bl	8006998 <pvPortMalloc>
 80050f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	631a      	str	r2, [r3, #48]	; 0x30
 8005100:	e005      	b.n	800510e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005102:	6978      	ldr	r0, [r7, #20]
 8005104:	f001 fd14 	bl	8006b30 <vPortFree>
 8005108:	e001      	b.n	800510e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800510a:	2300      	movs	r3, #0
 800510c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d017      	beq.n	8005144 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800511c:	88fa      	ldrh	r2, [r7, #6]
 800511e:	2300      	movs	r3, #0
 8005120:	9303      	str	r3, [sp, #12]
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	9302      	str	r3, [sp, #8]
 8005126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005128:	9301      	str	r3, [sp, #4]
 800512a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68b9      	ldr	r1, [r7, #8]
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 f80e 	bl	8005154 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005138:	69f8      	ldr	r0, [r7, #28]
 800513a:	f000 f8b1 	bl	80052a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800513e:	2301      	movs	r3, #1
 8005140:	61bb      	str	r3, [r7, #24]
 8005142:	e002      	b.n	800514a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005144:	f04f 33ff 	mov.w	r3, #4294967295
 8005148:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800514a:	69bb      	ldr	r3, [r7, #24]
	}
 800514c:	4618      	mov	r0, r3
 800514e:	3720      	adds	r7, #32
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
 8005160:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005164:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	461a      	mov	r2, r3
 800516c:	21a5      	movs	r1, #165	; 0xa5
 800516e:	f001 ff2e 	bl	8006fce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800517c:	3b01      	subs	r3, #1
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	f023 0307 	bic.w	r3, r3, #7
 800518a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <prvInitialiseNewTask+0x58>
	__asm volatile
 8005196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519a:	f383 8811 	msr	BASEPRI, r3
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	617b      	str	r3, [r7, #20]
}
 80051a8:	bf00      	nop
 80051aa:	e7fe      	b.n	80051aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d01f      	beq.n	80051f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051b2:	2300      	movs	r3, #0
 80051b4:	61fb      	str	r3, [r7, #28]
 80051b6:	e012      	b.n	80051de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	4413      	add	r3, r2
 80051be:	7819      	ldrb	r1, [r3, #0]
 80051c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	4413      	add	r3, r2
 80051c6:	3334      	adds	r3, #52	; 0x34
 80051c8:	460a      	mov	r2, r1
 80051ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	4413      	add	r3, r2
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d006      	beq.n	80051e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	3301      	adds	r3, #1
 80051dc:	61fb      	str	r3, [r7, #28]
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	2b0f      	cmp	r3, #15
 80051e2:	d9e9      	bls.n	80051b8 <prvInitialiseNewTask+0x64>
 80051e4:	e000      	b.n	80051e8 <prvInitialiseNewTask+0x94>
			{
				break;
 80051e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051f0:	e003      	b.n	80051fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fc:	2b37      	cmp	r3, #55	; 0x37
 80051fe:	d901      	bls.n	8005204 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005200:	2337      	movs	r3, #55	; 0x37
 8005202:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005208:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800520a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800520e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005212:	2200      	movs	r2, #0
 8005214:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	3304      	adds	r3, #4
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff f978 	bl	8004510 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005222:	3318      	adds	r3, #24
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff f973 	bl	8004510 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800522a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800522e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005232:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005238:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800523e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005242:	2200      	movs	r2, #0
 8005244:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524a:	2200      	movs	r2, #0
 800524c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005252:	3354      	adds	r3, #84	; 0x54
 8005254:	2260      	movs	r2, #96	; 0x60
 8005256:	2100      	movs	r1, #0
 8005258:	4618      	mov	r0, r3
 800525a:	f001 feb8 	bl	8006fce <memset>
 800525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005260:	4a0c      	ldr	r2, [pc, #48]	; (8005294 <prvInitialiseNewTask+0x140>)
 8005262:	659a      	str	r2, [r3, #88]	; 0x58
 8005264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005266:	4a0c      	ldr	r2, [pc, #48]	; (8005298 <prvInitialiseNewTask+0x144>)
 8005268:	65da      	str	r2, [r3, #92]	; 0x5c
 800526a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526c:	4a0b      	ldr	r2, [pc, #44]	; (800529c <prvInitialiseNewTask+0x148>)
 800526e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	68f9      	ldr	r1, [r7, #12]
 8005274:	69b8      	ldr	r0, [r7, #24]
 8005276:	f001 f941 	bl	80064fc <pxPortInitialiseStack>
 800527a:	4602      	mov	r2, r0
 800527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800528a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800528c:	bf00      	nop
 800528e:	3720      	adds	r7, #32
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	08008b98 	.word	0x08008b98
 8005298:	08008bb8 	.word	0x08008bb8
 800529c:	08008b78 	.word	0x08008b78

080052a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052a8:	f001 fa54 	bl	8006754 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052ac:	4b2d      	ldr	r3, [pc, #180]	; (8005364 <prvAddNewTaskToReadyList+0xc4>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3301      	adds	r3, #1
 80052b2:	4a2c      	ldr	r2, [pc, #176]	; (8005364 <prvAddNewTaskToReadyList+0xc4>)
 80052b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052b6:	4b2c      	ldr	r3, [pc, #176]	; (8005368 <prvAddNewTaskToReadyList+0xc8>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d109      	bne.n	80052d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052be:	4a2a      	ldr	r2, [pc, #168]	; (8005368 <prvAddNewTaskToReadyList+0xc8>)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052c4:	4b27      	ldr	r3, [pc, #156]	; (8005364 <prvAddNewTaskToReadyList+0xc4>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d110      	bne.n	80052ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052cc:	f000 fc26 	bl	8005b1c <prvInitialiseTaskLists>
 80052d0:	e00d      	b.n	80052ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052d2:	4b26      	ldr	r3, [pc, #152]	; (800536c <prvAddNewTaskToReadyList+0xcc>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d109      	bne.n	80052ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052da:	4b23      	ldr	r3, [pc, #140]	; (8005368 <prvAddNewTaskToReadyList+0xc8>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d802      	bhi.n	80052ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052e8:	4a1f      	ldr	r2, [pc, #124]	; (8005368 <prvAddNewTaskToReadyList+0xc8>)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052ee:	4b20      	ldr	r3, [pc, #128]	; (8005370 <prvAddNewTaskToReadyList+0xd0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3301      	adds	r3, #1
 80052f4:	4a1e      	ldr	r2, [pc, #120]	; (8005370 <prvAddNewTaskToReadyList+0xd0>)
 80052f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80052f8:	4b1d      	ldr	r3, [pc, #116]	; (8005370 <prvAddNewTaskToReadyList+0xd0>)
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005304:	4b1b      	ldr	r3, [pc, #108]	; (8005374 <prvAddNewTaskToReadyList+0xd4>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d903      	bls.n	8005314 <prvAddNewTaskToReadyList+0x74>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005310:	4a18      	ldr	r2, [pc, #96]	; (8005374 <prvAddNewTaskToReadyList+0xd4>)
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4a15      	ldr	r2, [pc, #84]	; (8005378 <prvAddNewTaskToReadyList+0xd8>)
 8005322:	441a      	add	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3304      	adds	r3, #4
 8005328:	4619      	mov	r1, r3
 800532a:	4610      	mov	r0, r2
 800532c:	f7ff f8fd 	bl	800452a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005330:	f001 fa40 	bl	80067b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005334:	4b0d      	ldr	r3, [pc, #52]	; (800536c <prvAddNewTaskToReadyList+0xcc>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00e      	beq.n	800535a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800533c:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <prvAddNewTaskToReadyList+0xc8>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005346:	429a      	cmp	r2, r3
 8005348:	d207      	bcs.n	800535a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800534a:	4b0c      	ldr	r3, [pc, #48]	; (800537c <prvAddNewTaskToReadyList+0xdc>)
 800534c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800535a:	bf00      	nop
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20000ce4 	.word	0x20000ce4
 8005368:	20000810 	.word	0x20000810
 800536c:	20000cf0 	.word	0x20000cf0
 8005370:	20000d00 	.word	0x20000d00
 8005374:	20000cec 	.word	0x20000cec
 8005378:	20000814 	.word	0x20000814
 800537c:	e000ed04 	.word	0xe000ed04

08005380 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005388:	2300      	movs	r3, #0
 800538a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d017      	beq.n	80053c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005392:	4b13      	ldr	r3, [pc, #76]	; (80053e0 <vTaskDelay+0x60>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00a      	beq.n	80053b0 <vTaskDelay+0x30>
	__asm volatile
 800539a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	60bb      	str	r3, [r7, #8]
}
 80053ac:	bf00      	nop
 80053ae:	e7fe      	b.n	80053ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80053b0:	f000 f88a 	bl	80054c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053b4:	2100      	movs	r1, #0
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fcfe 	bl	8005db8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053bc:	f000 f892 	bl	80054e4 <xTaskResumeAll>
 80053c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d107      	bne.n	80053d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80053c8:	4b06      	ldr	r3, [pc, #24]	; (80053e4 <vTaskDelay+0x64>)
 80053ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ce:	601a      	str	r2, [r3, #0]
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053d8:	bf00      	nop
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	20000d0c 	.word	0x20000d0c
 80053e4:	e000ed04 	.word	0xe000ed04

080053e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08a      	sub	sp, #40	; 0x28
 80053ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053f6:	463a      	mov	r2, r7
 80053f8:	1d39      	adds	r1, r7, #4
 80053fa:	f107 0308 	add.w	r3, r7, #8
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff f832 	bl	8004468 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005404:	6839      	ldr	r1, [r7, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	9202      	str	r2, [sp, #8]
 800540c:	9301      	str	r3, [sp, #4]
 800540e:	2300      	movs	r3, #0
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	2300      	movs	r3, #0
 8005414:	460a      	mov	r2, r1
 8005416:	4924      	ldr	r1, [pc, #144]	; (80054a8 <vTaskStartScheduler+0xc0>)
 8005418:	4824      	ldr	r0, [pc, #144]	; (80054ac <vTaskStartScheduler+0xc4>)
 800541a:	f7ff fdf9 	bl	8005010 <xTaskCreateStatic>
 800541e:	4603      	mov	r3, r0
 8005420:	4a23      	ldr	r2, [pc, #140]	; (80054b0 <vTaskStartScheduler+0xc8>)
 8005422:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005424:	4b22      	ldr	r3, [pc, #136]	; (80054b0 <vTaskStartScheduler+0xc8>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800542c:	2301      	movs	r3, #1
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	e001      	b.n	8005436 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005432:	2300      	movs	r3, #0
 8005434:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d102      	bne.n	8005442 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800543c:	f000 fd10 	bl	8005e60 <xTimerCreateTimerTask>
 8005440:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d11b      	bne.n	8005480 <vTaskStartScheduler+0x98>
	__asm volatile
 8005448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	613b      	str	r3, [r7, #16]
}
 800545a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800545c:	4b15      	ldr	r3, [pc, #84]	; (80054b4 <vTaskStartScheduler+0xcc>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3354      	adds	r3, #84	; 0x54
 8005462:	4a15      	ldr	r2, [pc, #84]	; (80054b8 <vTaskStartScheduler+0xd0>)
 8005464:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005466:	4b15      	ldr	r3, [pc, #84]	; (80054bc <vTaskStartScheduler+0xd4>)
 8005468:	f04f 32ff 	mov.w	r2, #4294967295
 800546c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800546e:	4b14      	ldr	r3, [pc, #80]	; (80054c0 <vTaskStartScheduler+0xd8>)
 8005470:	2201      	movs	r2, #1
 8005472:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005474:	4b13      	ldr	r3, [pc, #76]	; (80054c4 <vTaskStartScheduler+0xdc>)
 8005476:	2200      	movs	r2, #0
 8005478:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800547a:	f001 f8c9 	bl	8006610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800547e:	e00e      	b.n	800549e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005486:	d10a      	bne.n	800549e <vTaskStartScheduler+0xb6>
	__asm volatile
 8005488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	60fb      	str	r3, [r7, #12]
}
 800549a:	bf00      	nop
 800549c:	e7fe      	b.n	800549c <vTaskStartScheduler+0xb4>
}
 800549e:	bf00      	nop
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	08008030 	.word	0x08008030
 80054ac:	08005aed 	.word	0x08005aed
 80054b0:	20000d08 	.word	0x20000d08
 80054b4:	20000810 	.word	0x20000810
 80054b8:	20000010 	.word	0x20000010
 80054bc:	20000d04 	.word	0x20000d04
 80054c0:	20000cf0 	.word	0x20000cf0
 80054c4:	20000ce8 	.word	0x20000ce8

080054c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80054cc:	4b04      	ldr	r3, [pc, #16]	; (80054e0 <vTaskSuspendAll+0x18>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3301      	adds	r3, #1
 80054d2:	4a03      	ldr	r2, [pc, #12]	; (80054e0 <vTaskSuspendAll+0x18>)
 80054d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054d6:	bf00      	nop
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	20000d0c 	.word	0x20000d0c

080054e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054ea:	2300      	movs	r3, #0
 80054ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054ee:	2300      	movs	r3, #0
 80054f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054f2:	4b42      	ldr	r3, [pc, #264]	; (80055fc <xTaskResumeAll+0x118>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10a      	bne.n	8005510 <xTaskResumeAll+0x2c>
	__asm volatile
 80054fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	603b      	str	r3, [r7, #0]
}
 800550c:	bf00      	nop
 800550e:	e7fe      	b.n	800550e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005510:	f001 f920 	bl	8006754 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005514:	4b39      	ldr	r3, [pc, #228]	; (80055fc <xTaskResumeAll+0x118>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	3b01      	subs	r3, #1
 800551a:	4a38      	ldr	r2, [pc, #224]	; (80055fc <xTaskResumeAll+0x118>)
 800551c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800551e:	4b37      	ldr	r3, [pc, #220]	; (80055fc <xTaskResumeAll+0x118>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d162      	bne.n	80055ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005526:	4b36      	ldr	r3, [pc, #216]	; (8005600 <xTaskResumeAll+0x11c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d05e      	beq.n	80055ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800552e:	e02f      	b.n	8005590 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005530:	4b34      	ldr	r3, [pc, #208]	; (8005604 <xTaskResumeAll+0x120>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	3318      	adds	r3, #24
 800553c:	4618      	mov	r0, r3
 800553e:	f7ff f851 	bl	80045e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	3304      	adds	r3, #4
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff f84c 	bl	80045e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005550:	4b2d      	ldr	r3, [pc, #180]	; (8005608 <xTaskResumeAll+0x124>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d903      	bls.n	8005560 <xTaskResumeAll+0x7c>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555c:	4a2a      	ldr	r2, [pc, #168]	; (8005608 <xTaskResumeAll+0x124>)
 800555e:	6013      	str	r3, [r2, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005564:	4613      	mov	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4a27      	ldr	r2, [pc, #156]	; (800560c <xTaskResumeAll+0x128>)
 800556e:	441a      	add	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	3304      	adds	r3, #4
 8005574:	4619      	mov	r1, r3
 8005576:	4610      	mov	r0, r2
 8005578:	f7fe ffd7 	bl	800452a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005580:	4b23      	ldr	r3, [pc, #140]	; (8005610 <xTaskResumeAll+0x12c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005586:	429a      	cmp	r2, r3
 8005588:	d302      	bcc.n	8005590 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800558a:	4b22      	ldr	r3, [pc, #136]	; (8005614 <xTaskResumeAll+0x130>)
 800558c:	2201      	movs	r2, #1
 800558e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005590:	4b1c      	ldr	r3, [pc, #112]	; (8005604 <xTaskResumeAll+0x120>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1cb      	bne.n	8005530 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800559e:	f000 fb5f 	bl	8005c60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055a2:	4b1d      	ldr	r3, [pc, #116]	; (8005618 <xTaskResumeAll+0x134>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d010      	beq.n	80055d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055ae:	f000 f847 	bl	8005640 <xTaskIncrementTick>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80055b8:	4b16      	ldr	r3, [pc, #88]	; (8005614 <xTaskResumeAll+0x130>)
 80055ba:	2201      	movs	r2, #1
 80055bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3b01      	subs	r3, #1
 80055c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f1      	bne.n	80055ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80055ca:	4b13      	ldr	r3, [pc, #76]	; (8005618 <xTaskResumeAll+0x134>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055d0:	4b10      	ldr	r3, [pc, #64]	; (8005614 <xTaskResumeAll+0x130>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d009      	beq.n	80055ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055d8:	2301      	movs	r3, #1
 80055da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055dc:	4b0f      	ldr	r3, [pc, #60]	; (800561c <xTaskResumeAll+0x138>)
 80055de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055ec:	f001 f8e2 	bl	80067b4 <vPortExitCritical>

	return xAlreadyYielded;
 80055f0:	68bb      	ldr	r3, [r7, #8]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20000d0c 	.word	0x20000d0c
 8005600:	20000ce4 	.word	0x20000ce4
 8005604:	20000ca4 	.word	0x20000ca4
 8005608:	20000cec 	.word	0x20000cec
 800560c:	20000814 	.word	0x20000814
 8005610:	20000810 	.word	0x20000810
 8005614:	20000cf8 	.word	0x20000cf8
 8005618:	20000cf4 	.word	0x20000cf4
 800561c:	e000ed04 	.word	0xe000ed04

08005620 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005626:	4b05      	ldr	r3, [pc, #20]	; (800563c <xTaskGetTickCount+0x1c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800562c:	687b      	ldr	r3, [r7, #4]
}
 800562e:	4618      	mov	r0, r3
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	20000ce8 	.word	0x20000ce8

08005640 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005646:	2300      	movs	r3, #0
 8005648:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800564a:	4b4f      	ldr	r3, [pc, #316]	; (8005788 <xTaskIncrementTick+0x148>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f040 808f 	bne.w	8005772 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005654:	4b4d      	ldr	r3, [pc, #308]	; (800578c <xTaskIncrementTick+0x14c>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3301      	adds	r3, #1
 800565a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800565c:	4a4b      	ldr	r2, [pc, #300]	; (800578c <xTaskIncrementTick+0x14c>)
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d120      	bne.n	80056aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005668:	4b49      	ldr	r3, [pc, #292]	; (8005790 <xTaskIncrementTick+0x150>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00a      	beq.n	8005688 <xTaskIncrementTick+0x48>
	__asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	603b      	str	r3, [r7, #0]
}
 8005684:	bf00      	nop
 8005686:	e7fe      	b.n	8005686 <xTaskIncrementTick+0x46>
 8005688:	4b41      	ldr	r3, [pc, #260]	; (8005790 <xTaskIncrementTick+0x150>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	4b41      	ldr	r3, [pc, #260]	; (8005794 <xTaskIncrementTick+0x154>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a3f      	ldr	r2, [pc, #252]	; (8005790 <xTaskIncrementTick+0x150>)
 8005694:	6013      	str	r3, [r2, #0]
 8005696:	4a3f      	ldr	r2, [pc, #252]	; (8005794 <xTaskIncrementTick+0x154>)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	4b3e      	ldr	r3, [pc, #248]	; (8005798 <xTaskIncrementTick+0x158>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3301      	adds	r3, #1
 80056a2:	4a3d      	ldr	r2, [pc, #244]	; (8005798 <xTaskIncrementTick+0x158>)
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	f000 fadb 	bl	8005c60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056aa:	4b3c      	ldr	r3, [pc, #240]	; (800579c <xTaskIncrementTick+0x15c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d349      	bcc.n	8005748 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056b4:	4b36      	ldr	r3, [pc, #216]	; (8005790 <xTaskIncrementTick+0x150>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d104      	bne.n	80056c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056be:	4b37      	ldr	r3, [pc, #220]	; (800579c <xTaskIncrementTick+0x15c>)
 80056c0:	f04f 32ff 	mov.w	r2, #4294967295
 80056c4:	601a      	str	r2, [r3, #0]
					break;
 80056c6:	e03f      	b.n	8005748 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056c8:	4b31      	ldr	r3, [pc, #196]	; (8005790 <xTaskIncrementTick+0x150>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d203      	bcs.n	80056e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056e0:	4a2e      	ldr	r2, [pc, #184]	; (800579c <xTaskIncrementTick+0x15c>)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056e6:	e02f      	b.n	8005748 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	3304      	adds	r3, #4
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fe ff79 	bl	80045e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d004      	beq.n	8005704 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	3318      	adds	r3, #24
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fe ff70 	bl	80045e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005708:	4b25      	ldr	r3, [pc, #148]	; (80057a0 <xTaskIncrementTick+0x160>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d903      	bls.n	8005718 <xTaskIncrementTick+0xd8>
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005714:	4a22      	ldr	r2, [pc, #136]	; (80057a0 <xTaskIncrementTick+0x160>)
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800571c:	4613      	mov	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4a1f      	ldr	r2, [pc, #124]	; (80057a4 <xTaskIncrementTick+0x164>)
 8005726:	441a      	add	r2, r3
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	3304      	adds	r3, #4
 800572c:	4619      	mov	r1, r3
 800572e:	4610      	mov	r0, r2
 8005730:	f7fe fefb 	bl	800452a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005738:	4b1b      	ldr	r3, [pc, #108]	; (80057a8 <xTaskIncrementTick+0x168>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573e:	429a      	cmp	r2, r3
 8005740:	d3b8      	bcc.n	80056b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005742:	2301      	movs	r3, #1
 8005744:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005746:	e7b5      	b.n	80056b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005748:	4b17      	ldr	r3, [pc, #92]	; (80057a8 <xTaskIncrementTick+0x168>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574e:	4915      	ldr	r1, [pc, #84]	; (80057a4 <xTaskIncrementTick+0x164>)
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d901      	bls.n	8005764 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005760:	2301      	movs	r3, #1
 8005762:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005764:	4b11      	ldr	r3, [pc, #68]	; (80057ac <xTaskIncrementTick+0x16c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d007      	beq.n	800577c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800576c:	2301      	movs	r3, #1
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	e004      	b.n	800577c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005772:	4b0f      	ldr	r3, [pc, #60]	; (80057b0 <xTaskIncrementTick+0x170>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3301      	adds	r3, #1
 8005778:	4a0d      	ldr	r2, [pc, #52]	; (80057b0 <xTaskIncrementTick+0x170>)
 800577a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800577c:	697b      	ldr	r3, [r7, #20]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20000d0c 	.word	0x20000d0c
 800578c:	20000ce8 	.word	0x20000ce8
 8005790:	20000c9c 	.word	0x20000c9c
 8005794:	20000ca0 	.word	0x20000ca0
 8005798:	20000cfc 	.word	0x20000cfc
 800579c:	20000d04 	.word	0x20000d04
 80057a0:	20000cec 	.word	0x20000cec
 80057a4:	20000814 	.word	0x20000814
 80057a8:	20000810 	.word	0x20000810
 80057ac:	20000cf8 	.word	0x20000cf8
 80057b0:	20000cf4 	.word	0x20000cf4

080057b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057ba:	4b2a      	ldr	r3, [pc, #168]	; (8005864 <vTaskSwitchContext+0xb0>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057c2:	4b29      	ldr	r3, [pc, #164]	; (8005868 <vTaskSwitchContext+0xb4>)
 80057c4:	2201      	movs	r2, #1
 80057c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057c8:	e046      	b.n	8005858 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80057ca:	4b27      	ldr	r3, [pc, #156]	; (8005868 <vTaskSwitchContext+0xb4>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057d0:	4b26      	ldr	r3, [pc, #152]	; (800586c <vTaskSwitchContext+0xb8>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	60fb      	str	r3, [r7, #12]
 80057d6:	e010      	b.n	80057fa <vTaskSwitchContext+0x46>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10a      	bne.n	80057f4 <vTaskSwitchContext+0x40>
	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	607b      	str	r3, [r7, #4]
}
 80057f0:	bf00      	nop
 80057f2:	e7fe      	b.n	80057f2 <vTaskSwitchContext+0x3e>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	491d      	ldr	r1, [pc, #116]	; (8005870 <vTaskSwitchContext+0xbc>)
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	440b      	add	r3, r1
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0e4      	beq.n	80057d8 <vTaskSwitchContext+0x24>
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	4613      	mov	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4a15      	ldr	r2, [pc, #84]	; (8005870 <vTaskSwitchContext+0xbc>)
 800581a:	4413      	add	r3, r2
 800581c:	60bb      	str	r3, [r7, #8]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	605a      	str	r2, [r3, #4]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	3308      	adds	r3, #8
 8005830:	429a      	cmp	r2, r3
 8005832:	d104      	bne.n	800583e <vTaskSwitchContext+0x8a>
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	605a      	str	r2, [r3, #4]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	4a0b      	ldr	r2, [pc, #44]	; (8005874 <vTaskSwitchContext+0xc0>)
 8005846:	6013      	str	r3, [r2, #0]
 8005848:	4a08      	ldr	r2, [pc, #32]	; (800586c <vTaskSwitchContext+0xb8>)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800584e:	4b09      	ldr	r3, [pc, #36]	; (8005874 <vTaskSwitchContext+0xc0>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3354      	adds	r3, #84	; 0x54
 8005854:	4a08      	ldr	r2, [pc, #32]	; (8005878 <vTaskSwitchContext+0xc4>)
 8005856:	6013      	str	r3, [r2, #0]
}
 8005858:	bf00      	nop
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	20000d0c 	.word	0x20000d0c
 8005868:	20000cf8 	.word	0x20000cf8
 800586c:	20000cec 	.word	0x20000cec
 8005870:	20000814 	.word	0x20000814
 8005874:	20000810 	.word	0x20000810
 8005878:	20000010 	.word	0x20000010

0800587c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10a      	bne.n	80058a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800588c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	60fb      	str	r3, [r7, #12]
}
 800589e:	bf00      	nop
 80058a0:	e7fe      	b.n	80058a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058a2:	4b07      	ldr	r3, [pc, #28]	; (80058c0 <vTaskPlaceOnEventList+0x44>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	3318      	adds	r3, #24
 80058a8:	4619      	mov	r1, r3
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7fe fe61 	bl	8004572 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058b0:	2101      	movs	r1, #1
 80058b2:	6838      	ldr	r0, [r7, #0]
 80058b4:	f000 fa80 	bl	8005db8 <prvAddCurrentTaskToDelayedList>
}
 80058b8:	bf00      	nop
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	20000810 	.word	0x20000810

080058c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10a      	bne.n	80058ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80058d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	617b      	str	r3, [r7, #20]
}
 80058e8:	bf00      	nop
 80058ea:	e7fe      	b.n	80058ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058ec:	4b0a      	ldr	r3, [pc, #40]	; (8005918 <vTaskPlaceOnEventListRestricted+0x54>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3318      	adds	r3, #24
 80058f2:	4619      	mov	r1, r3
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f7fe fe18 	bl	800452a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d002      	beq.n	8005906 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005900:	f04f 33ff 	mov.w	r3, #4294967295
 8005904:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005906:	6879      	ldr	r1, [r7, #4]
 8005908:	68b8      	ldr	r0, [r7, #8]
 800590a:	f000 fa55 	bl	8005db8 <prvAddCurrentTaskToDelayedList>
	}
 800590e:	bf00      	nop
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	20000810 	.word	0x20000810

0800591c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10a      	bne.n	8005948 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	60fb      	str	r3, [r7, #12]
}
 8005944:	bf00      	nop
 8005946:	e7fe      	b.n	8005946 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	3318      	adds	r3, #24
 800594c:	4618      	mov	r0, r3
 800594e:	f7fe fe49 	bl	80045e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005952:	4b1e      	ldr	r3, [pc, #120]	; (80059cc <xTaskRemoveFromEventList+0xb0>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d11d      	bne.n	8005996 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	3304      	adds	r3, #4
 800595e:	4618      	mov	r0, r3
 8005960:	f7fe fe40 	bl	80045e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005968:	4b19      	ldr	r3, [pc, #100]	; (80059d0 <xTaskRemoveFromEventList+0xb4>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	429a      	cmp	r2, r3
 800596e:	d903      	bls.n	8005978 <xTaskRemoveFromEventList+0x5c>
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005974:	4a16      	ldr	r2, [pc, #88]	; (80059d0 <xTaskRemoveFromEventList+0xb4>)
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597c:	4613      	mov	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4a13      	ldr	r2, [pc, #76]	; (80059d4 <xTaskRemoveFromEventList+0xb8>)
 8005986:	441a      	add	r2, r3
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	3304      	adds	r3, #4
 800598c:	4619      	mov	r1, r3
 800598e:	4610      	mov	r0, r2
 8005990:	f7fe fdcb 	bl	800452a <vListInsertEnd>
 8005994:	e005      	b.n	80059a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	3318      	adds	r3, #24
 800599a:	4619      	mov	r1, r3
 800599c:	480e      	ldr	r0, [pc, #56]	; (80059d8 <xTaskRemoveFromEventList+0xbc>)
 800599e:	f7fe fdc4 	bl	800452a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a6:	4b0d      	ldr	r3, [pc, #52]	; (80059dc <xTaskRemoveFromEventList+0xc0>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d905      	bls.n	80059bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059b0:	2301      	movs	r3, #1
 80059b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059b4:	4b0a      	ldr	r3, [pc, #40]	; (80059e0 <xTaskRemoveFromEventList+0xc4>)
 80059b6:	2201      	movs	r2, #1
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	e001      	b.n	80059c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80059bc:	2300      	movs	r3, #0
 80059be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80059c0:	697b      	ldr	r3, [r7, #20]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20000d0c 	.word	0x20000d0c
 80059d0:	20000cec 	.word	0x20000cec
 80059d4:	20000814 	.word	0x20000814
 80059d8:	20000ca4 	.word	0x20000ca4
 80059dc:	20000810 	.word	0x20000810
 80059e0:	20000cf8 	.word	0x20000cf8

080059e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059ec:	4b06      	ldr	r3, [pc, #24]	; (8005a08 <vTaskInternalSetTimeOutState+0x24>)
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059f4:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <vTaskInternalSetTimeOutState+0x28>)
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	605a      	str	r2, [r3, #4]
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	20000cfc 	.word	0x20000cfc
 8005a0c:	20000ce8 	.word	0x20000ce8

08005a10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b088      	sub	sp, #32
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10a      	bne.n	8005a36 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	613b      	str	r3, [r7, #16]
}
 8005a32:	bf00      	nop
 8005a34:	e7fe      	b.n	8005a34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10a      	bne.n	8005a52 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	60fb      	str	r3, [r7, #12]
}
 8005a4e:	bf00      	nop
 8005a50:	e7fe      	b.n	8005a50 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005a52:	f000 fe7f 	bl	8006754 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a56:	4b1d      	ldr	r3, [pc, #116]	; (8005acc <xTaskCheckForTimeOut+0xbc>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6e:	d102      	bne.n	8005a76 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a70:	2300      	movs	r3, #0
 8005a72:	61fb      	str	r3, [r7, #28]
 8005a74:	e023      	b.n	8005abe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	4b15      	ldr	r3, [pc, #84]	; (8005ad0 <xTaskCheckForTimeOut+0xc0>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d007      	beq.n	8005a92 <xTaskCheckForTimeOut+0x82>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d302      	bcc.n	8005a92 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	61fb      	str	r3, [r7, #28]
 8005a90:	e015      	b.n	8005abe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d20b      	bcs.n	8005ab4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	1ad2      	subs	r2, r2, r3
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7ff ff9b 	bl	80059e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61fb      	str	r3, [r7, #28]
 8005ab2:	e004      	b.n	8005abe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005aba:	2301      	movs	r3, #1
 8005abc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005abe:	f000 fe79 	bl	80067b4 <vPortExitCritical>

	return xReturn;
 8005ac2:	69fb      	ldr	r3, [r7, #28]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3720      	adds	r7, #32
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	20000ce8 	.word	0x20000ce8
 8005ad0:	20000cfc 	.word	0x20000cfc

08005ad4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ad8:	4b03      	ldr	r3, [pc, #12]	; (8005ae8 <vTaskMissedYield+0x14>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	601a      	str	r2, [r3, #0]
}
 8005ade:	bf00      	nop
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	20000cf8 	.word	0x20000cf8

08005aec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005af4:	f000 f852 	bl	8005b9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005af8:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <prvIdleTask+0x28>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d9f9      	bls.n	8005af4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b00:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <prvIdleTask+0x2c>)
 8005b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b10:	e7f0      	b.n	8005af4 <prvIdleTask+0x8>
 8005b12:	bf00      	nop
 8005b14:	20000814 	.word	0x20000814
 8005b18:	e000ed04 	.word	0xe000ed04

08005b1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b22:	2300      	movs	r3, #0
 8005b24:	607b      	str	r3, [r7, #4]
 8005b26:	e00c      	b.n	8005b42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4a12      	ldr	r2, [pc, #72]	; (8005b7c <prvInitialiseTaskLists+0x60>)
 8005b34:	4413      	add	r3, r2
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fe fcca 	bl	80044d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	607b      	str	r3, [r7, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b37      	cmp	r3, #55	; 0x37
 8005b46:	d9ef      	bls.n	8005b28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b48:	480d      	ldr	r0, [pc, #52]	; (8005b80 <prvInitialiseTaskLists+0x64>)
 8005b4a:	f7fe fcc1 	bl	80044d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b4e:	480d      	ldr	r0, [pc, #52]	; (8005b84 <prvInitialiseTaskLists+0x68>)
 8005b50:	f7fe fcbe 	bl	80044d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b54:	480c      	ldr	r0, [pc, #48]	; (8005b88 <prvInitialiseTaskLists+0x6c>)
 8005b56:	f7fe fcbb 	bl	80044d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b5a:	480c      	ldr	r0, [pc, #48]	; (8005b8c <prvInitialiseTaskLists+0x70>)
 8005b5c:	f7fe fcb8 	bl	80044d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b60:	480b      	ldr	r0, [pc, #44]	; (8005b90 <prvInitialiseTaskLists+0x74>)
 8005b62:	f7fe fcb5 	bl	80044d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b66:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <prvInitialiseTaskLists+0x78>)
 8005b68:	4a05      	ldr	r2, [pc, #20]	; (8005b80 <prvInitialiseTaskLists+0x64>)
 8005b6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b6c:	4b0a      	ldr	r3, [pc, #40]	; (8005b98 <prvInitialiseTaskLists+0x7c>)
 8005b6e:	4a05      	ldr	r2, [pc, #20]	; (8005b84 <prvInitialiseTaskLists+0x68>)
 8005b70:	601a      	str	r2, [r3, #0]
}
 8005b72:	bf00      	nop
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20000814 	.word	0x20000814
 8005b80:	20000c74 	.word	0x20000c74
 8005b84:	20000c88 	.word	0x20000c88
 8005b88:	20000ca4 	.word	0x20000ca4
 8005b8c:	20000cb8 	.word	0x20000cb8
 8005b90:	20000cd0 	.word	0x20000cd0
 8005b94:	20000c9c 	.word	0x20000c9c
 8005b98:	20000ca0 	.word	0x20000ca0

08005b9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ba2:	e019      	b.n	8005bd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ba4:	f000 fdd6 	bl	8006754 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ba8:	4b10      	ldr	r3, [pc, #64]	; (8005bec <prvCheckTasksWaitingTermination+0x50>)
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7fe fd15 	bl	80045e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bba:	4b0d      	ldr	r3, [pc, #52]	; (8005bf0 <prvCheckTasksWaitingTermination+0x54>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	4a0b      	ldr	r2, [pc, #44]	; (8005bf0 <prvCheckTasksWaitingTermination+0x54>)
 8005bc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bc4:	4b0b      	ldr	r3, [pc, #44]	; (8005bf4 <prvCheckTasksWaitingTermination+0x58>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	4a0a      	ldr	r2, [pc, #40]	; (8005bf4 <prvCheckTasksWaitingTermination+0x58>)
 8005bcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bce:	f000 fdf1 	bl	80067b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f810 	bl	8005bf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bd8:	4b06      	ldr	r3, [pc, #24]	; (8005bf4 <prvCheckTasksWaitingTermination+0x58>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1e1      	bne.n	8005ba4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005be0:	bf00      	nop
 8005be2:	bf00      	nop
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20000cb8 	.word	0x20000cb8
 8005bf0:	20000ce4 	.word	0x20000ce4
 8005bf4:	20000ccc 	.word	0x20000ccc

08005bf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	3354      	adds	r3, #84	; 0x54
 8005c04:	4618      	mov	r0, r3
 8005c06:	f001 fac1 	bl	800718c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d108      	bne.n	8005c26 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 ff89 	bl	8006b30 <vPortFree>
				vPortFree( pxTCB );
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 ff86 	bl	8006b30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c24:	e018      	b.n	8005c58 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d103      	bne.n	8005c38 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 ff7d 	bl	8006b30 <vPortFree>
	}
 8005c36:	e00f      	b.n	8005c58 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d00a      	beq.n	8005c58 <prvDeleteTCB+0x60>
	__asm volatile
 8005c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	60fb      	str	r3, [r7, #12]
}
 8005c54:	bf00      	nop
 8005c56:	e7fe      	b.n	8005c56 <prvDeleteTCB+0x5e>
	}
 8005c58:	bf00      	nop
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c66:	4b0c      	ldr	r3, [pc, #48]	; (8005c98 <prvResetNextTaskUnblockTime+0x38>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d104      	bne.n	8005c7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c70:	4b0a      	ldr	r3, [pc, #40]	; (8005c9c <prvResetNextTaskUnblockTime+0x3c>)
 8005c72:	f04f 32ff 	mov.w	r2, #4294967295
 8005c76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c78:	e008      	b.n	8005c8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c7a:	4b07      	ldr	r3, [pc, #28]	; (8005c98 <prvResetNextTaskUnblockTime+0x38>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	4a04      	ldr	r2, [pc, #16]	; (8005c9c <prvResetNextTaskUnblockTime+0x3c>)
 8005c8a:	6013      	str	r3, [r2, #0]
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	20000c9c 	.word	0x20000c9c
 8005c9c:	20000d04 	.word	0x20000d04

08005ca0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ca6:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <xTaskGetSchedulerState+0x34>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d102      	bne.n	8005cb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	607b      	str	r3, [r7, #4]
 8005cb2:	e008      	b.n	8005cc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cb4:	4b08      	ldr	r3, [pc, #32]	; (8005cd8 <xTaskGetSchedulerState+0x38>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d102      	bne.n	8005cc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	607b      	str	r3, [r7, #4]
 8005cc0:	e001      	b.n	8005cc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005cc6:	687b      	ldr	r3, [r7, #4]
	}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	20000cf0 	.word	0x20000cf0
 8005cd8:	20000d0c 	.word	0x20000d0c

08005cdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d056      	beq.n	8005da0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005cf2:	4b2e      	ldr	r3, [pc, #184]	; (8005dac <xTaskPriorityDisinherit+0xd0>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d00a      	beq.n	8005d12 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d00:	f383 8811 	msr	BASEPRI, r3
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	60fb      	str	r3, [r7, #12]
}
 8005d0e:	bf00      	nop
 8005d10:	e7fe      	b.n	8005d10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10a      	bne.n	8005d30 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	60bb      	str	r3, [r7, #8]
}
 8005d2c:	bf00      	nop
 8005d2e:	e7fe      	b.n	8005d2e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d34:	1e5a      	subs	r2, r3, #1
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d02c      	beq.n	8005da0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d128      	bne.n	8005da0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	3304      	adds	r3, #4
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fe fc46 	bl	80045e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d64:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d70:	4b0f      	ldr	r3, [pc, #60]	; (8005db0 <xTaskPriorityDisinherit+0xd4>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d903      	bls.n	8005d80 <xTaskPriorityDisinherit+0xa4>
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7c:	4a0c      	ldr	r2, [pc, #48]	; (8005db0 <xTaskPriorityDisinherit+0xd4>)
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d84:	4613      	mov	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4a09      	ldr	r2, [pc, #36]	; (8005db4 <xTaskPriorityDisinherit+0xd8>)
 8005d8e:	441a      	add	r2, r3
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	3304      	adds	r3, #4
 8005d94:	4619      	mov	r1, r3
 8005d96:	4610      	mov	r0, r2
 8005d98:	f7fe fbc7 	bl	800452a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005da0:	697b      	ldr	r3, [r7, #20]
	}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000810 	.word	0x20000810
 8005db0:	20000cec 	.word	0x20000cec
 8005db4:	20000814 	.word	0x20000814

08005db8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005dc2:	4b21      	ldr	r3, [pc, #132]	; (8005e48 <prvAddCurrentTaskToDelayedList+0x90>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dc8:	4b20      	ldr	r3, [pc, #128]	; (8005e4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	3304      	adds	r3, #4
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7fe fc08 	bl	80045e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dda:	d10a      	bne.n	8005df2 <prvAddCurrentTaskToDelayedList+0x3a>
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d007      	beq.n	8005df2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005de2:	4b1a      	ldr	r3, [pc, #104]	; (8005e4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	3304      	adds	r3, #4
 8005de8:	4619      	mov	r1, r3
 8005dea:	4819      	ldr	r0, [pc, #100]	; (8005e50 <prvAddCurrentTaskToDelayedList+0x98>)
 8005dec:	f7fe fb9d 	bl	800452a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005df0:	e026      	b.n	8005e40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4413      	add	r3, r2
 8005df8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005dfa:	4b14      	ldr	r3, [pc, #80]	; (8005e4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d209      	bcs.n	8005e1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e0a:	4b12      	ldr	r3, [pc, #72]	; (8005e54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	4b0f      	ldr	r3, [pc, #60]	; (8005e4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3304      	adds	r3, #4
 8005e14:	4619      	mov	r1, r3
 8005e16:	4610      	mov	r0, r2
 8005e18:	f7fe fbab 	bl	8004572 <vListInsert>
}
 8005e1c:	e010      	b.n	8005e40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e1e:	4b0e      	ldr	r3, [pc, #56]	; (8005e58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	4b0a      	ldr	r3, [pc, #40]	; (8005e4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	3304      	adds	r3, #4
 8005e28:	4619      	mov	r1, r3
 8005e2a:	4610      	mov	r0, r2
 8005e2c:	f7fe fba1 	bl	8004572 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e30:	4b0a      	ldr	r3, [pc, #40]	; (8005e5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d202      	bcs.n	8005e40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e3a:	4a08      	ldr	r2, [pc, #32]	; (8005e5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	6013      	str	r3, [r2, #0]
}
 8005e40:	bf00      	nop
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	20000ce8 	.word	0x20000ce8
 8005e4c:	20000810 	.word	0x20000810
 8005e50:	20000cd0 	.word	0x20000cd0
 8005e54:	20000ca0 	.word	0x20000ca0
 8005e58:	20000c9c 	.word	0x20000c9c
 8005e5c:	20000d04 	.word	0x20000d04

08005e60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08a      	sub	sp, #40	; 0x28
 8005e64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e66:	2300      	movs	r3, #0
 8005e68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e6a:	f000 fb07 	bl	800647c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e6e:	4b1c      	ldr	r3, [pc, #112]	; (8005ee0 <xTimerCreateTimerTask+0x80>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d021      	beq.n	8005eba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e7e:	1d3a      	adds	r2, r7, #4
 8005e80:	f107 0108 	add.w	r1, r7, #8
 8005e84:	f107 030c 	add.w	r3, r7, #12
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7fe fb07 	bl	800449c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e8e:	6879      	ldr	r1, [r7, #4]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	9202      	str	r2, [sp, #8]
 8005e96:	9301      	str	r3, [sp, #4]
 8005e98:	2302      	movs	r3, #2
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	460a      	mov	r2, r1
 8005ea0:	4910      	ldr	r1, [pc, #64]	; (8005ee4 <xTimerCreateTimerTask+0x84>)
 8005ea2:	4811      	ldr	r0, [pc, #68]	; (8005ee8 <xTimerCreateTimerTask+0x88>)
 8005ea4:	f7ff f8b4 	bl	8005010 <xTaskCreateStatic>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	4a10      	ldr	r2, [pc, #64]	; (8005eec <xTimerCreateTimerTask+0x8c>)
 8005eac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005eae:	4b0f      	ldr	r3, [pc, #60]	; (8005eec <xTimerCreateTimerTask+0x8c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10a      	bne.n	8005ed6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	613b      	str	r3, [r7, #16]
}
 8005ed2:	bf00      	nop
 8005ed4:	e7fe      	b.n	8005ed4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005ed6:	697b      	ldr	r3, [r7, #20]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3718      	adds	r7, #24
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20000d40 	.word	0x20000d40
 8005ee4:	08008038 	.word	0x08008038
 8005ee8:	08006025 	.word	0x08006025
 8005eec:	20000d44 	.word	0x20000d44

08005ef0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08a      	sub	sp, #40	; 0x28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10a      	bne.n	8005f1e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0c:	f383 8811 	msr	BASEPRI, r3
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	623b      	str	r3, [r7, #32]
}
 8005f1a:	bf00      	nop
 8005f1c:	e7fe      	b.n	8005f1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f1e:	4b1a      	ldr	r3, [pc, #104]	; (8005f88 <xTimerGenericCommand+0x98>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d02a      	beq.n	8005f7c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2b05      	cmp	r3, #5
 8005f36:	dc18      	bgt.n	8005f6a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f38:	f7ff feb2 	bl	8005ca0 <xTaskGetSchedulerState>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d109      	bne.n	8005f56 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f42:	4b11      	ldr	r3, [pc, #68]	; (8005f88 <xTimerGenericCommand+0x98>)
 8005f44:	6818      	ldr	r0, [r3, #0]
 8005f46:	f107 0110 	add.w	r1, r7, #16
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f4e:	f7fe fc77 	bl	8004840 <xQueueGenericSend>
 8005f52:	6278      	str	r0, [r7, #36]	; 0x24
 8005f54:	e012      	b.n	8005f7c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f56:	4b0c      	ldr	r3, [pc, #48]	; (8005f88 <xTimerGenericCommand+0x98>)
 8005f58:	6818      	ldr	r0, [r3, #0]
 8005f5a:	f107 0110 	add.w	r1, r7, #16
 8005f5e:	2300      	movs	r3, #0
 8005f60:	2200      	movs	r2, #0
 8005f62:	f7fe fc6d 	bl	8004840 <xQueueGenericSend>
 8005f66:	6278      	str	r0, [r7, #36]	; 0x24
 8005f68:	e008      	b.n	8005f7c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f6a:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <xTimerGenericCommand+0x98>)
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	f107 0110 	add.w	r1, r7, #16
 8005f72:	2300      	movs	r3, #0
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	f7fe fd61 	bl	8004a3c <xQueueGenericSendFromISR>
 8005f7a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3728      	adds	r7, #40	; 0x28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20000d40 	.word	0x20000d40

08005f8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af02      	add	r7, sp, #8
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f96:	4b22      	ldr	r3, [pc, #136]	; (8006020 <prvProcessExpiredTimer+0x94>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7fe fb1d 	bl	80045e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d022      	beq.n	8005ffe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	699a      	ldr	r2, [r3, #24]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	18d1      	adds	r1, r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	6978      	ldr	r0, [r7, #20]
 8005fc6:	f000 f8d1 	bl	800616c <prvInsertTimerInActiveList>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01f      	beq.n	8006010 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	2100      	movs	r1, #0
 8005fda:	6978      	ldr	r0, [r7, #20]
 8005fdc:	f7ff ff88 	bl	8005ef0 <xTimerGenericCommand>
 8005fe0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d113      	bne.n	8006010 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	60fb      	str	r3, [r7, #12]
}
 8005ffa:	bf00      	nop
 8005ffc:	e7fe      	b.n	8005ffc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006004:	f023 0301 	bic.w	r3, r3, #1
 8006008:	b2da      	uxtb	r2, r3
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	6978      	ldr	r0, [r7, #20]
 8006016:	4798      	blx	r3
}
 8006018:	bf00      	nop
 800601a:	3718      	adds	r7, #24
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	20000d38 	.word	0x20000d38

08006024 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800602c:	f107 0308 	add.w	r3, r7, #8
 8006030:	4618      	mov	r0, r3
 8006032:	f000 f857 	bl	80060e4 <prvGetNextExpireTime>
 8006036:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	4619      	mov	r1, r3
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 f803 	bl	8006048 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006042:	f000 f8d5 	bl	80061f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006046:	e7f1      	b.n	800602c <prvTimerTask+0x8>

08006048 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006052:	f7ff fa39 	bl	80054c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006056:	f107 0308 	add.w	r3, r7, #8
 800605a:	4618      	mov	r0, r3
 800605c:	f000 f866 	bl	800612c <prvSampleTimeNow>
 8006060:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d130      	bne.n	80060ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10a      	bne.n	8006084 <prvProcessTimerOrBlockTask+0x3c>
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	429a      	cmp	r2, r3
 8006074:	d806      	bhi.n	8006084 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006076:	f7ff fa35 	bl	80054e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800607a:	68f9      	ldr	r1, [r7, #12]
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7ff ff85 	bl	8005f8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006082:	e024      	b.n	80060ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d008      	beq.n	800609c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800608a:	4b13      	ldr	r3, [pc, #76]	; (80060d8 <prvProcessTimerOrBlockTask+0x90>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <prvProcessTimerOrBlockTask+0x50>
 8006094:	2301      	movs	r3, #1
 8006096:	e000      	b.n	800609a <prvProcessTimerOrBlockTask+0x52>
 8006098:	2300      	movs	r3, #0
 800609a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800609c:	4b0f      	ldr	r3, [pc, #60]	; (80060dc <prvProcessTimerOrBlockTask+0x94>)
 800609e:	6818      	ldr	r0, [r3, #0]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	4619      	mov	r1, r3
 80060aa:	f7fe ff7d 	bl	8004fa8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80060ae:	f7ff fa19 	bl	80054e4 <xTaskResumeAll>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10a      	bne.n	80060ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80060b8:	4b09      	ldr	r3, [pc, #36]	; (80060e0 <prvProcessTimerOrBlockTask+0x98>)
 80060ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	f3bf 8f6f 	isb	sy
}
 80060c8:	e001      	b.n	80060ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80060ca:	f7ff fa0b 	bl	80054e4 <xTaskResumeAll>
}
 80060ce:	bf00      	nop
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	20000d3c 	.word	0x20000d3c
 80060dc:	20000d40 	.word	0x20000d40
 80060e0:	e000ed04 	.word	0xe000ed04

080060e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80060ec:	4b0e      	ldr	r3, [pc, #56]	; (8006128 <prvGetNextExpireTime+0x44>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <prvGetNextExpireTime+0x16>
 80060f6:	2201      	movs	r2, #1
 80060f8:	e000      	b.n	80060fc <prvGetNextExpireTime+0x18>
 80060fa:	2200      	movs	r2, #0
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d105      	bne.n	8006114 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006108:	4b07      	ldr	r3, [pc, #28]	; (8006128 <prvGetNextExpireTime+0x44>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	60fb      	str	r3, [r7, #12]
 8006112:	e001      	b.n	8006118 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006118:	68fb      	ldr	r3, [r7, #12]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	20000d38 	.word	0x20000d38

0800612c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006134:	f7ff fa74 	bl	8005620 <xTaskGetTickCount>
 8006138:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800613a:	4b0b      	ldr	r3, [pc, #44]	; (8006168 <prvSampleTimeNow+0x3c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	429a      	cmp	r2, r3
 8006142:	d205      	bcs.n	8006150 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006144:	f000 f936 	bl	80063b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	e002      	b.n	8006156 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006156:	4a04      	ldr	r2, [pc, #16]	; (8006168 <prvSampleTimeNow+0x3c>)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800615c:	68fb      	ldr	r3, [r7, #12]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	20000d48 	.word	0x20000d48

0800616c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800617a:	2300      	movs	r3, #0
 800617c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	429a      	cmp	r2, r3
 8006190:	d812      	bhi.n	80061b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	1ad2      	subs	r2, r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	429a      	cmp	r2, r3
 800619e:	d302      	bcc.n	80061a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80061a0:	2301      	movs	r3, #1
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	e01b      	b.n	80061de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80061a6:	4b10      	ldr	r3, [pc, #64]	; (80061e8 <prvInsertTimerInActiveList+0x7c>)
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	3304      	adds	r3, #4
 80061ae:	4619      	mov	r1, r3
 80061b0:	4610      	mov	r0, r2
 80061b2:	f7fe f9de 	bl	8004572 <vListInsert>
 80061b6:	e012      	b.n	80061de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d206      	bcs.n	80061ce <prvInsertTimerInActiveList+0x62>
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d302      	bcc.n	80061ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80061c8:	2301      	movs	r3, #1
 80061ca:	617b      	str	r3, [r7, #20]
 80061cc:	e007      	b.n	80061de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061ce:	4b07      	ldr	r3, [pc, #28]	; (80061ec <prvInsertTimerInActiveList+0x80>)
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	3304      	adds	r3, #4
 80061d6:	4619      	mov	r1, r3
 80061d8:	4610      	mov	r0, r2
 80061da:	f7fe f9ca 	bl	8004572 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80061de:	697b      	ldr	r3, [r7, #20]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	20000d3c 	.word	0x20000d3c
 80061ec:	20000d38 	.word	0x20000d38

080061f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08e      	sub	sp, #56	; 0x38
 80061f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061f6:	e0ca      	b.n	800638e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	da18      	bge.n	8006230 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80061fe:	1d3b      	adds	r3, r7, #4
 8006200:	3304      	adds	r3, #4
 8006202:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10a      	bne.n	8006220 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800620a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	61fb      	str	r3, [r7, #28]
}
 800621c:	bf00      	nop
 800621e:	e7fe      	b.n	800621e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006226:	6850      	ldr	r0, [r2, #4]
 8006228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800622a:	6892      	ldr	r2, [r2, #8]
 800622c:	4611      	mov	r1, r2
 800622e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	f2c0 80aa 	blt.w	800638c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d004      	beq.n	800624e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006246:	3304      	adds	r3, #4
 8006248:	4618      	mov	r0, r3
 800624a:	f7fe f9cb 	bl	80045e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800624e:	463b      	mov	r3, r7
 8006250:	4618      	mov	r0, r3
 8006252:	f7ff ff6b 	bl	800612c <prvSampleTimeNow>
 8006256:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b09      	cmp	r3, #9
 800625c:	f200 8097 	bhi.w	800638e <prvProcessReceivedCommands+0x19e>
 8006260:	a201      	add	r2, pc, #4	; (adr r2, 8006268 <prvProcessReceivedCommands+0x78>)
 8006262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006266:	bf00      	nop
 8006268:	08006291 	.word	0x08006291
 800626c:	08006291 	.word	0x08006291
 8006270:	08006291 	.word	0x08006291
 8006274:	08006305 	.word	0x08006305
 8006278:	08006319 	.word	0x08006319
 800627c:	08006363 	.word	0x08006363
 8006280:	08006291 	.word	0x08006291
 8006284:	08006291 	.word	0x08006291
 8006288:	08006305 	.word	0x08006305
 800628c:	08006319 	.word	0x08006319
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006292:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006296:	f043 0301 	orr.w	r3, r3, #1
 800629a:	b2da      	uxtb	r2, r3
 800629c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	18d1      	adds	r1, r2, r3
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062b0:	f7ff ff5c 	bl	800616c <prvInsertTimerInActiveList>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d069      	beq.n	800638e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062c8:	f003 0304 	and.w	r3, r3, #4
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d05e      	beq.n	800638e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	441a      	add	r2, r3
 80062d8:	2300      	movs	r3, #0
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	2300      	movs	r3, #0
 80062de:	2100      	movs	r1, #0
 80062e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062e2:	f7ff fe05 	bl	8005ef0 <xTimerGenericCommand>
 80062e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80062e8:	6a3b      	ldr	r3, [r7, #32]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d14f      	bne.n	800638e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	61bb      	str	r3, [r7, #24]
}
 8006300:	bf00      	nop
 8006302:	e7fe      	b.n	8006302 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006306:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800630a:	f023 0301 	bic.w	r3, r3, #1
 800630e:	b2da      	uxtb	r2, r3
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006316:	e03a      	b.n	800638e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800631e:	f043 0301 	orr.w	r3, r3, #1
 8006322:	b2da      	uxtb	r2, r3
 8006324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10a      	bne.n	800634e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633c:	f383 8811 	msr	BASEPRI, r3
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	617b      	str	r3, [r7, #20]
}
 800634a:	bf00      	nop
 800634c:	e7fe      	b.n	800634c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800634e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006350:	699a      	ldr	r2, [r3, #24]
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	18d1      	adds	r1, r2, r3
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800635a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800635c:	f7ff ff06 	bl	800616c <prvInsertTimerInActiveList>
					break;
 8006360:	e015      	b.n	800638e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d103      	bne.n	8006378 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006372:	f000 fbdd 	bl	8006b30 <vPortFree>
 8006376:	e00a      	b.n	800638e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800637e:	f023 0301 	bic.w	r3, r3, #1
 8006382:	b2da      	uxtb	r2, r3
 8006384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006386:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800638a:	e000      	b.n	800638e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800638c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800638e:	4b08      	ldr	r3, [pc, #32]	; (80063b0 <prvProcessReceivedCommands+0x1c0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	1d39      	adds	r1, r7, #4
 8006394:	2200      	movs	r2, #0
 8006396:	4618      	mov	r0, r3
 8006398:	f7fe fbec 	bl	8004b74 <xQueueReceive>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f47f af2a 	bne.w	80061f8 <prvProcessReceivedCommands+0x8>
	}
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop
 80063a8:	3730      	adds	r7, #48	; 0x30
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	20000d40 	.word	0x20000d40

080063b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b088      	sub	sp, #32
 80063b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063ba:	e048      	b.n	800644e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063bc:	4b2d      	ldr	r3, [pc, #180]	; (8006474 <prvSwitchTimerLists+0xc0>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c6:	4b2b      	ldr	r3, [pc, #172]	; (8006474 <prvSwitchTimerLists+0xc0>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	3304      	adds	r3, #4
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fe f905 	bl	80045e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d02e      	beq.n	800644e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	4413      	add	r3, r2
 80063f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d90e      	bls.n	8006420 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800640e:	4b19      	ldr	r3, [pc, #100]	; (8006474 <prvSwitchTimerLists+0xc0>)
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3304      	adds	r3, #4
 8006416:	4619      	mov	r1, r3
 8006418:	4610      	mov	r0, r2
 800641a:	f7fe f8aa 	bl	8004572 <vListInsert>
 800641e:	e016      	b.n	800644e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006420:	2300      	movs	r3, #0
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	2300      	movs	r3, #0
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	2100      	movs	r1, #0
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f7ff fd60 	bl	8005ef0 <xTimerGenericCommand>
 8006430:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10a      	bne.n	800644e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643c:	f383 8811 	msr	BASEPRI, r3
 8006440:	f3bf 8f6f 	isb	sy
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	603b      	str	r3, [r7, #0]
}
 800644a:	bf00      	nop
 800644c:	e7fe      	b.n	800644c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800644e:	4b09      	ldr	r3, [pc, #36]	; (8006474 <prvSwitchTimerLists+0xc0>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1b1      	bne.n	80063bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006458:	4b06      	ldr	r3, [pc, #24]	; (8006474 <prvSwitchTimerLists+0xc0>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800645e:	4b06      	ldr	r3, [pc, #24]	; (8006478 <prvSwitchTimerLists+0xc4>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a04      	ldr	r2, [pc, #16]	; (8006474 <prvSwitchTimerLists+0xc0>)
 8006464:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006466:	4a04      	ldr	r2, [pc, #16]	; (8006478 <prvSwitchTimerLists+0xc4>)
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	6013      	str	r3, [r2, #0]
}
 800646c:	bf00      	nop
 800646e:	3718      	adds	r7, #24
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	20000d38 	.word	0x20000d38
 8006478:	20000d3c 	.word	0x20000d3c

0800647c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006482:	f000 f967 	bl	8006754 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006486:	4b15      	ldr	r3, [pc, #84]	; (80064dc <prvCheckForValidListAndQueue+0x60>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d120      	bne.n	80064d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800648e:	4814      	ldr	r0, [pc, #80]	; (80064e0 <prvCheckForValidListAndQueue+0x64>)
 8006490:	f7fe f81e 	bl	80044d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006494:	4813      	ldr	r0, [pc, #76]	; (80064e4 <prvCheckForValidListAndQueue+0x68>)
 8006496:	f7fe f81b 	bl	80044d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800649a:	4b13      	ldr	r3, [pc, #76]	; (80064e8 <prvCheckForValidListAndQueue+0x6c>)
 800649c:	4a10      	ldr	r2, [pc, #64]	; (80064e0 <prvCheckForValidListAndQueue+0x64>)
 800649e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80064a0:	4b12      	ldr	r3, [pc, #72]	; (80064ec <prvCheckForValidListAndQueue+0x70>)
 80064a2:	4a10      	ldr	r2, [pc, #64]	; (80064e4 <prvCheckForValidListAndQueue+0x68>)
 80064a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80064a6:	2300      	movs	r3, #0
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	4b11      	ldr	r3, [pc, #68]	; (80064f0 <prvCheckForValidListAndQueue+0x74>)
 80064ac:	4a11      	ldr	r2, [pc, #68]	; (80064f4 <prvCheckForValidListAndQueue+0x78>)
 80064ae:	2110      	movs	r1, #16
 80064b0:	200a      	movs	r0, #10
 80064b2:	f7fe f929 	bl	8004708 <xQueueGenericCreateStatic>
 80064b6:	4603      	mov	r3, r0
 80064b8:	4a08      	ldr	r2, [pc, #32]	; (80064dc <prvCheckForValidListAndQueue+0x60>)
 80064ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80064bc:	4b07      	ldr	r3, [pc, #28]	; (80064dc <prvCheckForValidListAndQueue+0x60>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d005      	beq.n	80064d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80064c4:	4b05      	ldr	r3, [pc, #20]	; (80064dc <prvCheckForValidListAndQueue+0x60>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	490b      	ldr	r1, [pc, #44]	; (80064f8 <prvCheckForValidListAndQueue+0x7c>)
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fe fd42 	bl	8004f54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064d0:	f000 f970 	bl	80067b4 <vPortExitCritical>
}
 80064d4:	bf00      	nop
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	20000d40 	.word	0x20000d40
 80064e0:	20000d10 	.word	0x20000d10
 80064e4:	20000d24 	.word	0x20000d24
 80064e8:	20000d38 	.word	0x20000d38
 80064ec:	20000d3c 	.word	0x20000d3c
 80064f0:	20000dec 	.word	0x20000dec
 80064f4:	20000d4c 	.word	0x20000d4c
 80064f8:	08008040 	.word	0x08008040

080064fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	3b04      	subs	r3, #4
 800650c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006514:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	3b04      	subs	r3, #4
 800651a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	f023 0201 	bic.w	r2, r3, #1
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	3b04      	subs	r3, #4
 800652a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800652c:	4a0c      	ldr	r2, [pc, #48]	; (8006560 <pxPortInitialiseStack+0x64>)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	3b14      	subs	r3, #20
 8006536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3b04      	subs	r3, #4
 8006542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f06f 0202 	mvn.w	r2, #2
 800654a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	3b20      	subs	r3, #32
 8006550:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006552:	68fb      	ldr	r3, [r7, #12]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	08006565 	.word	0x08006565

08006564 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800656a:	2300      	movs	r3, #0
 800656c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800656e:	4b12      	ldr	r3, [pc, #72]	; (80065b8 <prvTaskExitError+0x54>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006576:	d00a      	beq.n	800658e <prvTaskExitError+0x2a>
	__asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	60fb      	str	r3, [r7, #12]
}
 800658a:	bf00      	nop
 800658c:	e7fe      	b.n	800658c <prvTaskExitError+0x28>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	60bb      	str	r3, [r7, #8]
}
 80065a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80065a2:	bf00      	nop
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0fc      	beq.n	80065a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065aa:	bf00      	nop
 80065ac:	bf00      	nop
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	2000000c 	.word	0x2000000c
 80065bc:	00000000 	.word	0x00000000

080065c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80065c0:	4b07      	ldr	r3, [pc, #28]	; (80065e0 <pxCurrentTCBConst2>)
 80065c2:	6819      	ldr	r1, [r3, #0]
 80065c4:	6808      	ldr	r0, [r1, #0]
 80065c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ca:	f380 8809 	msr	PSP, r0
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f04f 0000 	mov.w	r0, #0
 80065d6:	f380 8811 	msr	BASEPRI, r0
 80065da:	4770      	bx	lr
 80065dc:	f3af 8000 	nop.w

080065e0 <pxCurrentTCBConst2>:
 80065e0:	20000810 	.word	0x20000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80065e4:	bf00      	nop
 80065e6:	bf00      	nop

080065e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80065e8:	4808      	ldr	r0, [pc, #32]	; (800660c <prvPortStartFirstTask+0x24>)
 80065ea:	6800      	ldr	r0, [r0, #0]
 80065ec:	6800      	ldr	r0, [r0, #0]
 80065ee:	f380 8808 	msr	MSP, r0
 80065f2:	f04f 0000 	mov.w	r0, #0
 80065f6:	f380 8814 	msr	CONTROL, r0
 80065fa:	b662      	cpsie	i
 80065fc:	b661      	cpsie	f
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	df00      	svc	0
 8006608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800660a:	bf00      	nop
 800660c:	e000ed08 	.word	0xe000ed08

08006610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006616:	4b46      	ldr	r3, [pc, #280]	; (8006730 <xPortStartScheduler+0x120>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a46      	ldr	r2, [pc, #280]	; (8006734 <xPortStartScheduler+0x124>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d10a      	bne.n	8006636 <xPortStartScheduler+0x26>
	__asm volatile
 8006620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006624:	f383 8811 	msr	BASEPRI, r3
 8006628:	f3bf 8f6f 	isb	sy
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	613b      	str	r3, [r7, #16]
}
 8006632:	bf00      	nop
 8006634:	e7fe      	b.n	8006634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006636:	4b3e      	ldr	r3, [pc, #248]	; (8006730 <xPortStartScheduler+0x120>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a3f      	ldr	r2, [pc, #252]	; (8006738 <xPortStartScheduler+0x128>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d10a      	bne.n	8006656 <xPortStartScheduler+0x46>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	60fb      	str	r3, [r7, #12]
}
 8006652:	bf00      	nop
 8006654:	e7fe      	b.n	8006654 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006656:	4b39      	ldr	r3, [pc, #228]	; (800673c <xPortStartScheduler+0x12c>)
 8006658:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	b2db      	uxtb	r3, r3
 8006660:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	22ff      	movs	r2, #255	; 0xff
 8006666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	b2db      	uxtb	r3, r3
 800666e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006670:	78fb      	ldrb	r3, [r7, #3]
 8006672:	b2db      	uxtb	r3, r3
 8006674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006678:	b2da      	uxtb	r2, r3
 800667a:	4b31      	ldr	r3, [pc, #196]	; (8006740 <xPortStartScheduler+0x130>)
 800667c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800667e:	4b31      	ldr	r3, [pc, #196]	; (8006744 <xPortStartScheduler+0x134>)
 8006680:	2207      	movs	r2, #7
 8006682:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006684:	e009      	b.n	800669a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006686:	4b2f      	ldr	r3, [pc, #188]	; (8006744 <xPortStartScheduler+0x134>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3b01      	subs	r3, #1
 800668c:	4a2d      	ldr	r2, [pc, #180]	; (8006744 <xPortStartScheduler+0x134>)
 800668e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006690:	78fb      	ldrb	r3, [r7, #3]
 8006692:	b2db      	uxtb	r3, r3
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	b2db      	uxtb	r3, r3
 8006698:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800669a:	78fb      	ldrb	r3, [r7, #3]
 800669c:	b2db      	uxtb	r3, r3
 800669e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a2:	2b80      	cmp	r3, #128	; 0x80
 80066a4:	d0ef      	beq.n	8006686 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066a6:	4b27      	ldr	r3, [pc, #156]	; (8006744 <xPortStartScheduler+0x134>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f1c3 0307 	rsb	r3, r3, #7
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	d00a      	beq.n	80066c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80066b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	60bb      	str	r3, [r7, #8]
}
 80066c4:	bf00      	nop
 80066c6:	e7fe      	b.n	80066c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066c8:	4b1e      	ldr	r3, [pc, #120]	; (8006744 <xPortStartScheduler+0x134>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	021b      	lsls	r3, r3, #8
 80066ce:	4a1d      	ldr	r2, [pc, #116]	; (8006744 <xPortStartScheduler+0x134>)
 80066d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066d2:	4b1c      	ldr	r3, [pc, #112]	; (8006744 <xPortStartScheduler+0x134>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066da:	4a1a      	ldr	r2, [pc, #104]	; (8006744 <xPortStartScheduler+0x134>)
 80066dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066e6:	4b18      	ldr	r3, [pc, #96]	; (8006748 <xPortStartScheduler+0x138>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a17      	ldr	r2, [pc, #92]	; (8006748 <xPortStartScheduler+0x138>)
 80066ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066f2:	4b15      	ldr	r3, [pc, #84]	; (8006748 <xPortStartScheduler+0x138>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a14      	ldr	r2, [pc, #80]	; (8006748 <xPortStartScheduler+0x138>)
 80066f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80066fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80066fe:	f000 f8dd 	bl	80068bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006702:	4b12      	ldr	r3, [pc, #72]	; (800674c <xPortStartScheduler+0x13c>)
 8006704:	2200      	movs	r2, #0
 8006706:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006708:	f000 f8fc 	bl	8006904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800670c:	4b10      	ldr	r3, [pc, #64]	; (8006750 <xPortStartScheduler+0x140>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a0f      	ldr	r2, [pc, #60]	; (8006750 <xPortStartScheduler+0x140>)
 8006712:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006716:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006718:	f7ff ff66 	bl	80065e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800671c:	f7ff f84a 	bl	80057b4 <vTaskSwitchContext>
	prvTaskExitError();
 8006720:	f7ff ff20 	bl	8006564 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	e000ed00 	.word	0xe000ed00
 8006734:	410fc271 	.word	0x410fc271
 8006738:	410fc270 	.word	0x410fc270
 800673c:	e000e400 	.word	0xe000e400
 8006740:	20000e3c 	.word	0x20000e3c
 8006744:	20000e40 	.word	0x20000e40
 8006748:	e000ed20 	.word	0xe000ed20
 800674c:	2000000c 	.word	0x2000000c
 8006750:	e000ef34 	.word	0xe000ef34

08006754 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	607b      	str	r3, [r7, #4]
}
 800676c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800676e:	4b0f      	ldr	r3, [pc, #60]	; (80067ac <vPortEnterCritical+0x58>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3301      	adds	r3, #1
 8006774:	4a0d      	ldr	r2, [pc, #52]	; (80067ac <vPortEnterCritical+0x58>)
 8006776:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006778:	4b0c      	ldr	r3, [pc, #48]	; (80067ac <vPortEnterCritical+0x58>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d10f      	bne.n	80067a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006780:	4b0b      	ldr	r3, [pc, #44]	; (80067b0 <vPortEnterCritical+0x5c>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	603b      	str	r3, [r7, #0]
}
 800679c:	bf00      	nop
 800679e:	e7fe      	b.n	800679e <vPortEnterCritical+0x4a>
	}
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	2000000c 	.word	0x2000000c
 80067b0:	e000ed04 	.word	0xe000ed04

080067b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067ba:	4b12      	ldr	r3, [pc, #72]	; (8006804 <vPortExitCritical+0x50>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10a      	bne.n	80067d8 <vPortExitCritical+0x24>
	__asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	607b      	str	r3, [r7, #4]
}
 80067d4:	bf00      	nop
 80067d6:	e7fe      	b.n	80067d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80067d8:	4b0a      	ldr	r3, [pc, #40]	; (8006804 <vPortExitCritical+0x50>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3b01      	subs	r3, #1
 80067de:	4a09      	ldr	r2, [pc, #36]	; (8006804 <vPortExitCritical+0x50>)
 80067e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80067e2:	4b08      	ldr	r3, [pc, #32]	; (8006804 <vPortExitCritical+0x50>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d105      	bne.n	80067f6 <vPortExitCritical+0x42>
 80067ea:	2300      	movs	r3, #0
 80067ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	f383 8811 	msr	BASEPRI, r3
}
 80067f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80067f6:	bf00      	nop
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	2000000c 	.word	0x2000000c
	...

08006810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006810:	f3ef 8009 	mrs	r0, PSP
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	4b15      	ldr	r3, [pc, #84]	; (8006870 <pxCurrentTCBConst>)
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	f01e 0f10 	tst.w	lr, #16
 8006820:	bf08      	it	eq
 8006822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682a:	6010      	str	r0, [r2, #0]
 800682c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006830:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006834:	f380 8811 	msr	BASEPRI, r0
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f7fe ffb8 	bl	80057b4 <vTaskSwitchContext>
 8006844:	f04f 0000 	mov.w	r0, #0
 8006848:	f380 8811 	msr	BASEPRI, r0
 800684c:	bc09      	pop	{r0, r3}
 800684e:	6819      	ldr	r1, [r3, #0]
 8006850:	6808      	ldr	r0, [r1, #0]
 8006852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006856:	f01e 0f10 	tst.w	lr, #16
 800685a:	bf08      	it	eq
 800685c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006860:	f380 8809 	msr	PSP, r0
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	f3af 8000 	nop.w

08006870 <pxCurrentTCBConst>:
 8006870:	20000810 	.word	0x20000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006874:	bf00      	nop
 8006876:	bf00      	nop

08006878 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	607b      	str	r3, [r7, #4]
}
 8006890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006892:	f7fe fed5 	bl	8005640 <xTaskIncrementTick>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800689c:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <xPortSysTickHandler+0x40>)
 800689e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	2300      	movs	r3, #0
 80068a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	f383 8811 	msr	BASEPRI, r3
}
 80068ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80068b0:	bf00      	nop
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	e000ed04 	.word	0xe000ed04

080068bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068bc:	b480      	push	{r7}
 80068be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068c0:	4b0b      	ldr	r3, [pc, #44]	; (80068f0 <vPortSetupTimerInterrupt+0x34>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068c6:	4b0b      	ldr	r3, [pc, #44]	; (80068f4 <vPortSetupTimerInterrupt+0x38>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068cc:	4b0a      	ldr	r3, [pc, #40]	; (80068f8 <vPortSetupTimerInterrupt+0x3c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a0a      	ldr	r2, [pc, #40]	; (80068fc <vPortSetupTimerInterrupt+0x40>)
 80068d2:	fba2 2303 	umull	r2, r3, r2, r3
 80068d6:	099b      	lsrs	r3, r3, #6
 80068d8:	4a09      	ldr	r2, [pc, #36]	; (8006900 <vPortSetupTimerInterrupt+0x44>)
 80068da:	3b01      	subs	r3, #1
 80068dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068de:	4b04      	ldr	r3, [pc, #16]	; (80068f0 <vPortSetupTimerInterrupt+0x34>)
 80068e0:	2207      	movs	r2, #7
 80068e2:	601a      	str	r2, [r3, #0]
}
 80068e4:	bf00      	nop
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	e000e010 	.word	0xe000e010
 80068f4:	e000e018 	.word	0xe000e018
 80068f8:	20000000 	.word	0x20000000
 80068fc:	10624dd3 	.word	0x10624dd3
 8006900:	e000e014 	.word	0xe000e014

08006904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006904:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006914 <vPortEnableVFP+0x10>
 8006908:	6801      	ldr	r1, [r0, #0]
 800690a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800690e:	6001      	str	r1, [r0, #0]
 8006910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006912:	bf00      	nop
 8006914:	e000ed88 	.word	0xe000ed88

08006918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800691e:	f3ef 8305 	mrs	r3, IPSR
 8006922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2b0f      	cmp	r3, #15
 8006928:	d914      	bls.n	8006954 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800692a:	4a17      	ldr	r2, [pc, #92]	; (8006988 <vPortValidateInterruptPriority+0x70>)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4413      	add	r3, r2
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006934:	4b15      	ldr	r3, [pc, #84]	; (800698c <vPortValidateInterruptPriority+0x74>)
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	7afa      	ldrb	r2, [r7, #11]
 800693a:	429a      	cmp	r2, r3
 800693c:	d20a      	bcs.n	8006954 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	607b      	str	r3, [r7, #4]
}
 8006950:	bf00      	nop
 8006952:	e7fe      	b.n	8006952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006954:	4b0e      	ldr	r3, [pc, #56]	; (8006990 <vPortValidateInterruptPriority+0x78>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800695c:	4b0d      	ldr	r3, [pc, #52]	; (8006994 <vPortValidateInterruptPriority+0x7c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	429a      	cmp	r2, r3
 8006962:	d90a      	bls.n	800697a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	603b      	str	r3, [r7, #0]
}
 8006976:	bf00      	nop
 8006978:	e7fe      	b.n	8006978 <vPortValidateInterruptPriority+0x60>
	}
 800697a:	bf00      	nop
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	e000e3f0 	.word	0xe000e3f0
 800698c:	20000e3c 	.word	0x20000e3c
 8006990:	e000ed0c 	.word	0xe000ed0c
 8006994:	20000e40 	.word	0x20000e40

08006998 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b08a      	sub	sp, #40	; 0x28
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069a0:	2300      	movs	r3, #0
 80069a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069a4:	f7fe fd90 	bl	80054c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069a8:	4b5b      	ldr	r3, [pc, #364]	; (8006b18 <pvPortMalloc+0x180>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069b0:	f000 f920 	bl	8006bf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069b4:	4b59      	ldr	r3, [pc, #356]	; (8006b1c <pvPortMalloc+0x184>)
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4013      	ands	r3, r2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f040 8093 	bne.w	8006ae8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d01d      	beq.n	8006a04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80069c8:	2208      	movs	r2, #8
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4413      	add	r3, r2
 80069ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f003 0307 	and.w	r3, r3, #7
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d014      	beq.n	8006a04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f023 0307 	bic.w	r3, r3, #7
 80069e0:	3308      	adds	r3, #8
 80069e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f003 0307 	and.w	r3, r3, #7
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00a      	beq.n	8006a04 <pvPortMalloc+0x6c>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	617b      	str	r3, [r7, #20]
}
 8006a00:	bf00      	nop
 8006a02:	e7fe      	b.n	8006a02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d06e      	beq.n	8006ae8 <pvPortMalloc+0x150>
 8006a0a:	4b45      	ldr	r3, [pc, #276]	; (8006b20 <pvPortMalloc+0x188>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d869      	bhi.n	8006ae8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a14:	4b43      	ldr	r3, [pc, #268]	; (8006b24 <pvPortMalloc+0x18c>)
 8006a16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a18:	4b42      	ldr	r3, [pc, #264]	; (8006b24 <pvPortMalloc+0x18c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a1e:	e004      	b.n	8006a2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d903      	bls.n	8006a3c <pvPortMalloc+0xa4>
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1f1      	bne.n	8006a20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a3c:	4b36      	ldr	r3, [pc, #216]	; (8006b18 <pvPortMalloc+0x180>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d050      	beq.n	8006ae8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2208      	movs	r2, #8
 8006a4c:	4413      	add	r3, r2
 8006a4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	1ad2      	subs	r2, r2, r3
 8006a60:	2308      	movs	r3, #8
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d91f      	bls.n	8006aa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	f003 0307 	and.w	r3, r3, #7
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <pvPortMalloc+0xf8>
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	613b      	str	r3, [r7, #16]
}
 8006a8c:	bf00      	nop
 8006a8e:	e7fe      	b.n	8006a8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	1ad2      	subs	r2, r2, r3
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006aa2:	69b8      	ldr	r0, [r7, #24]
 8006aa4:	f000 f908 	bl	8006cb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006aa8:	4b1d      	ldr	r3, [pc, #116]	; (8006b20 <pvPortMalloc+0x188>)
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	4a1b      	ldr	r2, [pc, #108]	; (8006b20 <pvPortMalloc+0x188>)
 8006ab4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ab6:	4b1a      	ldr	r3, [pc, #104]	; (8006b20 <pvPortMalloc+0x188>)
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	4b1b      	ldr	r3, [pc, #108]	; (8006b28 <pvPortMalloc+0x190>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d203      	bcs.n	8006aca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ac2:	4b17      	ldr	r3, [pc, #92]	; (8006b20 <pvPortMalloc+0x188>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a18      	ldr	r2, [pc, #96]	; (8006b28 <pvPortMalloc+0x190>)
 8006ac8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	4b13      	ldr	r3, [pc, #76]	; (8006b1c <pvPortMalloc+0x184>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	2200      	movs	r2, #0
 8006adc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ade:	4b13      	ldr	r3, [pc, #76]	; (8006b2c <pvPortMalloc+0x194>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	4a11      	ldr	r2, [pc, #68]	; (8006b2c <pvPortMalloc+0x194>)
 8006ae6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ae8:	f7fe fcfc 	bl	80054e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f003 0307 	and.w	r3, r3, #7
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00a      	beq.n	8006b0c <pvPortMalloc+0x174>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	60fb      	str	r3, [r7, #12]
}
 8006b08:	bf00      	nop
 8006b0a:	e7fe      	b.n	8006b0a <pvPortMalloc+0x172>
	return pvReturn;
 8006b0c:	69fb      	ldr	r3, [r7, #28]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3728      	adds	r7, #40	; 0x28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	20004a4c 	.word	0x20004a4c
 8006b1c:	20004a60 	.word	0x20004a60
 8006b20:	20004a50 	.word	0x20004a50
 8006b24:	20004a44 	.word	0x20004a44
 8006b28:	20004a54 	.word	0x20004a54
 8006b2c:	20004a58 	.word	0x20004a58

08006b30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d04d      	beq.n	8006bde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b42:	2308      	movs	r3, #8
 8006b44:	425b      	negs	r3, r3
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	4413      	add	r3, r2
 8006b4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	4b24      	ldr	r3, [pc, #144]	; (8006be8 <vPortFree+0xb8>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4013      	ands	r3, r2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10a      	bne.n	8006b74 <vPortFree+0x44>
	__asm volatile
 8006b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	60fb      	str	r3, [r7, #12]
}
 8006b70:	bf00      	nop
 8006b72:	e7fe      	b.n	8006b72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00a      	beq.n	8006b92 <vPortFree+0x62>
	__asm volatile
 8006b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	60bb      	str	r3, [r7, #8]
}
 8006b8e:	bf00      	nop
 8006b90:	e7fe      	b.n	8006b90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	4b14      	ldr	r3, [pc, #80]	; (8006be8 <vPortFree+0xb8>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01e      	beq.n	8006bde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d11a      	bne.n	8006bde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	685a      	ldr	r2, [r3, #4]
 8006bac:	4b0e      	ldr	r3, [pc, #56]	; (8006be8 <vPortFree+0xb8>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	43db      	mvns	r3, r3
 8006bb2:	401a      	ands	r2, r3
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006bb8:	f7fe fc86 	bl	80054c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	4b0a      	ldr	r3, [pc, #40]	; (8006bec <vPortFree+0xbc>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	4a09      	ldr	r2, [pc, #36]	; (8006bec <vPortFree+0xbc>)
 8006bc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bca:	6938      	ldr	r0, [r7, #16]
 8006bcc:	f000 f874 	bl	8006cb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006bd0:	4b07      	ldr	r3, [pc, #28]	; (8006bf0 <vPortFree+0xc0>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	4a06      	ldr	r2, [pc, #24]	; (8006bf0 <vPortFree+0xc0>)
 8006bd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006bda:	f7fe fc83 	bl	80054e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006bde:	bf00      	nop
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	20004a60 	.word	0x20004a60
 8006bec:	20004a50 	.word	0x20004a50
 8006bf0:	20004a5c 	.word	0x20004a5c

08006bf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006bfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006bfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c00:	4b27      	ldr	r3, [pc, #156]	; (8006ca0 <prvHeapInit+0xac>)
 8006c02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f003 0307 	and.w	r3, r3, #7
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00c      	beq.n	8006c28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	3307      	adds	r3, #7
 8006c12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f023 0307 	bic.w	r3, r3, #7
 8006c1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	4a1f      	ldr	r2, [pc, #124]	; (8006ca0 <prvHeapInit+0xac>)
 8006c24:	4413      	add	r3, r2
 8006c26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c2c:	4a1d      	ldr	r2, [pc, #116]	; (8006ca4 <prvHeapInit+0xb0>)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c32:	4b1c      	ldr	r3, [pc, #112]	; (8006ca4 <prvHeapInit+0xb0>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c40:	2208      	movs	r2, #8
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	1a9b      	subs	r3, r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f023 0307 	bic.w	r3, r3, #7
 8006c4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4a15      	ldr	r2, [pc, #84]	; (8006ca8 <prvHeapInit+0xb4>)
 8006c54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c56:	4b14      	ldr	r3, [pc, #80]	; (8006ca8 <prvHeapInit+0xb4>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c5e:	4b12      	ldr	r3, [pc, #72]	; (8006ca8 <prvHeapInit+0xb4>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2200      	movs	r2, #0
 8006c64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	1ad2      	subs	r2, r2, r3
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c74:	4b0c      	ldr	r3, [pc, #48]	; (8006ca8 <prvHeapInit+0xb4>)
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	4a0a      	ldr	r2, [pc, #40]	; (8006cac <prvHeapInit+0xb8>)
 8006c82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	4a09      	ldr	r2, [pc, #36]	; (8006cb0 <prvHeapInit+0xbc>)
 8006c8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c8c:	4b09      	ldr	r3, [pc, #36]	; (8006cb4 <prvHeapInit+0xc0>)
 8006c8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c92:	601a      	str	r2, [r3, #0]
}
 8006c94:	bf00      	nop
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	20000e44 	.word	0x20000e44
 8006ca4:	20004a44 	.word	0x20004a44
 8006ca8:	20004a4c 	.word	0x20004a4c
 8006cac:	20004a54 	.word	0x20004a54
 8006cb0:	20004a50 	.word	0x20004a50
 8006cb4:	20004a60 	.word	0x20004a60

08006cb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006cc0:	4b28      	ldr	r3, [pc, #160]	; (8006d64 <prvInsertBlockIntoFreeList+0xac>)
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	e002      	b.n	8006ccc <prvInsertBlockIntoFreeList+0x14>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	60fb      	str	r3, [r7, #12]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d8f7      	bhi.n	8006cc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d108      	bne.n	8006cfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	441a      	add	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	441a      	add	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d118      	bne.n	8006d40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	4b15      	ldr	r3, [pc, #84]	; (8006d68 <prvInsertBlockIntoFreeList+0xb0>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d00d      	beq.n	8006d36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	441a      	add	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	e008      	b.n	8006d48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d36:	4b0c      	ldr	r3, [pc, #48]	; (8006d68 <prvInsertBlockIntoFreeList+0xb0>)
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	e003      	b.n	8006d48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d002      	beq.n	8006d56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d56:	bf00      	nop
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	20004a44 	.word	0x20004a44
 8006d68:	20004a4c 	.word	0x20004a4c

08006d6c <__errno>:
 8006d6c:	4b01      	ldr	r3, [pc, #4]	; (8006d74 <__errno+0x8>)
 8006d6e:	6818      	ldr	r0, [r3, #0]
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	20000010 	.word	0x20000010

08006d78 <std>:
 8006d78:	2300      	movs	r3, #0
 8006d7a:	b510      	push	{r4, lr}
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d86:	6083      	str	r3, [r0, #8]
 8006d88:	8181      	strh	r1, [r0, #12]
 8006d8a:	6643      	str	r3, [r0, #100]	; 0x64
 8006d8c:	81c2      	strh	r2, [r0, #14]
 8006d8e:	6183      	str	r3, [r0, #24]
 8006d90:	4619      	mov	r1, r3
 8006d92:	2208      	movs	r2, #8
 8006d94:	305c      	adds	r0, #92	; 0x5c
 8006d96:	f000 f91a 	bl	8006fce <memset>
 8006d9a:	4b05      	ldr	r3, [pc, #20]	; (8006db0 <std+0x38>)
 8006d9c:	6263      	str	r3, [r4, #36]	; 0x24
 8006d9e:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <std+0x3c>)
 8006da0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006da2:	4b05      	ldr	r3, [pc, #20]	; (8006db8 <std+0x40>)
 8006da4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006da6:	4b05      	ldr	r3, [pc, #20]	; (8006dbc <std+0x44>)
 8006da8:	6224      	str	r4, [r4, #32]
 8006daa:	6323      	str	r3, [r4, #48]	; 0x30
 8006dac:	bd10      	pop	{r4, pc}
 8006dae:	bf00      	nop
 8006db0:	08007265 	.word	0x08007265
 8006db4:	08007287 	.word	0x08007287
 8006db8:	080072bf 	.word	0x080072bf
 8006dbc:	080072e3 	.word	0x080072e3

08006dc0 <_cleanup_r>:
 8006dc0:	4901      	ldr	r1, [pc, #4]	; (8006dc8 <_cleanup_r+0x8>)
 8006dc2:	f000 b8af 	b.w	8006f24 <_fwalk_reent>
 8006dc6:	bf00      	nop
 8006dc8:	080074ad 	.word	0x080074ad

08006dcc <__sfmoreglue>:
 8006dcc:	b570      	push	{r4, r5, r6, lr}
 8006dce:	1e4a      	subs	r2, r1, #1
 8006dd0:	2568      	movs	r5, #104	; 0x68
 8006dd2:	4355      	muls	r5, r2
 8006dd4:	460e      	mov	r6, r1
 8006dd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006dda:	f000 f901 	bl	8006fe0 <_malloc_r>
 8006dde:	4604      	mov	r4, r0
 8006de0:	b140      	cbz	r0, 8006df4 <__sfmoreglue+0x28>
 8006de2:	2100      	movs	r1, #0
 8006de4:	e9c0 1600 	strd	r1, r6, [r0]
 8006de8:	300c      	adds	r0, #12
 8006dea:	60a0      	str	r0, [r4, #8]
 8006dec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006df0:	f000 f8ed 	bl	8006fce <memset>
 8006df4:	4620      	mov	r0, r4
 8006df6:	bd70      	pop	{r4, r5, r6, pc}

08006df8 <__sfp_lock_acquire>:
 8006df8:	4801      	ldr	r0, [pc, #4]	; (8006e00 <__sfp_lock_acquire+0x8>)
 8006dfa:	f000 b8d8 	b.w	8006fae <__retarget_lock_acquire_recursive>
 8006dfe:	bf00      	nop
 8006e00:	20005000 	.word	0x20005000

08006e04 <__sfp_lock_release>:
 8006e04:	4801      	ldr	r0, [pc, #4]	; (8006e0c <__sfp_lock_release+0x8>)
 8006e06:	f000 b8d3 	b.w	8006fb0 <__retarget_lock_release_recursive>
 8006e0a:	bf00      	nop
 8006e0c:	20005000 	.word	0x20005000

08006e10 <__sinit_lock_acquire>:
 8006e10:	4801      	ldr	r0, [pc, #4]	; (8006e18 <__sinit_lock_acquire+0x8>)
 8006e12:	f000 b8cc 	b.w	8006fae <__retarget_lock_acquire_recursive>
 8006e16:	bf00      	nop
 8006e18:	20004ffb 	.word	0x20004ffb

08006e1c <__sinit_lock_release>:
 8006e1c:	4801      	ldr	r0, [pc, #4]	; (8006e24 <__sinit_lock_release+0x8>)
 8006e1e:	f000 b8c7 	b.w	8006fb0 <__retarget_lock_release_recursive>
 8006e22:	bf00      	nop
 8006e24:	20004ffb 	.word	0x20004ffb

08006e28 <__sinit>:
 8006e28:	b510      	push	{r4, lr}
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	f7ff fff0 	bl	8006e10 <__sinit_lock_acquire>
 8006e30:	69a3      	ldr	r3, [r4, #24]
 8006e32:	b11b      	cbz	r3, 8006e3c <__sinit+0x14>
 8006e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e38:	f7ff bff0 	b.w	8006e1c <__sinit_lock_release>
 8006e3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e40:	6523      	str	r3, [r4, #80]	; 0x50
 8006e42:	4b13      	ldr	r3, [pc, #76]	; (8006e90 <__sinit+0x68>)
 8006e44:	4a13      	ldr	r2, [pc, #76]	; (8006e94 <__sinit+0x6c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e4a:	42a3      	cmp	r3, r4
 8006e4c:	bf04      	itt	eq
 8006e4e:	2301      	moveq	r3, #1
 8006e50:	61a3      	streq	r3, [r4, #24]
 8006e52:	4620      	mov	r0, r4
 8006e54:	f000 f820 	bl	8006e98 <__sfp>
 8006e58:	6060      	str	r0, [r4, #4]
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f000 f81c 	bl	8006e98 <__sfp>
 8006e60:	60a0      	str	r0, [r4, #8]
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 f818 	bl	8006e98 <__sfp>
 8006e68:	2200      	movs	r2, #0
 8006e6a:	60e0      	str	r0, [r4, #12]
 8006e6c:	2104      	movs	r1, #4
 8006e6e:	6860      	ldr	r0, [r4, #4]
 8006e70:	f7ff ff82 	bl	8006d78 <std>
 8006e74:	68a0      	ldr	r0, [r4, #8]
 8006e76:	2201      	movs	r2, #1
 8006e78:	2109      	movs	r1, #9
 8006e7a:	f7ff ff7d 	bl	8006d78 <std>
 8006e7e:	68e0      	ldr	r0, [r4, #12]
 8006e80:	2202      	movs	r2, #2
 8006e82:	2112      	movs	r1, #18
 8006e84:	f7ff ff78 	bl	8006d78 <std>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	61a3      	str	r3, [r4, #24]
 8006e8c:	e7d2      	b.n	8006e34 <__sinit+0xc>
 8006e8e:	bf00      	nop
 8006e90:	08008bd8 	.word	0x08008bd8
 8006e94:	08006dc1 	.word	0x08006dc1

08006e98 <__sfp>:
 8006e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9a:	4607      	mov	r7, r0
 8006e9c:	f7ff ffac 	bl	8006df8 <__sfp_lock_acquire>
 8006ea0:	4b1e      	ldr	r3, [pc, #120]	; (8006f1c <__sfp+0x84>)
 8006ea2:	681e      	ldr	r6, [r3, #0]
 8006ea4:	69b3      	ldr	r3, [r6, #24]
 8006ea6:	b913      	cbnz	r3, 8006eae <__sfp+0x16>
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	f7ff ffbd 	bl	8006e28 <__sinit>
 8006eae:	3648      	adds	r6, #72	; 0x48
 8006eb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	d503      	bpl.n	8006ec0 <__sfp+0x28>
 8006eb8:	6833      	ldr	r3, [r6, #0]
 8006eba:	b30b      	cbz	r3, 8006f00 <__sfp+0x68>
 8006ebc:	6836      	ldr	r6, [r6, #0]
 8006ebe:	e7f7      	b.n	8006eb0 <__sfp+0x18>
 8006ec0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ec4:	b9d5      	cbnz	r5, 8006efc <__sfp+0x64>
 8006ec6:	4b16      	ldr	r3, [pc, #88]	; (8006f20 <__sfp+0x88>)
 8006ec8:	60e3      	str	r3, [r4, #12]
 8006eca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ece:	6665      	str	r5, [r4, #100]	; 0x64
 8006ed0:	f000 f86c 	bl	8006fac <__retarget_lock_init_recursive>
 8006ed4:	f7ff ff96 	bl	8006e04 <__sfp_lock_release>
 8006ed8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006edc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ee0:	6025      	str	r5, [r4, #0]
 8006ee2:	61a5      	str	r5, [r4, #24]
 8006ee4:	2208      	movs	r2, #8
 8006ee6:	4629      	mov	r1, r5
 8006ee8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006eec:	f000 f86f 	bl	8006fce <memset>
 8006ef0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ef4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ef8:	4620      	mov	r0, r4
 8006efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006efc:	3468      	adds	r4, #104	; 0x68
 8006efe:	e7d9      	b.n	8006eb4 <__sfp+0x1c>
 8006f00:	2104      	movs	r1, #4
 8006f02:	4638      	mov	r0, r7
 8006f04:	f7ff ff62 	bl	8006dcc <__sfmoreglue>
 8006f08:	4604      	mov	r4, r0
 8006f0a:	6030      	str	r0, [r6, #0]
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	d1d5      	bne.n	8006ebc <__sfp+0x24>
 8006f10:	f7ff ff78 	bl	8006e04 <__sfp_lock_release>
 8006f14:	230c      	movs	r3, #12
 8006f16:	603b      	str	r3, [r7, #0]
 8006f18:	e7ee      	b.n	8006ef8 <__sfp+0x60>
 8006f1a:	bf00      	nop
 8006f1c:	08008bd8 	.word	0x08008bd8
 8006f20:	ffff0001 	.word	0xffff0001

08006f24 <_fwalk_reent>:
 8006f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f28:	4606      	mov	r6, r0
 8006f2a:	4688      	mov	r8, r1
 8006f2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f30:	2700      	movs	r7, #0
 8006f32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f36:	f1b9 0901 	subs.w	r9, r9, #1
 8006f3a:	d505      	bpl.n	8006f48 <_fwalk_reent+0x24>
 8006f3c:	6824      	ldr	r4, [r4, #0]
 8006f3e:	2c00      	cmp	r4, #0
 8006f40:	d1f7      	bne.n	8006f32 <_fwalk_reent+0xe>
 8006f42:	4638      	mov	r0, r7
 8006f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f48:	89ab      	ldrh	r3, [r5, #12]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d907      	bls.n	8006f5e <_fwalk_reent+0x3a>
 8006f4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f52:	3301      	adds	r3, #1
 8006f54:	d003      	beq.n	8006f5e <_fwalk_reent+0x3a>
 8006f56:	4629      	mov	r1, r5
 8006f58:	4630      	mov	r0, r6
 8006f5a:	47c0      	blx	r8
 8006f5c:	4307      	orrs	r7, r0
 8006f5e:	3568      	adds	r5, #104	; 0x68
 8006f60:	e7e9      	b.n	8006f36 <_fwalk_reent+0x12>
	...

08006f64 <__libc_init_array>:
 8006f64:	b570      	push	{r4, r5, r6, lr}
 8006f66:	4d0d      	ldr	r5, [pc, #52]	; (8006f9c <__libc_init_array+0x38>)
 8006f68:	4c0d      	ldr	r4, [pc, #52]	; (8006fa0 <__libc_init_array+0x3c>)
 8006f6a:	1b64      	subs	r4, r4, r5
 8006f6c:	10a4      	asrs	r4, r4, #2
 8006f6e:	2600      	movs	r6, #0
 8006f70:	42a6      	cmp	r6, r4
 8006f72:	d109      	bne.n	8006f88 <__libc_init_array+0x24>
 8006f74:	4d0b      	ldr	r5, [pc, #44]	; (8006fa4 <__libc_init_array+0x40>)
 8006f76:	4c0c      	ldr	r4, [pc, #48]	; (8006fa8 <__libc_init_array+0x44>)
 8006f78:	f001 f808 	bl	8007f8c <_init>
 8006f7c:	1b64      	subs	r4, r4, r5
 8006f7e:	10a4      	asrs	r4, r4, #2
 8006f80:	2600      	movs	r6, #0
 8006f82:	42a6      	cmp	r6, r4
 8006f84:	d105      	bne.n	8006f92 <__libc_init_array+0x2e>
 8006f86:	bd70      	pop	{r4, r5, r6, pc}
 8006f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f8c:	4798      	blx	r3
 8006f8e:	3601      	adds	r6, #1
 8006f90:	e7ee      	b.n	8006f70 <__libc_init_array+0xc>
 8006f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f96:	4798      	blx	r3
 8006f98:	3601      	adds	r6, #1
 8006f9a:	e7f2      	b.n	8006f82 <__libc_init_array+0x1e>
 8006f9c:	08008ccc 	.word	0x08008ccc
 8006fa0:	08008ccc 	.word	0x08008ccc
 8006fa4:	08008ccc 	.word	0x08008ccc
 8006fa8:	08008cd0 	.word	0x08008cd0

08006fac <__retarget_lock_init_recursive>:
 8006fac:	4770      	bx	lr

08006fae <__retarget_lock_acquire_recursive>:
 8006fae:	4770      	bx	lr

08006fb0 <__retarget_lock_release_recursive>:
 8006fb0:	4770      	bx	lr

08006fb2 <memcpy>:
 8006fb2:	440a      	add	r2, r1
 8006fb4:	4291      	cmp	r1, r2
 8006fb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fba:	d100      	bne.n	8006fbe <memcpy+0xc>
 8006fbc:	4770      	bx	lr
 8006fbe:	b510      	push	{r4, lr}
 8006fc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fc8:	4291      	cmp	r1, r2
 8006fca:	d1f9      	bne.n	8006fc0 <memcpy+0xe>
 8006fcc:	bd10      	pop	{r4, pc}

08006fce <memset>:
 8006fce:	4402      	add	r2, r0
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d100      	bne.n	8006fd8 <memset+0xa>
 8006fd6:	4770      	bx	lr
 8006fd8:	f803 1b01 	strb.w	r1, [r3], #1
 8006fdc:	e7f9      	b.n	8006fd2 <memset+0x4>
	...

08006fe0 <_malloc_r>:
 8006fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe2:	1ccd      	adds	r5, r1, #3
 8006fe4:	f025 0503 	bic.w	r5, r5, #3
 8006fe8:	3508      	adds	r5, #8
 8006fea:	2d0c      	cmp	r5, #12
 8006fec:	bf38      	it	cc
 8006fee:	250c      	movcc	r5, #12
 8006ff0:	2d00      	cmp	r5, #0
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	db01      	blt.n	8006ffa <_malloc_r+0x1a>
 8006ff6:	42a9      	cmp	r1, r5
 8006ff8:	d903      	bls.n	8007002 <_malloc_r+0x22>
 8006ffa:	230c      	movs	r3, #12
 8006ffc:	6033      	str	r3, [r6, #0]
 8006ffe:	2000      	movs	r0, #0
 8007000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007002:	f000 facd 	bl	80075a0 <__malloc_lock>
 8007006:	4921      	ldr	r1, [pc, #132]	; (800708c <_malloc_r+0xac>)
 8007008:	680a      	ldr	r2, [r1, #0]
 800700a:	4614      	mov	r4, r2
 800700c:	b99c      	cbnz	r4, 8007036 <_malloc_r+0x56>
 800700e:	4f20      	ldr	r7, [pc, #128]	; (8007090 <_malloc_r+0xb0>)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	b923      	cbnz	r3, 800701e <_malloc_r+0x3e>
 8007014:	4621      	mov	r1, r4
 8007016:	4630      	mov	r0, r6
 8007018:	f000 f914 	bl	8007244 <_sbrk_r>
 800701c:	6038      	str	r0, [r7, #0]
 800701e:	4629      	mov	r1, r5
 8007020:	4630      	mov	r0, r6
 8007022:	f000 f90f 	bl	8007244 <_sbrk_r>
 8007026:	1c43      	adds	r3, r0, #1
 8007028:	d123      	bne.n	8007072 <_malloc_r+0x92>
 800702a:	230c      	movs	r3, #12
 800702c:	6033      	str	r3, [r6, #0]
 800702e:	4630      	mov	r0, r6
 8007030:	f000 fabc 	bl	80075ac <__malloc_unlock>
 8007034:	e7e3      	b.n	8006ffe <_malloc_r+0x1e>
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	1b5b      	subs	r3, r3, r5
 800703a:	d417      	bmi.n	800706c <_malloc_r+0x8c>
 800703c:	2b0b      	cmp	r3, #11
 800703e:	d903      	bls.n	8007048 <_malloc_r+0x68>
 8007040:	6023      	str	r3, [r4, #0]
 8007042:	441c      	add	r4, r3
 8007044:	6025      	str	r5, [r4, #0]
 8007046:	e004      	b.n	8007052 <_malloc_r+0x72>
 8007048:	6863      	ldr	r3, [r4, #4]
 800704a:	42a2      	cmp	r2, r4
 800704c:	bf0c      	ite	eq
 800704e:	600b      	streq	r3, [r1, #0]
 8007050:	6053      	strne	r3, [r2, #4]
 8007052:	4630      	mov	r0, r6
 8007054:	f000 faaa 	bl	80075ac <__malloc_unlock>
 8007058:	f104 000b 	add.w	r0, r4, #11
 800705c:	1d23      	adds	r3, r4, #4
 800705e:	f020 0007 	bic.w	r0, r0, #7
 8007062:	1ac2      	subs	r2, r0, r3
 8007064:	d0cc      	beq.n	8007000 <_malloc_r+0x20>
 8007066:	1a1b      	subs	r3, r3, r0
 8007068:	50a3      	str	r3, [r4, r2]
 800706a:	e7c9      	b.n	8007000 <_malloc_r+0x20>
 800706c:	4622      	mov	r2, r4
 800706e:	6864      	ldr	r4, [r4, #4]
 8007070:	e7cc      	b.n	800700c <_malloc_r+0x2c>
 8007072:	1cc4      	adds	r4, r0, #3
 8007074:	f024 0403 	bic.w	r4, r4, #3
 8007078:	42a0      	cmp	r0, r4
 800707a:	d0e3      	beq.n	8007044 <_malloc_r+0x64>
 800707c:	1a21      	subs	r1, r4, r0
 800707e:	4630      	mov	r0, r6
 8007080:	f000 f8e0 	bl	8007244 <_sbrk_r>
 8007084:	3001      	adds	r0, #1
 8007086:	d1dd      	bne.n	8007044 <_malloc_r+0x64>
 8007088:	e7cf      	b.n	800702a <_malloc_r+0x4a>
 800708a:	bf00      	nop
 800708c:	20004a64 	.word	0x20004a64
 8007090:	20004a68 	.word	0x20004a68

08007094 <srand>:
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	4b10      	ldr	r3, [pc, #64]	; (80070d8 <srand+0x44>)
 8007098:	681d      	ldr	r5, [r3, #0]
 800709a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800709c:	4604      	mov	r4, r0
 800709e:	b9b3      	cbnz	r3, 80070ce <srand+0x3a>
 80070a0:	2018      	movs	r0, #24
 80070a2:	f000 fa75 	bl	8007590 <malloc>
 80070a6:	4602      	mov	r2, r0
 80070a8:	63a8      	str	r0, [r5, #56]	; 0x38
 80070aa:	b920      	cbnz	r0, 80070b6 <srand+0x22>
 80070ac:	4b0b      	ldr	r3, [pc, #44]	; (80070dc <srand+0x48>)
 80070ae:	480c      	ldr	r0, [pc, #48]	; (80070e0 <srand+0x4c>)
 80070b0:	2142      	movs	r1, #66	; 0x42
 80070b2:	f000 f947 	bl	8007344 <__assert_func>
 80070b6:	490b      	ldr	r1, [pc, #44]	; (80070e4 <srand+0x50>)
 80070b8:	4b0b      	ldr	r3, [pc, #44]	; (80070e8 <srand+0x54>)
 80070ba:	e9c0 1300 	strd	r1, r3, [r0]
 80070be:	4b0b      	ldr	r3, [pc, #44]	; (80070ec <srand+0x58>)
 80070c0:	6083      	str	r3, [r0, #8]
 80070c2:	230b      	movs	r3, #11
 80070c4:	8183      	strh	r3, [r0, #12]
 80070c6:	2100      	movs	r1, #0
 80070c8:	2001      	movs	r0, #1
 80070ca:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80070ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80070d0:	2200      	movs	r2, #0
 80070d2:	611c      	str	r4, [r3, #16]
 80070d4:	615a      	str	r2, [r3, #20]
 80070d6:	bd38      	pop	{r3, r4, r5, pc}
 80070d8:	20000010 	.word	0x20000010
 80070dc:	08008bdc 	.word	0x08008bdc
 80070e0:	08008bf3 	.word	0x08008bf3
 80070e4:	abcd330e 	.word	0xabcd330e
 80070e8:	e66d1234 	.word	0xe66d1234
 80070ec:	0005deec 	.word	0x0005deec

080070f0 <rand>:
 80070f0:	4b17      	ldr	r3, [pc, #92]	; (8007150 <rand+0x60>)
 80070f2:	b510      	push	{r4, lr}
 80070f4:	681c      	ldr	r4, [r3, #0]
 80070f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80070f8:	b9b3      	cbnz	r3, 8007128 <rand+0x38>
 80070fa:	2018      	movs	r0, #24
 80070fc:	f000 fa48 	bl	8007590 <malloc>
 8007100:	63a0      	str	r0, [r4, #56]	; 0x38
 8007102:	b928      	cbnz	r0, 8007110 <rand+0x20>
 8007104:	4602      	mov	r2, r0
 8007106:	4b13      	ldr	r3, [pc, #76]	; (8007154 <rand+0x64>)
 8007108:	4813      	ldr	r0, [pc, #76]	; (8007158 <rand+0x68>)
 800710a:	214e      	movs	r1, #78	; 0x4e
 800710c:	f000 f91a 	bl	8007344 <__assert_func>
 8007110:	4a12      	ldr	r2, [pc, #72]	; (800715c <rand+0x6c>)
 8007112:	4b13      	ldr	r3, [pc, #76]	; (8007160 <rand+0x70>)
 8007114:	e9c0 2300 	strd	r2, r3, [r0]
 8007118:	4b12      	ldr	r3, [pc, #72]	; (8007164 <rand+0x74>)
 800711a:	6083      	str	r3, [r0, #8]
 800711c:	230b      	movs	r3, #11
 800711e:	8183      	strh	r3, [r0, #12]
 8007120:	2201      	movs	r2, #1
 8007122:	2300      	movs	r3, #0
 8007124:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007128:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800712a:	480f      	ldr	r0, [pc, #60]	; (8007168 <rand+0x78>)
 800712c:	690a      	ldr	r2, [r1, #16]
 800712e:	694b      	ldr	r3, [r1, #20]
 8007130:	4c0e      	ldr	r4, [pc, #56]	; (800716c <rand+0x7c>)
 8007132:	4350      	muls	r0, r2
 8007134:	fb04 0003 	mla	r0, r4, r3, r0
 8007138:	fba2 3404 	umull	r3, r4, r2, r4
 800713c:	1c5a      	adds	r2, r3, #1
 800713e:	4404      	add	r4, r0
 8007140:	f144 0000 	adc.w	r0, r4, #0
 8007144:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8007148:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800714c:	bd10      	pop	{r4, pc}
 800714e:	bf00      	nop
 8007150:	20000010 	.word	0x20000010
 8007154:	08008bdc 	.word	0x08008bdc
 8007158:	08008bf3 	.word	0x08008bf3
 800715c:	abcd330e 	.word	0xabcd330e
 8007160:	e66d1234 	.word	0xe66d1234
 8007164:	0005deec 	.word	0x0005deec
 8007168:	5851f42d 	.word	0x5851f42d
 800716c:	4c957f2d 	.word	0x4c957f2d

08007170 <cleanup_glue>:
 8007170:	b538      	push	{r3, r4, r5, lr}
 8007172:	460c      	mov	r4, r1
 8007174:	6809      	ldr	r1, [r1, #0]
 8007176:	4605      	mov	r5, r0
 8007178:	b109      	cbz	r1, 800717e <cleanup_glue+0xe>
 800717a:	f7ff fff9 	bl	8007170 <cleanup_glue>
 800717e:	4621      	mov	r1, r4
 8007180:	4628      	mov	r0, r5
 8007182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007186:	f000 ba17 	b.w	80075b8 <_free_r>
	...

0800718c <_reclaim_reent>:
 800718c:	4b2c      	ldr	r3, [pc, #176]	; (8007240 <_reclaim_reent+0xb4>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4283      	cmp	r3, r0
 8007192:	b570      	push	{r4, r5, r6, lr}
 8007194:	4604      	mov	r4, r0
 8007196:	d051      	beq.n	800723c <_reclaim_reent+0xb0>
 8007198:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800719a:	b143      	cbz	r3, 80071ae <_reclaim_reent+0x22>
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d14a      	bne.n	8007238 <_reclaim_reent+0xac>
 80071a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071a4:	6819      	ldr	r1, [r3, #0]
 80071a6:	b111      	cbz	r1, 80071ae <_reclaim_reent+0x22>
 80071a8:	4620      	mov	r0, r4
 80071aa:	f000 fa05 	bl	80075b8 <_free_r>
 80071ae:	6961      	ldr	r1, [r4, #20]
 80071b0:	b111      	cbz	r1, 80071b8 <_reclaim_reent+0x2c>
 80071b2:	4620      	mov	r0, r4
 80071b4:	f000 fa00 	bl	80075b8 <_free_r>
 80071b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80071ba:	b111      	cbz	r1, 80071c2 <_reclaim_reent+0x36>
 80071bc:	4620      	mov	r0, r4
 80071be:	f000 f9fb 	bl	80075b8 <_free_r>
 80071c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80071c4:	b111      	cbz	r1, 80071cc <_reclaim_reent+0x40>
 80071c6:	4620      	mov	r0, r4
 80071c8:	f000 f9f6 	bl	80075b8 <_free_r>
 80071cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80071ce:	b111      	cbz	r1, 80071d6 <_reclaim_reent+0x4a>
 80071d0:	4620      	mov	r0, r4
 80071d2:	f000 f9f1 	bl	80075b8 <_free_r>
 80071d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80071d8:	b111      	cbz	r1, 80071e0 <_reclaim_reent+0x54>
 80071da:	4620      	mov	r0, r4
 80071dc:	f000 f9ec 	bl	80075b8 <_free_r>
 80071e0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80071e2:	b111      	cbz	r1, 80071ea <_reclaim_reent+0x5e>
 80071e4:	4620      	mov	r0, r4
 80071e6:	f000 f9e7 	bl	80075b8 <_free_r>
 80071ea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80071ec:	b111      	cbz	r1, 80071f4 <_reclaim_reent+0x68>
 80071ee:	4620      	mov	r0, r4
 80071f0:	f000 f9e2 	bl	80075b8 <_free_r>
 80071f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071f6:	b111      	cbz	r1, 80071fe <_reclaim_reent+0x72>
 80071f8:	4620      	mov	r0, r4
 80071fa:	f000 f9dd 	bl	80075b8 <_free_r>
 80071fe:	69a3      	ldr	r3, [r4, #24]
 8007200:	b1e3      	cbz	r3, 800723c <_reclaim_reent+0xb0>
 8007202:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007204:	4620      	mov	r0, r4
 8007206:	4798      	blx	r3
 8007208:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800720a:	b1b9      	cbz	r1, 800723c <_reclaim_reent+0xb0>
 800720c:	4620      	mov	r0, r4
 800720e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007212:	f7ff bfad 	b.w	8007170 <cleanup_glue>
 8007216:	5949      	ldr	r1, [r1, r5]
 8007218:	b941      	cbnz	r1, 800722c <_reclaim_reent+0xa0>
 800721a:	3504      	adds	r5, #4
 800721c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800721e:	2d80      	cmp	r5, #128	; 0x80
 8007220:	68d9      	ldr	r1, [r3, #12]
 8007222:	d1f8      	bne.n	8007216 <_reclaim_reent+0x8a>
 8007224:	4620      	mov	r0, r4
 8007226:	f000 f9c7 	bl	80075b8 <_free_r>
 800722a:	e7ba      	b.n	80071a2 <_reclaim_reent+0x16>
 800722c:	680e      	ldr	r6, [r1, #0]
 800722e:	4620      	mov	r0, r4
 8007230:	f000 f9c2 	bl	80075b8 <_free_r>
 8007234:	4631      	mov	r1, r6
 8007236:	e7ef      	b.n	8007218 <_reclaim_reent+0x8c>
 8007238:	2500      	movs	r5, #0
 800723a:	e7ef      	b.n	800721c <_reclaim_reent+0x90>
 800723c:	bd70      	pop	{r4, r5, r6, pc}
 800723e:	bf00      	nop
 8007240:	20000010 	.word	0x20000010

08007244 <_sbrk_r>:
 8007244:	b538      	push	{r3, r4, r5, lr}
 8007246:	4d06      	ldr	r5, [pc, #24]	; (8007260 <_sbrk_r+0x1c>)
 8007248:	2300      	movs	r3, #0
 800724a:	4604      	mov	r4, r0
 800724c:	4608      	mov	r0, r1
 800724e:	602b      	str	r3, [r5, #0]
 8007250:	f7fa fc54 	bl	8001afc <_sbrk>
 8007254:	1c43      	adds	r3, r0, #1
 8007256:	d102      	bne.n	800725e <_sbrk_r+0x1a>
 8007258:	682b      	ldr	r3, [r5, #0]
 800725a:	b103      	cbz	r3, 800725e <_sbrk_r+0x1a>
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	bd38      	pop	{r3, r4, r5, pc}
 8007260:	20005004 	.word	0x20005004

08007264 <__sread>:
 8007264:	b510      	push	{r4, lr}
 8007266:	460c      	mov	r4, r1
 8007268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800726c:	f000 fce2 	bl	8007c34 <_read_r>
 8007270:	2800      	cmp	r0, #0
 8007272:	bfab      	itete	ge
 8007274:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007276:	89a3      	ldrhlt	r3, [r4, #12]
 8007278:	181b      	addge	r3, r3, r0
 800727a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800727e:	bfac      	ite	ge
 8007280:	6563      	strge	r3, [r4, #84]	; 0x54
 8007282:	81a3      	strhlt	r3, [r4, #12]
 8007284:	bd10      	pop	{r4, pc}

08007286 <__swrite>:
 8007286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800728a:	461f      	mov	r7, r3
 800728c:	898b      	ldrh	r3, [r1, #12]
 800728e:	05db      	lsls	r3, r3, #23
 8007290:	4605      	mov	r5, r0
 8007292:	460c      	mov	r4, r1
 8007294:	4616      	mov	r6, r2
 8007296:	d505      	bpl.n	80072a4 <__swrite+0x1e>
 8007298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800729c:	2302      	movs	r3, #2
 800729e:	2200      	movs	r2, #0
 80072a0:	f000 f964 	bl	800756c <_lseek_r>
 80072a4:	89a3      	ldrh	r3, [r4, #12]
 80072a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072ae:	81a3      	strh	r3, [r4, #12]
 80072b0:	4632      	mov	r2, r6
 80072b2:	463b      	mov	r3, r7
 80072b4:	4628      	mov	r0, r5
 80072b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072ba:	f000 b831 	b.w	8007320 <_write_r>

080072be <__sseek>:
 80072be:	b510      	push	{r4, lr}
 80072c0:	460c      	mov	r4, r1
 80072c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c6:	f000 f951 	bl	800756c <_lseek_r>
 80072ca:	1c43      	adds	r3, r0, #1
 80072cc:	89a3      	ldrh	r3, [r4, #12]
 80072ce:	bf15      	itete	ne
 80072d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80072d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072da:	81a3      	strheq	r3, [r4, #12]
 80072dc:	bf18      	it	ne
 80072de:	81a3      	strhne	r3, [r4, #12]
 80072e0:	bd10      	pop	{r4, pc}

080072e2 <__sclose>:
 80072e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072e6:	f000 b84b 	b.w	8007380 <_close_r>
	...

080072ec <time>:
 80072ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072ee:	4b0b      	ldr	r3, [pc, #44]	; (800731c <time+0x30>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	4669      	mov	r1, sp
 80072f4:	4604      	mov	r4, r0
 80072f6:	6818      	ldr	r0, [r3, #0]
 80072f8:	f000 f926 	bl	8007548 <_gettimeofday_r>
 80072fc:	2800      	cmp	r0, #0
 80072fe:	bfbe      	ittt	lt
 8007300:	f04f 32ff 	movlt.w	r2, #4294967295
 8007304:	f04f 33ff 	movlt.w	r3, #4294967295
 8007308:	e9cd 2300 	strdlt	r2, r3, [sp]
 800730c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007310:	b10c      	cbz	r4, 8007316 <time+0x2a>
 8007312:	e9c4 0100 	strd	r0, r1, [r4]
 8007316:	b004      	add	sp, #16
 8007318:	bd10      	pop	{r4, pc}
 800731a:	bf00      	nop
 800731c:	20000010 	.word	0x20000010

08007320 <_write_r>:
 8007320:	b538      	push	{r3, r4, r5, lr}
 8007322:	4d07      	ldr	r5, [pc, #28]	; (8007340 <_write_r+0x20>)
 8007324:	4604      	mov	r4, r0
 8007326:	4608      	mov	r0, r1
 8007328:	4611      	mov	r1, r2
 800732a:	2200      	movs	r2, #0
 800732c:	602a      	str	r2, [r5, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	f7fa fb93 	bl	8001a5a <_write>
 8007334:	1c43      	adds	r3, r0, #1
 8007336:	d102      	bne.n	800733e <_write_r+0x1e>
 8007338:	682b      	ldr	r3, [r5, #0]
 800733a:	b103      	cbz	r3, 800733e <_write_r+0x1e>
 800733c:	6023      	str	r3, [r4, #0]
 800733e:	bd38      	pop	{r3, r4, r5, pc}
 8007340:	20005004 	.word	0x20005004

08007344 <__assert_func>:
 8007344:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007346:	4614      	mov	r4, r2
 8007348:	461a      	mov	r2, r3
 800734a:	4b09      	ldr	r3, [pc, #36]	; (8007370 <__assert_func+0x2c>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4605      	mov	r5, r0
 8007350:	68d8      	ldr	r0, [r3, #12]
 8007352:	b14c      	cbz	r4, 8007368 <__assert_func+0x24>
 8007354:	4b07      	ldr	r3, [pc, #28]	; (8007374 <__assert_func+0x30>)
 8007356:	9100      	str	r1, [sp, #0]
 8007358:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800735c:	4906      	ldr	r1, [pc, #24]	; (8007378 <__assert_func+0x34>)
 800735e:	462b      	mov	r3, r5
 8007360:	f000 f8e0 	bl	8007524 <fiprintf>
 8007364:	f000 fd38 	bl	8007dd8 <abort>
 8007368:	4b04      	ldr	r3, [pc, #16]	; (800737c <__assert_func+0x38>)
 800736a:	461c      	mov	r4, r3
 800736c:	e7f3      	b.n	8007356 <__assert_func+0x12>
 800736e:	bf00      	nop
 8007370:	20000010 	.word	0x20000010
 8007374:	08008c52 	.word	0x08008c52
 8007378:	08008c5f 	.word	0x08008c5f
 800737c:	08008c8d 	.word	0x08008c8d

08007380 <_close_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	4d06      	ldr	r5, [pc, #24]	; (800739c <_close_r+0x1c>)
 8007384:	2300      	movs	r3, #0
 8007386:	4604      	mov	r4, r0
 8007388:	4608      	mov	r0, r1
 800738a:	602b      	str	r3, [r5, #0]
 800738c:	f7fa fb81 	bl	8001a92 <_close>
 8007390:	1c43      	adds	r3, r0, #1
 8007392:	d102      	bne.n	800739a <_close_r+0x1a>
 8007394:	682b      	ldr	r3, [r5, #0]
 8007396:	b103      	cbz	r3, 800739a <_close_r+0x1a>
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	bd38      	pop	{r3, r4, r5, pc}
 800739c:	20005004 	.word	0x20005004

080073a0 <__sflush_r>:
 80073a0:	898a      	ldrh	r2, [r1, #12]
 80073a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073a6:	4605      	mov	r5, r0
 80073a8:	0710      	lsls	r0, r2, #28
 80073aa:	460c      	mov	r4, r1
 80073ac:	d458      	bmi.n	8007460 <__sflush_r+0xc0>
 80073ae:	684b      	ldr	r3, [r1, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	dc05      	bgt.n	80073c0 <__sflush_r+0x20>
 80073b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	dc02      	bgt.n	80073c0 <__sflush_r+0x20>
 80073ba:	2000      	movs	r0, #0
 80073bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073c2:	2e00      	cmp	r6, #0
 80073c4:	d0f9      	beq.n	80073ba <__sflush_r+0x1a>
 80073c6:	2300      	movs	r3, #0
 80073c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80073cc:	682f      	ldr	r7, [r5, #0]
 80073ce:	602b      	str	r3, [r5, #0]
 80073d0:	d032      	beq.n	8007438 <__sflush_r+0x98>
 80073d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80073d4:	89a3      	ldrh	r3, [r4, #12]
 80073d6:	075a      	lsls	r2, r3, #29
 80073d8:	d505      	bpl.n	80073e6 <__sflush_r+0x46>
 80073da:	6863      	ldr	r3, [r4, #4]
 80073dc:	1ac0      	subs	r0, r0, r3
 80073de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073e0:	b10b      	cbz	r3, 80073e6 <__sflush_r+0x46>
 80073e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073e4:	1ac0      	subs	r0, r0, r3
 80073e6:	2300      	movs	r3, #0
 80073e8:	4602      	mov	r2, r0
 80073ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073ec:	6a21      	ldr	r1, [r4, #32]
 80073ee:	4628      	mov	r0, r5
 80073f0:	47b0      	blx	r6
 80073f2:	1c43      	adds	r3, r0, #1
 80073f4:	89a3      	ldrh	r3, [r4, #12]
 80073f6:	d106      	bne.n	8007406 <__sflush_r+0x66>
 80073f8:	6829      	ldr	r1, [r5, #0]
 80073fa:	291d      	cmp	r1, #29
 80073fc:	d82c      	bhi.n	8007458 <__sflush_r+0xb8>
 80073fe:	4a2a      	ldr	r2, [pc, #168]	; (80074a8 <__sflush_r+0x108>)
 8007400:	40ca      	lsrs	r2, r1
 8007402:	07d6      	lsls	r6, r2, #31
 8007404:	d528      	bpl.n	8007458 <__sflush_r+0xb8>
 8007406:	2200      	movs	r2, #0
 8007408:	6062      	str	r2, [r4, #4]
 800740a:	04d9      	lsls	r1, r3, #19
 800740c:	6922      	ldr	r2, [r4, #16]
 800740e:	6022      	str	r2, [r4, #0]
 8007410:	d504      	bpl.n	800741c <__sflush_r+0x7c>
 8007412:	1c42      	adds	r2, r0, #1
 8007414:	d101      	bne.n	800741a <__sflush_r+0x7a>
 8007416:	682b      	ldr	r3, [r5, #0]
 8007418:	b903      	cbnz	r3, 800741c <__sflush_r+0x7c>
 800741a:	6560      	str	r0, [r4, #84]	; 0x54
 800741c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800741e:	602f      	str	r7, [r5, #0]
 8007420:	2900      	cmp	r1, #0
 8007422:	d0ca      	beq.n	80073ba <__sflush_r+0x1a>
 8007424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007428:	4299      	cmp	r1, r3
 800742a:	d002      	beq.n	8007432 <__sflush_r+0x92>
 800742c:	4628      	mov	r0, r5
 800742e:	f000 f8c3 	bl	80075b8 <_free_r>
 8007432:	2000      	movs	r0, #0
 8007434:	6360      	str	r0, [r4, #52]	; 0x34
 8007436:	e7c1      	b.n	80073bc <__sflush_r+0x1c>
 8007438:	6a21      	ldr	r1, [r4, #32]
 800743a:	2301      	movs	r3, #1
 800743c:	4628      	mov	r0, r5
 800743e:	47b0      	blx	r6
 8007440:	1c41      	adds	r1, r0, #1
 8007442:	d1c7      	bne.n	80073d4 <__sflush_r+0x34>
 8007444:	682b      	ldr	r3, [r5, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d0c4      	beq.n	80073d4 <__sflush_r+0x34>
 800744a:	2b1d      	cmp	r3, #29
 800744c:	d001      	beq.n	8007452 <__sflush_r+0xb2>
 800744e:	2b16      	cmp	r3, #22
 8007450:	d101      	bne.n	8007456 <__sflush_r+0xb6>
 8007452:	602f      	str	r7, [r5, #0]
 8007454:	e7b1      	b.n	80073ba <__sflush_r+0x1a>
 8007456:	89a3      	ldrh	r3, [r4, #12]
 8007458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800745c:	81a3      	strh	r3, [r4, #12]
 800745e:	e7ad      	b.n	80073bc <__sflush_r+0x1c>
 8007460:	690f      	ldr	r7, [r1, #16]
 8007462:	2f00      	cmp	r7, #0
 8007464:	d0a9      	beq.n	80073ba <__sflush_r+0x1a>
 8007466:	0793      	lsls	r3, r2, #30
 8007468:	680e      	ldr	r6, [r1, #0]
 800746a:	bf08      	it	eq
 800746c:	694b      	ldreq	r3, [r1, #20]
 800746e:	600f      	str	r7, [r1, #0]
 8007470:	bf18      	it	ne
 8007472:	2300      	movne	r3, #0
 8007474:	eba6 0807 	sub.w	r8, r6, r7
 8007478:	608b      	str	r3, [r1, #8]
 800747a:	f1b8 0f00 	cmp.w	r8, #0
 800747e:	dd9c      	ble.n	80073ba <__sflush_r+0x1a>
 8007480:	6a21      	ldr	r1, [r4, #32]
 8007482:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007484:	4643      	mov	r3, r8
 8007486:	463a      	mov	r2, r7
 8007488:	4628      	mov	r0, r5
 800748a:	47b0      	blx	r6
 800748c:	2800      	cmp	r0, #0
 800748e:	dc06      	bgt.n	800749e <__sflush_r+0xfe>
 8007490:	89a3      	ldrh	r3, [r4, #12]
 8007492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007496:	81a3      	strh	r3, [r4, #12]
 8007498:	f04f 30ff 	mov.w	r0, #4294967295
 800749c:	e78e      	b.n	80073bc <__sflush_r+0x1c>
 800749e:	4407      	add	r7, r0
 80074a0:	eba8 0800 	sub.w	r8, r8, r0
 80074a4:	e7e9      	b.n	800747a <__sflush_r+0xda>
 80074a6:	bf00      	nop
 80074a8:	20400001 	.word	0x20400001

080074ac <_fflush_r>:
 80074ac:	b538      	push	{r3, r4, r5, lr}
 80074ae:	690b      	ldr	r3, [r1, #16]
 80074b0:	4605      	mov	r5, r0
 80074b2:	460c      	mov	r4, r1
 80074b4:	b913      	cbnz	r3, 80074bc <_fflush_r+0x10>
 80074b6:	2500      	movs	r5, #0
 80074b8:	4628      	mov	r0, r5
 80074ba:	bd38      	pop	{r3, r4, r5, pc}
 80074bc:	b118      	cbz	r0, 80074c6 <_fflush_r+0x1a>
 80074be:	6983      	ldr	r3, [r0, #24]
 80074c0:	b90b      	cbnz	r3, 80074c6 <_fflush_r+0x1a>
 80074c2:	f7ff fcb1 	bl	8006e28 <__sinit>
 80074c6:	4b14      	ldr	r3, [pc, #80]	; (8007518 <_fflush_r+0x6c>)
 80074c8:	429c      	cmp	r4, r3
 80074ca:	d11b      	bne.n	8007504 <_fflush_r+0x58>
 80074cc:	686c      	ldr	r4, [r5, #4]
 80074ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0ef      	beq.n	80074b6 <_fflush_r+0xa>
 80074d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80074d8:	07d0      	lsls	r0, r2, #31
 80074da:	d404      	bmi.n	80074e6 <_fflush_r+0x3a>
 80074dc:	0599      	lsls	r1, r3, #22
 80074de:	d402      	bmi.n	80074e6 <_fflush_r+0x3a>
 80074e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074e2:	f7ff fd64 	bl	8006fae <__retarget_lock_acquire_recursive>
 80074e6:	4628      	mov	r0, r5
 80074e8:	4621      	mov	r1, r4
 80074ea:	f7ff ff59 	bl	80073a0 <__sflush_r>
 80074ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074f0:	07da      	lsls	r2, r3, #31
 80074f2:	4605      	mov	r5, r0
 80074f4:	d4e0      	bmi.n	80074b8 <_fflush_r+0xc>
 80074f6:	89a3      	ldrh	r3, [r4, #12]
 80074f8:	059b      	lsls	r3, r3, #22
 80074fa:	d4dd      	bmi.n	80074b8 <_fflush_r+0xc>
 80074fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074fe:	f7ff fd57 	bl	8006fb0 <__retarget_lock_release_recursive>
 8007502:	e7d9      	b.n	80074b8 <_fflush_r+0xc>
 8007504:	4b05      	ldr	r3, [pc, #20]	; (800751c <_fflush_r+0x70>)
 8007506:	429c      	cmp	r4, r3
 8007508:	d101      	bne.n	800750e <_fflush_r+0x62>
 800750a:	68ac      	ldr	r4, [r5, #8]
 800750c:	e7df      	b.n	80074ce <_fflush_r+0x22>
 800750e:	4b04      	ldr	r3, [pc, #16]	; (8007520 <_fflush_r+0x74>)
 8007510:	429c      	cmp	r4, r3
 8007512:	bf08      	it	eq
 8007514:	68ec      	ldreq	r4, [r5, #12]
 8007516:	e7da      	b.n	80074ce <_fflush_r+0x22>
 8007518:	08008b98 	.word	0x08008b98
 800751c:	08008bb8 	.word	0x08008bb8
 8007520:	08008b78 	.word	0x08008b78

08007524 <fiprintf>:
 8007524:	b40e      	push	{r1, r2, r3}
 8007526:	b503      	push	{r0, r1, lr}
 8007528:	4601      	mov	r1, r0
 800752a:	ab03      	add	r3, sp, #12
 800752c:	4805      	ldr	r0, [pc, #20]	; (8007544 <fiprintf+0x20>)
 800752e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007532:	6800      	ldr	r0, [r0, #0]
 8007534:	9301      	str	r3, [sp, #4]
 8007536:	f000 f8b9 	bl	80076ac <_vfiprintf_r>
 800753a:	b002      	add	sp, #8
 800753c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007540:	b003      	add	sp, #12
 8007542:	4770      	bx	lr
 8007544:	20000010 	.word	0x20000010

08007548 <_gettimeofday_r>:
 8007548:	b538      	push	{r3, r4, r5, lr}
 800754a:	4d07      	ldr	r5, [pc, #28]	; (8007568 <_gettimeofday_r+0x20>)
 800754c:	2300      	movs	r3, #0
 800754e:	4604      	mov	r4, r0
 8007550:	4608      	mov	r0, r1
 8007552:	4611      	mov	r1, r2
 8007554:	602b      	str	r3, [r5, #0]
 8007556:	f000 fd11 	bl	8007f7c <_gettimeofday>
 800755a:	1c43      	adds	r3, r0, #1
 800755c:	d102      	bne.n	8007564 <_gettimeofday_r+0x1c>
 800755e:	682b      	ldr	r3, [r5, #0]
 8007560:	b103      	cbz	r3, 8007564 <_gettimeofday_r+0x1c>
 8007562:	6023      	str	r3, [r4, #0]
 8007564:	bd38      	pop	{r3, r4, r5, pc}
 8007566:	bf00      	nop
 8007568:	20005004 	.word	0x20005004

0800756c <_lseek_r>:
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	4d07      	ldr	r5, [pc, #28]	; (800758c <_lseek_r+0x20>)
 8007570:	4604      	mov	r4, r0
 8007572:	4608      	mov	r0, r1
 8007574:	4611      	mov	r1, r2
 8007576:	2200      	movs	r2, #0
 8007578:	602a      	str	r2, [r5, #0]
 800757a:	461a      	mov	r2, r3
 800757c:	f7fa fab0 	bl	8001ae0 <_lseek>
 8007580:	1c43      	adds	r3, r0, #1
 8007582:	d102      	bne.n	800758a <_lseek_r+0x1e>
 8007584:	682b      	ldr	r3, [r5, #0]
 8007586:	b103      	cbz	r3, 800758a <_lseek_r+0x1e>
 8007588:	6023      	str	r3, [r4, #0]
 800758a:	bd38      	pop	{r3, r4, r5, pc}
 800758c:	20005004 	.word	0x20005004

08007590 <malloc>:
 8007590:	4b02      	ldr	r3, [pc, #8]	; (800759c <malloc+0xc>)
 8007592:	4601      	mov	r1, r0
 8007594:	6818      	ldr	r0, [r3, #0]
 8007596:	f7ff bd23 	b.w	8006fe0 <_malloc_r>
 800759a:	bf00      	nop
 800759c:	20000010 	.word	0x20000010

080075a0 <__malloc_lock>:
 80075a0:	4801      	ldr	r0, [pc, #4]	; (80075a8 <__malloc_lock+0x8>)
 80075a2:	f7ff bd04 	b.w	8006fae <__retarget_lock_acquire_recursive>
 80075a6:	bf00      	nop
 80075a8:	20004ffc 	.word	0x20004ffc

080075ac <__malloc_unlock>:
 80075ac:	4801      	ldr	r0, [pc, #4]	; (80075b4 <__malloc_unlock+0x8>)
 80075ae:	f7ff bcff 	b.w	8006fb0 <__retarget_lock_release_recursive>
 80075b2:	bf00      	nop
 80075b4:	20004ffc 	.word	0x20004ffc

080075b8 <_free_r>:
 80075b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075ba:	2900      	cmp	r1, #0
 80075bc:	d048      	beq.n	8007650 <_free_r+0x98>
 80075be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075c2:	9001      	str	r0, [sp, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f1a1 0404 	sub.w	r4, r1, #4
 80075ca:	bfb8      	it	lt
 80075cc:	18e4      	addlt	r4, r4, r3
 80075ce:	f7ff ffe7 	bl	80075a0 <__malloc_lock>
 80075d2:	4a20      	ldr	r2, [pc, #128]	; (8007654 <_free_r+0x9c>)
 80075d4:	9801      	ldr	r0, [sp, #4]
 80075d6:	6813      	ldr	r3, [r2, #0]
 80075d8:	4615      	mov	r5, r2
 80075da:	b933      	cbnz	r3, 80075ea <_free_r+0x32>
 80075dc:	6063      	str	r3, [r4, #4]
 80075de:	6014      	str	r4, [r2, #0]
 80075e0:	b003      	add	sp, #12
 80075e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075e6:	f7ff bfe1 	b.w	80075ac <__malloc_unlock>
 80075ea:	42a3      	cmp	r3, r4
 80075ec:	d90b      	bls.n	8007606 <_free_r+0x4e>
 80075ee:	6821      	ldr	r1, [r4, #0]
 80075f0:	1862      	adds	r2, r4, r1
 80075f2:	4293      	cmp	r3, r2
 80075f4:	bf04      	itt	eq
 80075f6:	681a      	ldreq	r2, [r3, #0]
 80075f8:	685b      	ldreq	r3, [r3, #4]
 80075fa:	6063      	str	r3, [r4, #4]
 80075fc:	bf04      	itt	eq
 80075fe:	1852      	addeq	r2, r2, r1
 8007600:	6022      	streq	r2, [r4, #0]
 8007602:	602c      	str	r4, [r5, #0]
 8007604:	e7ec      	b.n	80075e0 <_free_r+0x28>
 8007606:	461a      	mov	r2, r3
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	b10b      	cbz	r3, 8007610 <_free_r+0x58>
 800760c:	42a3      	cmp	r3, r4
 800760e:	d9fa      	bls.n	8007606 <_free_r+0x4e>
 8007610:	6811      	ldr	r1, [r2, #0]
 8007612:	1855      	adds	r5, r2, r1
 8007614:	42a5      	cmp	r5, r4
 8007616:	d10b      	bne.n	8007630 <_free_r+0x78>
 8007618:	6824      	ldr	r4, [r4, #0]
 800761a:	4421      	add	r1, r4
 800761c:	1854      	adds	r4, r2, r1
 800761e:	42a3      	cmp	r3, r4
 8007620:	6011      	str	r1, [r2, #0]
 8007622:	d1dd      	bne.n	80075e0 <_free_r+0x28>
 8007624:	681c      	ldr	r4, [r3, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	6053      	str	r3, [r2, #4]
 800762a:	4421      	add	r1, r4
 800762c:	6011      	str	r1, [r2, #0]
 800762e:	e7d7      	b.n	80075e0 <_free_r+0x28>
 8007630:	d902      	bls.n	8007638 <_free_r+0x80>
 8007632:	230c      	movs	r3, #12
 8007634:	6003      	str	r3, [r0, #0]
 8007636:	e7d3      	b.n	80075e0 <_free_r+0x28>
 8007638:	6825      	ldr	r5, [r4, #0]
 800763a:	1961      	adds	r1, r4, r5
 800763c:	428b      	cmp	r3, r1
 800763e:	bf04      	itt	eq
 8007640:	6819      	ldreq	r1, [r3, #0]
 8007642:	685b      	ldreq	r3, [r3, #4]
 8007644:	6063      	str	r3, [r4, #4]
 8007646:	bf04      	itt	eq
 8007648:	1949      	addeq	r1, r1, r5
 800764a:	6021      	streq	r1, [r4, #0]
 800764c:	6054      	str	r4, [r2, #4]
 800764e:	e7c7      	b.n	80075e0 <_free_r+0x28>
 8007650:	b003      	add	sp, #12
 8007652:	bd30      	pop	{r4, r5, pc}
 8007654:	20004a64 	.word	0x20004a64

08007658 <__sfputc_r>:
 8007658:	6893      	ldr	r3, [r2, #8]
 800765a:	3b01      	subs	r3, #1
 800765c:	2b00      	cmp	r3, #0
 800765e:	b410      	push	{r4}
 8007660:	6093      	str	r3, [r2, #8]
 8007662:	da08      	bge.n	8007676 <__sfputc_r+0x1e>
 8007664:	6994      	ldr	r4, [r2, #24]
 8007666:	42a3      	cmp	r3, r4
 8007668:	db01      	blt.n	800766e <__sfputc_r+0x16>
 800766a:	290a      	cmp	r1, #10
 800766c:	d103      	bne.n	8007676 <__sfputc_r+0x1e>
 800766e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007672:	f000 baf1 	b.w	8007c58 <__swbuf_r>
 8007676:	6813      	ldr	r3, [r2, #0]
 8007678:	1c58      	adds	r0, r3, #1
 800767a:	6010      	str	r0, [r2, #0]
 800767c:	7019      	strb	r1, [r3, #0]
 800767e:	4608      	mov	r0, r1
 8007680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007684:	4770      	bx	lr

08007686 <__sfputs_r>:
 8007686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007688:	4606      	mov	r6, r0
 800768a:	460f      	mov	r7, r1
 800768c:	4614      	mov	r4, r2
 800768e:	18d5      	adds	r5, r2, r3
 8007690:	42ac      	cmp	r4, r5
 8007692:	d101      	bne.n	8007698 <__sfputs_r+0x12>
 8007694:	2000      	movs	r0, #0
 8007696:	e007      	b.n	80076a8 <__sfputs_r+0x22>
 8007698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800769c:	463a      	mov	r2, r7
 800769e:	4630      	mov	r0, r6
 80076a0:	f7ff ffda 	bl	8007658 <__sfputc_r>
 80076a4:	1c43      	adds	r3, r0, #1
 80076a6:	d1f3      	bne.n	8007690 <__sfputs_r+0xa>
 80076a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076ac <_vfiprintf_r>:
 80076ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b0:	460d      	mov	r5, r1
 80076b2:	b09d      	sub	sp, #116	; 0x74
 80076b4:	4614      	mov	r4, r2
 80076b6:	4698      	mov	r8, r3
 80076b8:	4606      	mov	r6, r0
 80076ba:	b118      	cbz	r0, 80076c4 <_vfiprintf_r+0x18>
 80076bc:	6983      	ldr	r3, [r0, #24]
 80076be:	b90b      	cbnz	r3, 80076c4 <_vfiprintf_r+0x18>
 80076c0:	f7ff fbb2 	bl	8006e28 <__sinit>
 80076c4:	4b89      	ldr	r3, [pc, #548]	; (80078ec <_vfiprintf_r+0x240>)
 80076c6:	429d      	cmp	r5, r3
 80076c8:	d11b      	bne.n	8007702 <_vfiprintf_r+0x56>
 80076ca:	6875      	ldr	r5, [r6, #4]
 80076cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076ce:	07d9      	lsls	r1, r3, #31
 80076d0:	d405      	bmi.n	80076de <_vfiprintf_r+0x32>
 80076d2:	89ab      	ldrh	r3, [r5, #12]
 80076d4:	059a      	lsls	r2, r3, #22
 80076d6:	d402      	bmi.n	80076de <_vfiprintf_r+0x32>
 80076d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076da:	f7ff fc68 	bl	8006fae <__retarget_lock_acquire_recursive>
 80076de:	89ab      	ldrh	r3, [r5, #12]
 80076e0:	071b      	lsls	r3, r3, #28
 80076e2:	d501      	bpl.n	80076e8 <_vfiprintf_r+0x3c>
 80076e4:	692b      	ldr	r3, [r5, #16]
 80076e6:	b9eb      	cbnz	r3, 8007724 <_vfiprintf_r+0x78>
 80076e8:	4629      	mov	r1, r5
 80076ea:	4630      	mov	r0, r6
 80076ec:	f000 fb06 	bl	8007cfc <__swsetup_r>
 80076f0:	b1c0      	cbz	r0, 8007724 <_vfiprintf_r+0x78>
 80076f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076f4:	07dc      	lsls	r4, r3, #31
 80076f6:	d50e      	bpl.n	8007716 <_vfiprintf_r+0x6a>
 80076f8:	f04f 30ff 	mov.w	r0, #4294967295
 80076fc:	b01d      	add	sp, #116	; 0x74
 80076fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007702:	4b7b      	ldr	r3, [pc, #492]	; (80078f0 <_vfiprintf_r+0x244>)
 8007704:	429d      	cmp	r5, r3
 8007706:	d101      	bne.n	800770c <_vfiprintf_r+0x60>
 8007708:	68b5      	ldr	r5, [r6, #8]
 800770a:	e7df      	b.n	80076cc <_vfiprintf_r+0x20>
 800770c:	4b79      	ldr	r3, [pc, #484]	; (80078f4 <_vfiprintf_r+0x248>)
 800770e:	429d      	cmp	r5, r3
 8007710:	bf08      	it	eq
 8007712:	68f5      	ldreq	r5, [r6, #12]
 8007714:	e7da      	b.n	80076cc <_vfiprintf_r+0x20>
 8007716:	89ab      	ldrh	r3, [r5, #12]
 8007718:	0598      	lsls	r0, r3, #22
 800771a:	d4ed      	bmi.n	80076f8 <_vfiprintf_r+0x4c>
 800771c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800771e:	f7ff fc47 	bl	8006fb0 <__retarget_lock_release_recursive>
 8007722:	e7e9      	b.n	80076f8 <_vfiprintf_r+0x4c>
 8007724:	2300      	movs	r3, #0
 8007726:	9309      	str	r3, [sp, #36]	; 0x24
 8007728:	2320      	movs	r3, #32
 800772a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800772e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007732:	2330      	movs	r3, #48	; 0x30
 8007734:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80078f8 <_vfiprintf_r+0x24c>
 8007738:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800773c:	f04f 0901 	mov.w	r9, #1
 8007740:	4623      	mov	r3, r4
 8007742:	469a      	mov	sl, r3
 8007744:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007748:	b10a      	cbz	r2, 800774e <_vfiprintf_r+0xa2>
 800774a:	2a25      	cmp	r2, #37	; 0x25
 800774c:	d1f9      	bne.n	8007742 <_vfiprintf_r+0x96>
 800774e:	ebba 0b04 	subs.w	fp, sl, r4
 8007752:	d00b      	beq.n	800776c <_vfiprintf_r+0xc0>
 8007754:	465b      	mov	r3, fp
 8007756:	4622      	mov	r2, r4
 8007758:	4629      	mov	r1, r5
 800775a:	4630      	mov	r0, r6
 800775c:	f7ff ff93 	bl	8007686 <__sfputs_r>
 8007760:	3001      	adds	r0, #1
 8007762:	f000 80aa 	beq.w	80078ba <_vfiprintf_r+0x20e>
 8007766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007768:	445a      	add	r2, fp
 800776a:	9209      	str	r2, [sp, #36]	; 0x24
 800776c:	f89a 3000 	ldrb.w	r3, [sl]
 8007770:	2b00      	cmp	r3, #0
 8007772:	f000 80a2 	beq.w	80078ba <_vfiprintf_r+0x20e>
 8007776:	2300      	movs	r3, #0
 8007778:	f04f 32ff 	mov.w	r2, #4294967295
 800777c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007780:	f10a 0a01 	add.w	sl, sl, #1
 8007784:	9304      	str	r3, [sp, #16]
 8007786:	9307      	str	r3, [sp, #28]
 8007788:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800778c:	931a      	str	r3, [sp, #104]	; 0x68
 800778e:	4654      	mov	r4, sl
 8007790:	2205      	movs	r2, #5
 8007792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007796:	4858      	ldr	r0, [pc, #352]	; (80078f8 <_vfiprintf_r+0x24c>)
 8007798:	f7f8 fd3a 	bl	8000210 <memchr>
 800779c:	9a04      	ldr	r2, [sp, #16]
 800779e:	b9d8      	cbnz	r0, 80077d8 <_vfiprintf_r+0x12c>
 80077a0:	06d1      	lsls	r1, r2, #27
 80077a2:	bf44      	itt	mi
 80077a4:	2320      	movmi	r3, #32
 80077a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077aa:	0713      	lsls	r3, r2, #28
 80077ac:	bf44      	itt	mi
 80077ae:	232b      	movmi	r3, #43	; 0x2b
 80077b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077b4:	f89a 3000 	ldrb.w	r3, [sl]
 80077b8:	2b2a      	cmp	r3, #42	; 0x2a
 80077ba:	d015      	beq.n	80077e8 <_vfiprintf_r+0x13c>
 80077bc:	9a07      	ldr	r2, [sp, #28]
 80077be:	4654      	mov	r4, sl
 80077c0:	2000      	movs	r0, #0
 80077c2:	f04f 0c0a 	mov.w	ip, #10
 80077c6:	4621      	mov	r1, r4
 80077c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077cc:	3b30      	subs	r3, #48	; 0x30
 80077ce:	2b09      	cmp	r3, #9
 80077d0:	d94e      	bls.n	8007870 <_vfiprintf_r+0x1c4>
 80077d2:	b1b0      	cbz	r0, 8007802 <_vfiprintf_r+0x156>
 80077d4:	9207      	str	r2, [sp, #28]
 80077d6:	e014      	b.n	8007802 <_vfiprintf_r+0x156>
 80077d8:	eba0 0308 	sub.w	r3, r0, r8
 80077dc:	fa09 f303 	lsl.w	r3, r9, r3
 80077e0:	4313      	orrs	r3, r2
 80077e2:	9304      	str	r3, [sp, #16]
 80077e4:	46a2      	mov	sl, r4
 80077e6:	e7d2      	b.n	800778e <_vfiprintf_r+0xe2>
 80077e8:	9b03      	ldr	r3, [sp, #12]
 80077ea:	1d19      	adds	r1, r3, #4
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	9103      	str	r1, [sp, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	bfbb      	ittet	lt
 80077f4:	425b      	neglt	r3, r3
 80077f6:	f042 0202 	orrlt.w	r2, r2, #2
 80077fa:	9307      	strge	r3, [sp, #28]
 80077fc:	9307      	strlt	r3, [sp, #28]
 80077fe:	bfb8      	it	lt
 8007800:	9204      	strlt	r2, [sp, #16]
 8007802:	7823      	ldrb	r3, [r4, #0]
 8007804:	2b2e      	cmp	r3, #46	; 0x2e
 8007806:	d10c      	bne.n	8007822 <_vfiprintf_r+0x176>
 8007808:	7863      	ldrb	r3, [r4, #1]
 800780a:	2b2a      	cmp	r3, #42	; 0x2a
 800780c:	d135      	bne.n	800787a <_vfiprintf_r+0x1ce>
 800780e:	9b03      	ldr	r3, [sp, #12]
 8007810:	1d1a      	adds	r2, r3, #4
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	9203      	str	r2, [sp, #12]
 8007816:	2b00      	cmp	r3, #0
 8007818:	bfb8      	it	lt
 800781a:	f04f 33ff 	movlt.w	r3, #4294967295
 800781e:	3402      	adds	r4, #2
 8007820:	9305      	str	r3, [sp, #20]
 8007822:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007908 <_vfiprintf_r+0x25c>
 8007826:	7821      	ldrb	r1, [r4, #0]
 8007828:	2203      	movs	r2, #3
 800782a:	4650      	mov	r0, sl
 800782c:	f7f8 fcf0 	bl	8000210 <memchr>
 8007830:	b140      	cbz	r0, 8007844 <_vfiprintf_r+0x198>
 8007832:	2340      	movs	r3, #64	; 0x40
 8007834:	eba0 000a 	sub.w	r0, r0, sl
 8007838:	fa03 f000 	lsl.w	r0, r3, r0
 800783c:	9b04      	ldr	r3, [sp, #16]
 800783e:	4303      	orrs	r3, r0
 8007840:	3401      	adds	r4, #1
 8007842:	9304      	str	r3, [sp, #16]
 8007844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007848:	482c      	ldr	r0, [pc, #176]	; (80078fc <_vfiprintf_r+0x250>)
 800784a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800784e:	2206      	movs	r2, #6
 8007850:	f7f8 fcde 	bl	8000210 <memchr>
 8007854:	2800      	cmp	r0, #0
 8007856:	d03f      	beq.n	80078d8 <_vfiprintf_r+0x22c>
 8007858:	4b29      	ldr	r3, [pc, #164]	; (8007900 <_vfiprintf_r+0x254>)
 800785a:	bb1b      	cbnz	r3, 80078a4 <_vfiprintf_r+0x1f8>
 800785c:	9b03      	ldr	r3, [sp, #12]
 800785e:	3307      	adds	r3, #7
 8007860:	f023 0307 	bic.w	r3, r3, #7
 8007864:	3308      	adds	r3, #8
 8007866:	9303      	str	r3, [sp, #12]
 8007868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800786a:	443b      	add	r3, r7
 800786c:	9309      	str	r3, [sp, #36]	; 0x24
 800786e:	e767      	b.n	8007740 <_vfiprintf_r+0x94>
 8007870:	fb0c 3202 	mla	r2, ip, r2, r3
 8007874:	460c      	mov	r4, r1
 8007876:	2001      	movs	r0, #1
 8007878:	e7a5      	b.n	80077c6 <_vfiprintf_r+0x11a>
 800787a:	2300      	movs	r3, #0
 800787c:	3401      	adds	r4, #1
 800787e:	9305      	str	r3, [sp, #20]
 8007880:	4619      	mov	r1, r3
 8007882:	f04f 0c0a 	mov.w	ip, #10
 8007886:	4620      	mov	r0, r4
 8007888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800788c:	3a30      	subs	r2, #48	; 0x30
 800788e:	2a09      	cmp	r2, #9
 8007890:	d903      	bls.n	800789a <_vfiprintf_r+0x1ee>
 8007892:	2b00      	cmp	r3, #0
 8007894:	d0c5      	beq.n	8007822 <_vfiprintf_r+0x176>
 8007896:	9105      	str	r1, [sp, #20]
 8007898:	e7c3      	b.n	8007822 <_vfiprintf_r+0x176>
 800789a:	fb0c 2101 	mla	r1, ip, r1, r2
 800789e:	4604      	mov	r4, r0
 80078a0:	2301      	movs	r3, #1
 80078a2:	e7f0      	b.n	8007886 <_vfiprintf_r+0x1da>
 80078a4:	ab03      	add	r3, sp, #12
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	462a      	mov	r2, r5
 80078aa:	4b16      	ldr	r3, [pc, #88]	; (8007904 <_vfiprintf_r+0x258>)
 80078ac:	a904      	add	r1, sp, #16
 80078ae:	4630      	mov	r0, r6
 80078b0:	f3af 8000 	nop.w
 80078b4:	4607      	mov	r7, r0
 80078b6:	1c78      	adds	r0, r7, #1
 80078b8:	d1d6      	bne.n	8007868 <_vfiprintf_r+0x1bc>
 80078ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078bc:	07d9      	lsls	r1, r3, #31
 80078be:	d405      	bmi.n	80078cc <_vfiprintf_r+0x220>
 80078c0:	89ab      	ldrh	r3, [r5, #12]
 80078c2:	059a      	lsls	r2, r3, #22
 80078c4:	d402      	bmi.n	80078cc <_vfiprintf_r+0x220>
 80078c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078c8:	f7ff fb72 	bl	8006fb0 <__retarget_lock_release_recursive>
 80078cc:	89ab      	ldrh	r3, [r5, #12]
 80078ce:	065b      	lsls	r3, r3, #25
 80078d0:	f53f af12 	bmi.w	80076f8 <_vfiprintf_r+0x4c>
 80078d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078d6:	e711      	b.n	80076fc <_vfiprintf_r+0x50>
 80078d8:	ab03      	add	r3, sp, #12
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	462a      	mov	r2, r5
 80078de:	4b09      	ldr	r3, [pc, #36]	; (8007904 <_vfiprintf_r+0x258>)
 80078e0:	a904      	add	r1, sp, #16
 80078e2:	4630      	mov	r0, r6
 80078e4:	f000 f880 	bl	80079e8 <_printf_i>
 80078e8:	e7e4      	b.n	80078b4 <_vfiprintf_r+0x208>
 80078ea:	bf00      	nop
 80078ec:	08008b98 	.word	0x08008b98
 80078f0:	08008bb8 	.word	0x08008bb8
 80078f4:	08008b78 	.word	0x08008b78
 80078f8:	08008c8e 	.word	0x08008c8e
 80078fc:	08008c98 	.word	0x08008c98
 8007900:	00000000 	.word	0x00000000
 8007904:	08007687 	.word	0x08007687
 8007908:	08008c94 	.word	0x08008c94

0800790c <_printf_common>:
 800790c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007910:	4616      	mov	r6, r2
 8007912:	4699      	mov	r9, r3
 8007914:	688a      	ldr	r2, [r1, #8]
 8007916:	690b      	ldr	r3, [r1, #16]
 8007918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800791c:	4293      	cmp	r3, r2
 800791e:	bfb8      	it	lt
 8007920:	4613      	movlt	r3, r2
 8007922:	6033      	str	r3, [r6, #0]
 8007924:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007928:	4607      	mov	r7, r0
 800792a:	460c      	mov	r4, r1
 800792c:	b10a      	cbz	r2, 8007932 <_printf_common+0x26>
 800792e:	3301      	adds	r3, #1
 8007930:	6033      	str	r3, [r6, #0]
 8007932:	6823      	ldr	r3, [r4, #0]
 8007934:	0699      	lsls	r1, r3, #26
 8007936:	bf42      	ittt	mi
 8007938:	6833      	ldrmi	r3, [r6, #0]
 800793a:	3302      	addmi	r3, #2
 800793c:	6033      	strmi	r3, [r6, #0]
 800793e:	6825      	ldr	r5, [r4, #0]
 8007940:	f015 0506 	ands.w	r5, r5, #6
 8007944:	d106      	bne.n	8007954 <_printf_common+0x48>
 8007946:	f104 0a19 	add.w	sl, r4, #25
 800794a:	68e3      	ldr	r3, [r4, #12]
 800794c:	6832      	ldr	r2, [r6, #0]
 800794e:	1a9b      	subs	r3, r3, r2
 8007950:	42ab      	cmp	r3, r5
 8007952:	dc26      	bgt.n	80079a2 <_printf_common+0x96>
 8007954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007958:	1e13      	subs	r3, r2, #0
 800795a:	6822      	ldr	r2, [r4, #0]
 800795c:	bf18      	it	ne
 800795e:	2301      	movne	r3, #1
 8007960:	0692      	lsls	r2, r2, #26
 8007962:	d42b      	bmi.n	80079bc <_printf_common+0xb0>
 8007964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007968:	4649      	mov	r1, r9
 800796a:	4638      	mov	r0, r7
 800796c:	47c0      	blx	r8
 800796e:	3001      	adds	r0, #1
 8007970:	d01e      	beq.n	80079b0 <_printf_common+0xa4>
 8007972:	6823      	ldr	r3, [r4, #0]
 8007974:	68e5      	ldr	r5, [r4, #12]
 8007976:	6832      	ldr	r2, [r6, #0]
 8007978:	f003 0306 	and.w	r3, r3, #6
 800797c:	2b04      	cmp	r3, #4
 800797e:	bf08      	it	eq
 8007980:	1aad      	subeq	r5, r5, r2
 8007982:	68a3      	ldr	r3, [r4, #8]
 8007984:	6922      	ldr	r2, [r4, #16]
 8007986:	bf0c      	ite	eq
 8007988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800798c:	2500      	movne	r5, #0
 800798e:	4293      	cmp	r3, r2
 8007990:	bfc4      	itt	gt
 8007992:	1a9b      	subgt	r3, r3, r2
 8007994:	18ed      	addgt	r5, r5, r3
 8007996:	2600      	movs	r6, #0
 8007998:	341a      	adds	r4, #26
 800799a:	42b5      	cmp	r5, r6
 800799c:	d11a      	bne.n	80079d4 <_printf_common+0xc8>
 800799e:	2000      	movs	r0, #0
 80079a0:	e008      	b.n	80079b4 <_printf_common+0xa8>
 80079a2:	2301      	movs	r3, #1
 80079a4:	4652      	mov	r2, sl
 80079a6:	4649      	mov	r1, r9
 80079a8:	4638      	mov	r0, r7
 80079aa:	47c0      	blx	r8
 80079ac:	3001      	adds	r0, #1
 80079ae:	d103      	bne.n	80079b8 <_printf_common+0xac>
 80079b0:	f04f 30ff 	mov.w	r0, #4294967295
 80079b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b8:	3501      	adds	r5, #1
 80079ba:	e7c6      	b.n	800794a <_printf_common+0x3e>
 80079bc:	18e1      	adds	r1, r4, r3
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	2030      	movs	r0, #48	; 0x30
 80079c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079c6:	4422      	add	r2, r4
 80079c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079d0:	3302      	adds	r3, #2
 80079d2:	e7c7      	b.n	8007964 <_printf_common+0x58>
 80079d4:	2301      	movs	r3, #1
 80079d6:	4622      	mov	r2, r4
 80079d8:	4649      	mov	r1, r9
 80079da:	4638      	mov	r0, r7
 80079dc:	47c0      	blx	r8
 80079de:	3001      	adds	r0, #1
 80079e0:	d0e6      	beq.n	80079b0 <_printf_common+0xa4>
 80079e2:	3601      	adds	r6, #1
 80079e4:	e7d9      	b.n	800799a <_printf_common+0x8e>
	...

080079e8 <_printf_i>:
 80079e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079ec:	460c      	mov	r4, r1
 80079ee:	4691      	mov	r9, r2
 80079f0:	7e27      	ldrb	r7, [r4, #24]
 80079f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80079f4:	2f78      	cmp	r7, #120	; 0x78
 80079f6:	4680      	mov	r8, r0
 80079f8:	469a      	mov	sl, r3
 80079fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079fe:	d807      	bhi.n	8007a10 <_printf_i+0x28>
 8007a00:	2f62      	cmp	r7, #98	; 0x62
 8007a02:	d80a      	bhi.n	8007a1a <_printf_i+0x32>
 8007a04:	2f00      	cmp	r7, #0
 8007a06:	f000 80d8 	beq.w	8007bba <_printf_i+0x1d2>
 8007a0a:	2f58      	cmp	r7, #88	; 0x58
 8007a0c:	f000 80a3 	beq.w	8007b56 <_printf_i+0x16e>
 8007a10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a18:	e03a      	b.n	8007a90 <_printf_i+0xa8>
 8007a1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a1e:	2b15      	cmp	r3, #21
 8007a20:	d8f6      	bhi.n	8007a10 <_printf_i+0x28>
 8007a22:	a001      	add	r0, pc, #4	; (adr r0, 8007a28 <_printf_i+0x40>)
 8007a24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007a28:	08007a81 	.word	0x08007a81
 8007a2c:	08007a95 	.word	0x08007a95
 8007a30:	08007a11 	.word	0x08007a11
 8007a34:	08007a11 	.word	0x08007a11
 8007a38:	08007a11 	.word	0x08007a11
 8007a3c:	08007a11 	.word	0x08007a11
 8007a40:	08007a95 	.word	0x08007a95
 8007a44:	08007a11 	.word	0x08007a11
 8007a48:	08007a11 	.word	0x08007a11
 8007a4c:	08007a11 	.word	0x08007a11
 8007a50:	08007a11 	.word	0x08007a11
 8007a54:	08007ba1 	.word	0x08007ba1
 8007a58:	08007ac5 	.word	0x08007ac5
 8007a5c:	08007b83 	.word	0x08007b83
 8007a60:	08007a11 	.word	0x08007a11
 8007a64:	08007a11 	.word	0x08007a11
 8007a68:	08007bc3 	.word	0x08007bc3
 8007a6c:	08007a11 	.word	0x08007a11
 8007a70:	08007ac5 	.word	0x08007ac5
 8007a74:	08007a11 	.word	0x08007a11
 8007a78:	08007a11 	.word	0x08007a11
 8007a7c:	08007b8b 	.word	0x08007b8b
 8007a80:	680b      	ldr	r3, [r1, #0]
 8007a82:	1d1a      	adds	r2, r3, #4
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	600a      	str	r2, [r1, #0]
 8007a88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a90:	2301      	movs	r3, #1
 8007a92:	e0a3      	b.n	8007bdc <_printf_i+0x1f4>
 8007a94:	6825      	ldr	r5, [r4, #0]
 8007a96:	6808      	ldr	r0, [r1, #0]
 8007a98:	062e      	lsls	r6, r5, #24
 8007a9a:	f100 0304 	add.w	r3, r0, #4
 8007a9e:	d50a      	bpl.n	8007ab6 <_printf_i+0xce>
 8007aa0:	6805      	ldr	r5, [r0, #0]
 8007aa2:	600b      	str	r3, [r1, #0]
 8007aa4:	2d00      	cmp	r5, #0
 8007aa6:	da03      	bge.n	8007ab0 <_printf_i+0xc8>
 8007aa8:	232d      	movs	r3, #45	; 0x2d
 8007aaa:	426d      	negs	r5, r5
 8007aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ab0:	485e      	ldr	r0, [pc, #376]	; (8007c2c <_printf_i+0x244>)
 8007ab2:	230a      	movs	r3, #10
 8007ab4:	e019      	b.n	8007aea <_printf_i+0x102>
 8007ab6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007aba:	6805      	ldr	r5, [r0, #0]
 8007abc:	600b      	str	r3, [r1, #0]
 8007abe:	bf18      	it	ne
 8007ac0:	b22d      	sxthne	r5, r5
 8007ac2:	e7ef      	b.n	8007aa4 <_printf_i+0xbc>
 8007ac4:	680b      	ldr	r3, [r1, #0]
 8007ac6:	6825      	ldr	r5, [r4, #0]
 8007ac8:	1d18      	adds	r0, r3, #4
 8007aca:	6008      	str	r0, [r1, #0]
 8007acc:	0628      	lsls	r0, r5, #24
 8007ace:	d501      	bpl.n	8007ad4 <_printf_i+0xec>
 8007ad0:	681d      	ldr	r5, [r3, #0]
 8007ad2:	e002      	b.n	8007ada <_printf_i+0xf2>
 8007ad4:	0669      	lsls	r1, r5, #25
 8007ad6:	d5fb      	bpl.n	8007ad0 <_printf_i+0xe8>
 8007ad8:	881d      	ldrh	r5, [r3, #0]
 8007ada:	4854      	ldr	r0, [pc, #336]	; (8007c2c <_printf_i+0x244>)
 8007adc:	2f6f      	cmp	r7, #111	; 0x6f
 8007ade:	bf0c      	ite	eq
 8007ae0:	2308      	moveq	r3, #8
 8007ae2:	230a      	movne	r3, #10
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007aea:	6866      	ldr	r6, [r4, #4]
 8007aec:	60a6      	str	r6, [r4, #8]
 8007aee:	2e00      	cmp	r6, #0
 8007af0:	bfa2      	ittt	ge
 8007af2:	6821      	ldrge	r1, [r4, #0]
 8007af4:	f021 0104 	bicge.w	r1, r1, #4
 8007af8:	6021      	strge	r1, [r4, #0]
 8007afa:	b90d      	cbnz	r5, 8007b00 <_printf_i+0x118>
 8007afc:	2e00      	cmp	r6, #0
 8007afe:	d04d      	beq.n	8007b9c <_printf_i+0x1b4>
 8007b00:	4616      	mov	r6, r2
 8007b02:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b06:	fb03 5711 	mls	r7, r3, r1, r5
 8007b0a:	5dc7      	ldrb	r7, [r0, r7]
 8007b0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b10:	462f      	mov	r7, r5
 8007b12:	42bb      	cmp	r3, r7
 8007b14:	460d      	mov	r5, r1
 8007b16:	d9f4      	bls.n	8007b02 <_printf_i+0x11a>
 8007b18:	2b08      	cmp	r3, #8
 8007b1a:	d10b      	bne.n	8007b34 <_printf_i+0x14c>
 8007b1c:	6823      	ldr	r3, [r4, #0]
 8007b1e:	07df      	lsls	r7, r3, #31
 8007b20:	d508      	bpl.n	8007b34 <_printf_i+0x14c>
 8007b22:	6923      	ldr	r3, [r4, #16]
 8007b24:	6861      	ldr	r1, [r4, #4]
 8007b26:	4299      	cmp	r1, r3
 8007b28:	bfde      	ittt	le
 8007b2a:	2330      	movle	r3, #48	; 0x30
 8007b2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b34:	1b92      	subs	r2, r2, r6
 8007b36:	6122      	str	r2, [r4, #16]
 8007b38:	f8cd a000 	str.w	sl, [sp]
 8007b3c:	464b      	mov	r3, r9
 8007b3e:	aa03      	add	r2, sp, #12
 8007b40:	4621      	mov	r1, r4
 8007b42:	4640      	mov	r0, r8
 8007b44:	f7ff fee2 	bl	800790c <_printf_common>
 8007b48:	3001      	adds	r0, #1
 8007b4a:	d14c      	bne.n	8007be6 <_printf_i+0x1fe>
 8007b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b50:	b004      	add	sp, #16
 8007b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b56:	4835      	ldr	r0, [pc, #212]	; (8007c2c <_printf_i+0x244>)
 8007b58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	680e      	ldr	r6, [r1, #0]
 8007b60:	061f      	lsls	r7, r3, #24
 8007b62:	f856 5b04 	ldr.w	r5, [r6], #4
 8007b66:	600e      	str	r6, [r1, #0]
 8007b68:	d514      	bpl.n	8007b94 <_printf_i+0x1ac>
 8007b6a:	07d9      	lsls	r1, r3, #31
 8007b6c:	bf44      	itt	mi
 8007b6e:	f043 0320 	orrmi.w	r3, r3, #32
 8007b72:	6023      	strmi	r3, [r4, #0]
 8007b74:	b91d      	cbnz	r5, 8007b7e <_printf_i+0x196>
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	f023 0320 	bic.w	r3, r3, #32
 8007b7c:	6023      	str	r3, [r4, #0]
 8007b7e:	2310      	movs	r3, #16
 8007b80:	e7b0      	b.n	8007ae4 <_printf_i+0xfc>
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	f043 0320 	orr.w	r3, r3, #32
 8007b88:	6023      	str	r3, [r4, #0]
 8007b8a:	2378      	movs	r3, #120	; 0x78
 8007b8c:	4828      	ldr	r0, [pc, #160]	; (8007c30 <_printf_i+0x248>)
 8007b8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b92:	e7e3      	b.n	8007b5c <_printf_i+0x174>
 8007b94:	065e      	lsls	r6, r3, #25
 8007b96:	bf48      	it	mi
 8007b98:	b2ad      	uxthmi	r5, r5
 8007b9a:	e7e6      	b.n	8007b6a <_printf_i+0x182>
 8007b9c:	4616      	mov	r6, r2
 8007b9e:	e7bb      	b.n	8007b18 <_printf_i+0x130>
 8007ba0:	680b      	ldr	r3, [r1, #0]
 8007ba2:	6826      	ldr	r6, [r4, #0]
 8007ba4:	6960      	ldr	r0, [r4, #20]
 8007ba6:	1d1d      	adds	r5, r3, #4
 8007ba8:	600d      	str	r5, [r1, #0]
 8007baa:	0635      	lsls	r5, r6, #24
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	d501      	bpl.n	8007bb4 <_printf_i+0x1cc>
 8007bb0:	6018      	str	r0, [r3, #0]
 8007bb2:	e002      	b.n	8007bba <_printf_i+0x1d2>
 8007bb4:	0671      	lsls	r1, r6, #25
 8007bb6:	d5fb      	bpl.n	8007bb0 <_printf_i+0x1c8>
 8007bb8:	8018      	strh	r0, [r3, #0]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	6123      	str	r3, [r4, #16]
 8007bbe:	4616      	mov	r6, r2
 8007bc0:	e7ba      	b.n	8007b38 <_printf_i+0x150>
 8007bc2:	680b      	ldr	r3, [r1, #0]
 8007bc4:	1d1a      	adds	r2, r3, #4
 8007bc6:	600a      	str	r2, [r1, #0]
 8007bc8:	681e      	ldr	r6, [r3, #0]
 8007bca:	6862      	ldr	r2, [r4, #4]
 8007bcc:	2100      	movs	r1, #0
 8007bce:	4630      	mov	r0, r6
 8007bd0:	f7f8 fb1e 	bl	8000210 <memchr>
 8007bd4:	b108      	cbz	r0, 8007bda <_printf_i+0x1f2>
 8007bd6:	1b80      	subs	r0, r0, r6
 8007bd8:	6060      	str	r0, [r4, #4]
 8007bda:	6863      	ldr	r3, [r4, #4]
 8007bdc:	6123      	str	r3, [r4, #16]
 8007bde:	2300      	movs	r3, #0
 8007be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007be4:	e7a8      	b.n	8007b38 <_printf_i+0x150>
 8007be6:	6923      	ldr	r3, [r4, #16]
 8007be8:	4632      	mov	r2, r6
 8007bea:	4649      	mov	r1, r9
 8007bec:	4640      	mov	r0, r8
 8007bee:	47d0      	blx	sl
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	d0ab      	beq.n	8007b4c <_printf_i+0x164>
 8007bf4:	6823      	ldr	r3, [r4, #0]
 8007bf6:	079b      	lsls	r3, r3, #30
 8007bf8:	d413      	bmi.n	8007c22 <_printf_i+0x23a>
 8007bfa:	68e0      	ldr	r0, [r4, #12]
 8007bfc:	9b03      	ldr	r3, [sp, #12]
 8007bfe:	4298      	cmp	r0, r3
 8007c00:	bfb8      	it	lt
 8007c02:	4618      	movlt	r0, r3
 8007c04:	e7a4      	b.n	8007b50 <_printf_i+0x168>
 8007c06:	2301      	movs	r3, #1
 8007c08:	4632      	mov	r2, r6
 8007c0a:	4649      	mov	r1, r9
 8007c0c:	4640      	mov	r0, r8
 8007c0e:	47d0      	blx	sl
 8007c10:	3001      	adds	r0, #1
 8007c12:	d09b      	beq.n	8007b4c <_printf_i+0x164>
 8007c14:	3501      	adds	r5, #1
 8007c16:	68e3      	ldr	r3, [r4, #12]
 8007c18:	9903      	ldr	r1, [sp, #12]
 8007c1a:	1a5b      	subs	r3, r3, r1
 8007c1c:	42ab      	cmp	r3, r5
 8007c1e:	dcf2      	bgt.n	8007c06 <_printf_i+0x21e>
 8007c20:	e7eb      	b.n	8007bfa <_printf_i+0x212>
 8007c22:	2500      	movs	r5, #0
 8007c24:	f104 0619 	add.w	r6, r4, #25
 8007c28:	e7f5      	b.n	8007c16 <_printf_i+0x22e>
 8007c2a:	bf00      	nop
 8007c2c:	08008c9f 	.word	0x08008c9f
 8007c30:	08008cb0 	.word	0x08008cb0

08007c34 <_read_r>:
 8007c34:	b538      	push	{r3, r4, r5, lr}
 8007c36:	4d07      	ldr	r5, [pc, #28]	; (8007c54 <_read_r+0x20>)
 8007c38:	4604      	mov	r4, r0
 8007c3a:	4608      	mov	r0, r1
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	2200      	movs	r2, #0
 8007c40:	602a      	str	r2, [r5, #0]
 8007c42:	461a      	mov	r2, r3
 8007c44:	f7f9 feec 	bl	8001a20 <_read>
 8007c48:	1c43      	adds	r3, r0, #1
 8007c4a:	d102      	bne.n	8007c52 <_read_r+0x1e>
 8007c4c:	682b      	ldr	r3, [r5, #0]
 8007c4e:	b103      	cbz	r3, 8007c52 <_read_r+0x1e>
 8007c50:	6023      	str	r3, [r4, #0]
 8007c52:	bd38      	pop	{r3, r4, r5, pc}
 8007c54:	20005004 	.word	0x20005004

08007c58 <__swbuf_r>:
 8007c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5a:	460e      	mov	r6, r1
 8007c5c:	4614      	mov	r4, r2
 8007c5e:	4605      	mov	r5, r0
 8007c60:	b118      	cbz	r0, 8007c6a <__swbuf_r+0x12>
 8007c62:	6983      	ldr	r3, [r0, #24]
 8007c64:	b90b      	cbnz	r3, 8007c6a <__swbuf_r+0x12>
 8007c66:	f7ff f8df 	bl	8006e28 <__sinit>
 8007c6a:	4b21      	ldr	r3, [pc, #132]	; (8007cf0 <__swbuf_r+0x98>)
 8007c6c:	429c      	cmp	r4, r3
 8007c6e:	d12b      	bne.n	8007cc8 <__swbuf_r+0x70>
 8007c70:	686c      	ldr	r4, [r5, #4]
 8007c72:	69a3      	ldr	r3, [r4, #24]
 8007c74:	60a3      	str	r3, [r4, #8]
 8007c76:	89a3      	ldrh	r3, [r4, #12]
 8007c78:	071a      	lsls	r2, r3, #28
 8007c7a:	d52f      	bpl.n	8007cdc <__swbuf_r+0x84>
 8007c7c:	6923      	ldr	r3, [r4, #16]
 8007c7e:	b36b      	cbz	r3, 8007cdc <__swbuf_r+0x84>
 8007c80:	6923      	ldr	r3, [r4, #16]
 8007c82:	6820      	ldr	r0, [r4, #0]
 8007c84:	1ac0      	subs	r0, r0, r3
 8007c86:	6963      	ldr	r3, [r4, #20]
 8007c88:	b2f6      	uxtb	r6, r6
 8007c8a:	4283      	cmp	r3, r0
 8007c8c:	4637      	mov	r7, r6
 8007c8e:	dc04      	bgt.n	8007c9a <__swbuf_r+0x42>
 8007c90:	4621      	mov	r1, r4
 8007c92:	4628      	mov	r0, r5
 8007c94:	f7ff fc0a 	bl	80074ac <_fflush_r>
 8007c98:	bb30      	cbnz	r0, 8007ce8 <__swbuf_r+0x90>
 8007c9a:	68a3      	ldr	r3, [r4, #8]
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	60a3      	str	r3, [r4, #8]
 8007ca0:	6823      	ldr	r3, [r4, #0]
 8007ca2:	1c5a      	adds	r2, r3, #1
 8007ca4:	6022      	str	r2, [r4, #0]
 8007ca6:	701e      	strb	r6, [r3, #0]
 8007ca8:	6963      	ldr	r3, [r4, #20]
 8007caa:	3001      	adds	r0, #1
 8007cac:	4283      	cmp	r3, r0
 8007cae:	d004      	beq.n	8007cba <__swbuf_r+0x62>
 8007cb0:	89a3      	ldrh	r3, [r4, #12]
 8007cb2:	07db      	lsls	r3, r3, #31
 8007cb4:	d506      	bpl.n	8007cc4 <__swbuf_r+0x6c>
 8007cb6:	2e0a      	cmp	r6, #10
 8007cb8:	d104      	bne.n	8007cc4 <__swbuf_r+0x6c>
 8007cba:	4621      	mov	r1, r4
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	f7ff fbf5 	bl	80074ac <_fflush_r>
 8007cc2:	b988      	cbnz	r0, 8007ce8 <__swbuf_r+0x90>
 8007cc4:	4638      	mov	r0, r7
 8007cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cc8:	4b0a      	ldr	r3, [pc, #40]	; (8007cf4 <__swbuf_r+0x9c>)
 8007cca:	429c      	cmp	r4, r3
 8007ccc:	d101      	bne.n	8007cd2 <__swbuf_r+0x7a>
 8007cce:	68ac      	ldr	r4, [r5, #8]
 8007cd0:	e7cf      	b.n	8007c72 <__swbuf_r+0x1a>
 8007cd2:	4b09      	ldr	r3, [pc, #36]	; (8007cf8 <__swbuf_r+0xa0>)
 8007cd4:	429c      	cmp	r4, r3
 8007cd6:	bf08      	it	eq
 8007cd8:	68ec      	ldreq	r4, [r5, #12]
 8007cda:	e7ca      	b.n	8007c72 <__swbuf_r+0x1a>
 8007cdc:	4621      	mov	r1, r4
 8007cde:	4628      	mov	r0, r5
 8007ce0:	f000 f80c 	bl	8007cfc <__swsetup_r>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	d0cb      	beq.n	8007c80 <__swbuf_r+0x28>
 8007ce8:	f04f 37ff 	mov.w	r7, #4294967295
 8007cec:	e7ea      	b.n	8007cc4 <__swbuf_r+0x6c>
 8007cee:	bf00      	nop
 8007cf0:	08008b98 	.word	0x08008b98
 8007cf4:	08008bb8 	.word	0x08008bb8
 8007cf8:	08008b78 	.word	0x08008b78

08007cfc <__swsetup_r>:
 8007cfc:	4b32      	ldr	r3, [pc, #200]	; (8007dc8 <__swsetup_r+0xcc>)
 8007cfe:	b570      	push	{r4, r5, r6, lr}
 8007d00:	681d      	ldr	r5, [r3, #0]
 8007d02:	4606      	mov	r6, r0
 8007d04:	460c      	mov	r4, r1
 8007d06:	b125      	cbz	r5, 8007d12 <__swsetup_r+0x16>
 8007d08:	69ab      	ldr	r3, [r5, #24]
 8007d0a:	b913      	cbnz	r3, 8007d12 <__swsetup_r+0x16>
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	f7ff f88b 	bl	8006e28 <__sinit>
 8007d12:	4b2e      	ldr	r3, [pc, #184]	; (8007dcc <__swsetup_r+0xd0>)
 8007d14:	429c      	cmp	r4, r3
 8007d16:	d10f      	bne.n	8007d38 <__swsetup_r+0x3c>
 8007d18:	686c      	ldr	r4, [r5, #4]
 8007d1a:	89a3      	ldrh	r3, [r4, #12]
 8007d1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d20:	0719      	lsls	r1, r3, #28
 8007d22:	d42c      	bmi.n	8007d7e <__swsetup_r+0x82>
 8007d24:	06dd      	lsls	r5, r3, #27
 8007d26:	d411      	bmi.n	8007d4c <__swsetup_r+0x50>
 8007d28:	2309      	movs	r3, #9
 8007d2a:	6033      	str	r3, [r6, #0]
 8007d2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d30:	81a3      	strh	r3, [r4, #12]
 8007d32:	f04f 30ff 	mov.w	r0, #4294967295
 8007d36:	e03e      	b.n	8007db6 <__swsetup_r+0xba>
 8007d38:	4b25      	ldr	r3, [pc, #148]	; (8007dd0 <__swsetup_r+0xd4>)
 8007d3a:	429c      	cmp	r4, r3
 8007d3c:	d101      	bne.n	8007d42 <__swsetup_r+0x46>
 8007d3e:	68ac      	ldr	r4, [r5, #8]
 8007d40:	e7eb      	b.n	8007d1a <__swsetup_r+0x1e>
 8007d42:	4b24      	ldr	r3, [pc, #144]	; (8007dd4 <__swsetup_r+0xd8>)
 8007d44:	429c      	cmp	r4, r3
 8007d46:	bf08      	it	eq
 8007d48:	68ec      	ldreq	r4, [r5, #12]
 8007d4a:	e7e6      	b.n	8007d1a <__swsetup_r+0x1e>
 8007d4c:	0758      	lsls	r0, r3, #29
 8007d4e:	d512      	bpl.n	8007d76 <__swsetup_r+0x7a>
 8007d50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d52:	b141      	cbz	r1, 8007d66 <__swsetup_r+0x6a>
 8007d54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d58:	4299      	cmp	r1, r3
 8007d5a:	d002      	beq.n	8007d62 <__swsetup_r+0x66>
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f7ff fc2b 	bl	80075b8 <_free_r>
 8007d62:	2300      	movs	r3, #0
 8007d64:	6363      	str	r3, [r4, #52]	; 0x34
 8007d66:	89a3      	ldrh	r3, [r4, #12]
 8007d68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d6c:	81a3      	strh	r3, [r4, #12]
 8007d6e:	2300      	movs	r3, #0
 8007d70:	6063      	str	r3, [r4, #4]
 8007d72:	6923      	ldr	r3, [r4, #16]
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	89a3      	ldrh	r3, [r4, #12]
 8007d78:	f043 0308 	orr.w	r3, r3, #8
 8007d7c:	81a3      	strh	r3, [r4, #12]
 8007d7e:	6923      	ldr	r3, [r4, #16]
 8007d80:	b94b      	cbnz	r3, 8007d96 <__swsetup_r+0x9a>
 8007d82:	89a3      	ldrh	r3, [r4, #12]
 8007d84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d8c:	d003      	beq.n	8007d96 <__swsetup_r+0x9a>
 8007d8e:	4621      	mov	r1, r4
 8007d90:	4630      	mov	r0, r6
 8007d92:	f000 f84d 	bl	8007e30 <__smakebuf_r>
 8007d96:	89a0      	ldrh	r0, [r4, #12]
 8007d98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d9c:	f010 0301 	ands.w	r3, r0, #1
 8007da0:	d00a      	beq.n	8007db8 <__swsetup_r+0xbc>
 8007da2:	2300      	movs	r3, #0
 8007da4:	60a3      	str	r3, [r4, #8]
 8007da6:	6963      	ldr	r3, [r4, #20]
 8007da8:	425b      	negs	r3, r3
 8007daa:	61a3      	str	r3, [r4, #24]
 8007dac:	6923      	ldr	r3, [r4, #16]
 8007dae:	b943      	cbnz	r3, 8007dc2 <__swsetup_r+0xc6>
 8007db0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007db4:	d1ba      	bne.n	8007d2c <__swsetup_r+0x30>
 8007db6:	bd70      	pop	{r4, r5, r6, pc}
 8007db8:	0781      	lsls	r1, r0, #30
 8007dba:	bf58      	it	pl
 8007dbc:	6963      	ldrpl	r3, [r4, #20]
 8007dbe:	60a3      	str	r3, [r4, #8]
 8007dc0:	e7f4      	b.n	8007dac <__swsetup_r+0xb0>
 8007dc2:	2000      	movs	r0, #0
 8007dc4:	e7f7      	b.n	8007db6 <__swsetup_r+0xba>
 8007dc6:	bf00      	nop
 8007dc8:	20000010 	.word	0x20000010
 8007dcc:	08008b98 	.word	0x08008b98
 8007dd0:	08008bb8 	.word	0x08008bb8
 8007dd4:	08008b78 	.word	0x08008b78

08007dd8 <abort>:
 8007dd8:	b508      	push	{r3, lr}
 8007dda:	2006      	movs	r0, #6
 8007ddc:	f000 f890 	bl	8007f00 <raise>
 8007de0:	2001      	movs	r0, #1
 8007de2:	f7f9 fe13 	bl	8001a0c <_exit>

08007de6 <__swhatbuf_r>:
 8007de6:	b570      	push	{r4, r5, r6, lr}
 8007de8:	460e      	mov	r6, r1
 8007dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dee:	2900      	cmp	r1, #0
 8007df0:	b096      	sub	sp, #88	; 0x58
 8007df2:	4614      	mov	r4, r2
 8007df4:	461d      	mov	r5, r3
 8007df6:	da07      	bge.n	8007e08 <__swhatbuf_r+0x22>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	602b      	str	r3, [r5, #0]
 8007dfc:	89b3      	ldrh	r3, [r6, #12]
 8007dfe:	061a      	lsls	r2, r3, #24
 8007e00:	d410      	bmi.n	8007e24 <__swhatbuf_r+0x3e>
 8007e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e06:	e00e      	b.n	8007e26 <__swhatbuf_r+0x40>
 8007e08:	466a      	mov	r2, sp
 8007e0a:	f000 f895 	bl	8007f38 <_fstat_r>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	dbf2      	blt.n	8007df8 <__swhatbuf_r+0x12>
 8007e12:	9a01      	ldr	r2, [sp, #4]
 8007e14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e1c:	425a      	negs	r2, r3
 8007e1e:	415a      	adcs	r2, r3
 8007e20:	602a      	str	r2, [r5, #0]
 8007e22:	e7ee      	b.n	8007e02 <__swhatbuf_r+0x1c>
 8007e24:	2340      	movs	r3, #64	; 0x40
 8007e26:	2000      	movs	r0, #0
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	b016      	add	sp, #88	; 0x58
 8007e2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e30 <__smakebuf_r>:
 8007e30:	898b      	ldrh	r3, [r1, #12]
 8007e32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e34:	079d      	lsls	r5, r3, #30
 8007e36:	4606      	mov	r6, r0
 8007e38:	460c      	mov	r4, r1
 8007e3a:	d507      	bpl.n	8007e4c <__smakebuf_r+0x1c>
 8007e3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e40:	6023      	str	r3, [r4, #0]
 8007e42:	6123      	str	r3, [r4, #16]
 8007e44:	2301      	movs	r3, #1
 8007e46:	6163      	str	r3, [r4, #20]
 8007e48:	b002      	add	sp, #8
 8007e4a:	bd70      	pop	{r4, r5, r6, pc}
 8007e4c:	ab01      	add	r3, sp, #4
 8007e4e:	466a      	mov	r2, sp
 8007e50:	f7ff ffc9 	bl	8007de6 <__swhatbuf_r>
 8007e54:	9900      	ldr	r1, [sp, #0]
 8007e56:	4605      	mov	r5, r0
 8007e58:	4630      	mov	r0, r6
 8007e5a:	f7ff f8c1 	bl	8006fe0 <_malloc_r>
 8007e5e:	b948      	cbnz	r0, 8007e74 <__smakebuf_r+0x44>
 8007e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e64:	059a      	lsls	r2, r3, #22
 8007e66:	d4ef      	bmi.n	8007e48 <__smakebuf_r+0x18>
 8007e68:	f023 0303 	bic.w	r3, r3, #3
 8007e6c:	f043 0302 	orr.w	r3, r3, #2
 8007e70:	81a3      	strh	r3, [r4, #12]
 8007e72:	e7e3      	b.n	8007e3c <__smakebuf_r+0xc>
 8007e74:	4b0d      	ldr	r3, [pc, #52]	; (8007eac <__smakebuf_r+0x7c>)
 8007e76:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e78:	89a3      	ldrh	r3, [r4, #12]
 8007e7a:	6020      	str	r0, [r4, #0]
 8007e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e80:	81a3      	strh	r3, [r4, #12]
 8007e82:	9b00      	ldr	r3, [sp, #0]
 8007e84:	6163      	str	r3, [r4, #20]
 8007e86:	9b01      	ldr	r3, [sp, #4]
 8007e88:	6120      	str	r0, [r4, #16]
 8007e8a:	b15b      	cbz	r3, 8007ea4 <__smakebuf_r+0x74>
 8007e8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e90:	4630      	mov	r0, r6
 8007e92:	f000 f863 	bl	8007f5c <_isatty_r>
 8007e96:	b128      	cbz	r0, 8007ea4 <__smakebuf_r+0x74>
 8007e98:	89a3      	ldrh	r3, [r4, #12]
 8007e9a:	f023 0303 	bic.w	r3, r3, #3
 8007e9e:	f043 0301 	orr.w	r3, r3, #1
 8007ea2:	81a3      	strh	r3, [r4, #12]
 8007ea4:	89a0      	ldrh	r0, [r4, #12]
 8007ea6:	4305      	orrs	r5, r0
 8007ea8:	81a5      	strh	r5, [r4, #12]
 8007eaa:	e7cd      	b.n	8007e48 <__smakebuf_r+0x18>
 8007eac:	08006dc1 	.word	0x08006dc1

08007eb0 <_raise_r>:
 8007eb0:	291f      	cmp	r1, #31
 8007eb2:	b538      	push	{r3, r4, r5, lr}
 8007eb4:	4604      	mov	r4, r0
 8007eb6:	460d      	mov	r5, r1
 8007eb8:	d904      	bls.n	8007ec4 <_raise_r+0x14>
 8007eba:	2316      	movs	r3, #22
 8007ebc:	6003      	str	r3, [r0, #0]
 8007ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec2:	bd38      	pop	{r3, r4, r5, pc}
 8007ec4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007ec6:	b112      	cbz	r2, 8007ece <_raise_r+0x1e>
 8007ec8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ecc:	b94b      	cbnz	r3, 8007ee2 <_raise_r+0x32>
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f000 f830 	bl	8007f34 <_getpid_r>
 8007ed4:	462a      	mov	r2, r5
 8007ed6:	4601      	mov	r1, r0
 8007ed8:	4620      	mov	r0, r4
 8007eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ede:	f000 b817 	b.w	8007f10 <_kill_r>
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d00a      	beq.n	8007efc <_raise_r+0x4c>
 8007ee6:	1c59      	adds	r1, r3, #1
 8007ee8:	d103      	bne.n	8007ef2 <_raise_r+0x42>
 8007eea:	2316      	movs	r3, #22
 8007eec:	6003      	str	r3, [r0, #0]
 8007eee:	2001      	movs	r0, #1
 8007ef0:	e7e7      	b.n	8007ec2 <_raise_r+0x12>
 8007ef2:	2400      	movs	r4, #0
 8007ef4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ef8:	4628      	mov	r0, r5
 8007efa:	4798      	blx	r3
 8007efc:	2000      	movs	r0, #0
 8007efe:	e7e0      	b.n	8007ec2 <_raise_r+0x12>

08007f00 <raise>:
 8007f00:	4b02      	ldr	r3, [pc, #8]	; (8007f0c <raise+0xc>)
 8007f02:	4601      	mov	r1, r0
 8007f04:	6818      	ldr	r0, [r3, #0]
 8007f06:	f7ff bfd3 	b.w	8007eb0 <_raise_r>
 8007f0a:	bf00      	nop
 8007f0c:	20000010 	.word	0x20000010

08007f10 <_kill_r>:
 8007f10:	b538      	push	{r3, r4, r5, lr}
 8007f12:	4d07      	ldr	r5, [pc, #28]	; (8007f30 <_kill_r+0x20>)
 8007f14:	2300      	movs	r3, #0
 8007f16:	4604      	mov	r4, r0
 8007f18:	4608      	mov	r0, r1
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	602b      	str	r3, [r5, #0]
 8007f1e:	f7f9 fd65 	bl	80019ec <_kill>
 8007f22:	1c43      	adds	r3, r0, #1
 8007f24:	d102      	bne.n	8007f2c <_kill_r+0x1c>
 8007f26:	682b      	ldr	r3, [r5, #0]
 8007f28:	b103      	cbz	r3, 8007f2c <_kill_r+0x1c>
 8007f2a:	6023      	str	r3, [r4, #0]
 8007f2c:	bd38      	pop	{r3, r4, r5, pc}
 8007f2e:	bf00      	nop
 8007f30:	20005004 	.word	0x20005004

08007f34 <_getpid_r>:
 8007f34:	f7f9 bd52 	b.w	80019dc <_getpid>

08007f38 <_fstat_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	4d07      	ldr	r5, [pc, #28]	; (8007f58 <_fstat_r+0x20>)
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	4604      	mov	r4, r0
 8007f40:	4608      	mov	r0, r1
 8007f42:	4611      	mov	r1, r2
 8007f44:	602b      	str	r3, [r5, #0]
 8007f46:	f7f9 fdb0 	bl	8001aaa <_fstat>
 8007f4a:	1c43      	adds	r3, r0, #1
 8007f4c:	d102      	bne.n	8007f54 <_fstat_r+0x1c>
 8007f4e:	682b      	ldr	r3, [r5, #0]
 8007f50:	b103      	cbz	r3, 8007f54 <_fstat_r+0x1c>
 8007f52:	6023      	str	r3, [r4, #0]
 8007f54:	bd38      	pop	{r3, r4, r5, pc}
 8007f56:	bf00      	nop
 8007f58:	20005004 	.word	0x20005004

08007f5c <_isatty_r>:
 8007f5c:	b538      	push	{r3, r4, r5, lr}
 8007f5e:	4d06      	ldr	r5, [pc, #24]	; (8007f78 <_isatty_r+0x1c>)
 8007f60:	2300      	movs	r3, #0
 8007f62:	4604      	mov	r4, r0
 8007f64:	4608      	mov	r0, r1
 8007f66:	602b      	str	r3, [r5, #0]
 8007f68:	f7f9 fdaf 	bl	8001aca <_isatty>
 8007f6c:	1c43      	adds	r3, r0, #1
 8007f6e:	d102      	bne.n	8007f76 <_isatty_r+0x1a>
 8007f70:	682b      	ldr	r3, [r5, #0]
 8007f72:	b103      	cbz	r3, 8007f76 <_isatty_r+0x1a>
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	bd38      	pop	{r3, r4, r5, pc}
 8007f78:	20005004 	.word	0x20005004

08007f7c <_gettimeofday>:
 8007f7c:	4b02      	ldr	r3, [pc, #8]	; (8007f88 <_gettimeofday+0xc>)
 8007f7e:	2258      	movs	r2, #88	; 0x58
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	f04f 30ff 	mov.w	r0, #4294967295
 8007f86:	4770      	bx	lr
 8007f88:	20005004 	.word	0x20005004

08007f8c <_init>:
 8007f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8e:	bf00      	nop
 8007f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f92:	bc08      	pop	{r3}
 8007f94:	469e      	mov	lr, r3
 8007f96:	4770      	bx	lr

08007f98 <_fini>:
 8007f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9a:	bf00      	nop
 8007f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f9e:	bc08      	pop	{r3}
 8007fa0:	469e      	mov	lr, r3
 8007fa2:	4770      	bx	lr
